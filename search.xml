<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos7.7安装bind-9.11.4</title>
      <link href="/2020/04/22/centos7.7%E5%AE%89%E8%A3%85bind-9.11.4/"/>
      <url>/2020/04/22/centos7.7%E5%AE%89%E8%A3%85bind-9.11.4/</url>
      
        <content type="html"><![CDATA[<img src="http://img.ymw.cn/52017121314000f821e4f.jpg" alt="avatar" style="zoom:150%;" /><a id="more"></a><h5 id="一-基础环境准备"><a href="#一-基础环境准备" class="headerlink" title="一.基础环境准备"></a>一.基础环境准备</h5><p>1.1设置主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname jmds1-11.host.com   <span class="comment">#jmds1-11生产方式常用地点命名主机方式</span></span><br></pre></td></tr></table></figure><p>1.2关闭防护墙和selinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">sed –i ‘s/SELINUX=enforcing/SELINUX=disabled/g’ /etc/selinux/config</span><br></pre></td></tr></table></figure><p>1.3设置网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">NAME=eth0</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=172.16.1.11</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.1.254</span><br><span class="line">DNS1=172.16.1.254</span><br></pre></td></tr></table></figure><p>1.4设置yum源和epel源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo  http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo  http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>1.5安装常用工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget net-tools telnet tree nmap sysstat lrzsz dos2unix <span class="built_in">bind</span>-utils -y</span><br></pre></td></tr></table></figure><h5 id="二-安装bind服务"><a href="#二-安装bind服务" class="headerlink" title="二.安装bind服务"></a>二.安装bind服务</h5><p>2.1安装bind-9.11.4服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="built_in">bind</span> -y</span><br></pre></td></tr></table></figure><p>2.2配置bind 9</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/named.conf                      <span class="comment">#配置主文件named.conf</span></span><br><span class="line">listen-on port 53 &#123; 172.16.1.11; &#125;; </span><br><span class="line">allow-query     &#123; any; &#125;;</span><br><span class="line">forwarders      &#123; 172.16.1.254; &#125;;      <span class="comment">#下一级DNS</span></span><br><span class="line">recursion yes;</span><br><span class="line">dnssec-enable no;</span><br><span class="line">dnssec-validation no</span><br><span class="line"><span class="comment">##############</span></span><br><span class="line">named-checkconf            <span class="comment">#检查named.conf文件语法</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/named.rfc1912.zones      <span class="comment">#配置域文件也可以在主文件里配置一样的</span></span><br><span class="line">zone <span class="string">"host.com"</span> IN &#123;             <span class="comment">#主机域</span></span><br><span class="line">        <span class="built_in">type</span>  master;</span><br><span class="line">        file  <span class="string">"host.com.zone"</span>;</span><br><span class="line">        allow-update &#123; 10.4.7.11; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"md.com"</span> IN &#123;               <span class="comment">#业务域MD市场部</span></span><br><span class="line">        <span class="built_in">type</span>  master;</span><br><span class="line">        file  <span class="string">"od.com.zone"</span>;</span><br><span class="line">        allow-update &#123; 10.4.7.11; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cp -p /var/named/named.localhost /var/named/host.com.zone     <span class="comment">#模板拷贝两个域加-p保持属性</span></span><br><span class="line">cp -p /var/named/named.localhost /var/named/md.com.zone</span><br><span class="line">vim /var/named/host.com.zone</span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@   IN SOA  @ rname.invalid. (</span><br><span class="line">                    0   ; serial</span><br><span class="line">                    1D  ; refresh</span><br><span class="line">                    1H  ; retry</span><br><span class="line">                    1W  ; expire</span><br><span class="line">                    3H )    ; minimum</span><br><span class="line">    NS  @</span><br><span class="line">    A   172.16.1.11</span><br><span class="line">    AAAA    ::1</span><br><span class="line">jmds1-11 A 172.16.1.11</span><br><span class="line">jmds1-12 A 172.16.1.12</span><br><span class="line">jmds1-21 A 172.16.1.21</span><br><span class="line">jmds1-22 A 172.16.1.22</span><br><span class="line">jmds1-200 A 172.16.1.200</span><br><span class="line"></span><br><span class="line">vim /var/named/md.com.zone</span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@   IN SOA  @ rname.invalid. (</span><br><span class="line">                    0   ; serial</span><br><span class="line">                    1D  ; refresh</span><br><span class="line">                    1H  ; retry</span><br><span class="line">                    1W  ; expire</span><br><span class="line">                    3H )    ; minimum</span><br><span class="line">    NS  @</span><br><span class="line">    A   172.16.1.11</span><br><span class="line">    AAAA    ::1</span><br><span class="line"></span><br><span class="line">named-checkconf                                          <span class="comment">#检查主配置文件语法</span></span><br><span class="line">named-checkzone zone /var/named/host.com.zone            <span class="comment">#检查域配置文件语法</span></span><br><span class="line">zone zone/IN: loaded serial 0</span><br><span class="line">OK</span><br><span class="line">named-checkzone zone /var/named/md.com.zone</span><br><span class="line">zone zone/IN: loaded serial 0</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>2.3检查配置并启动bind 9</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systemctl start named</span><br><span class="line">netstat -lntup|grep named</span><br><span class="line">dig -t A hdss7-11.host.com @10.4.7.11 +short</span><br><span class="line">ping jmds1-11</span><br><span class="line">PING jmds1-11.host.com (172.16.1.11) 56(84) bytes of data.</span><br><span class="line">64 bytes from jmds1-11.host.com (172.16.1.11): icmp_seq=1 ttl=64 time=0.006 ms</span><br><span class="line"></span><br><span class="line"><span class="comment">###如果systemctl start named启动不了报错，直接用 named -u named 可以启动，如果要习惯 systemctl restart named.service启动的话，注释掉下面文件一行</span></span><br><span class="line">vim /usr/lib/systemd/system/named.service</span><br><span class="line"><span class="comment">#ExecStartPre</span></span><br><span class="line"><span class="comment">#注释ExecStartPre 不检查 zone</span></span><br></pre></td></tr></table></figure><p>2.4配置DNS客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">DNS1=172.16.1.11</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line">vim /etc/resolv.conf</span><br><span class="line">search host.com</span><br><span class="line">nameserver 172.16.1.11</span><br><span class="line"><span class="comment">##########</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>完成配置！！！</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 修改网卡为eth0</title>
      <link href="/2020/04/21/Centos7%20%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E4%B8%BAeth0/"/>
      <url>/2020/04/21/Centos7%20%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E4%B8%BAeth0/</url>
      
        <content type="html"><![CDATA[<p>默认centos7安装不设置内核版本，会影响网卡的名称。所以为了我们统一管理我们需要将网卡名称修改为eth开头</p><h3 id="第一步查看服务器版本"><a href="#第一步查看服务器版本" class="headerlink" title="第一步查看服务器版本"></a>第一步查看服务器版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure><h3 id="第二步查看当前网卡名称"><a href="#第二步查看当前网卡名称" class="headerlink" title="第二步查看当前网卡名称"></a>第二步查看当前网卡名称</h3><p>我们可以看到当前网卡名称都是en0开头的，不方便我们集中管理</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ip a</span><br><span class="line">1: lo:  mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1&#x2F;8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1&#x2F;128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eno1:  mtu 1500 qdisc mq state DOWN group default qlen 1000</span><br><span class="line">    link&#x2F;ether f4:1d:6b:86:8a:09 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: eno2:  mtu 1500 qdisc mq state DOWN group default qlen 1000</span><br><span class="line">    link&#x2F;ether f4:1d:6b:86:8a:0a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: eno3:  mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link&#x2F;ether f4:1d:6b:86:8a:0b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.4.81.93&#x2F;24 brd 10.4.81.255 scope global noprefixroute eno3</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::687f:25f8:b435:887b&#x2F;64 scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: eno4:  mtu 1500 qdisc mq state DOWN group default qlen 1000</span><br><span class="line">    link&#x2F;ether f4:1d:6b:86:8a:0c brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><h3 id="第三步进入网卡配置文件"><a href="#第三步进入网卡配置文件" class="headerlink" title="第三步进入网卡配置文件"></a>第三步进入网卡配置文件</h3><p>将所有的文件mv 更换名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</span><br><span class="line">[root@localhost network-scripts]# ls</span><br><span class="line">ifcfg-eno1  ifcfg-lo     ifdown-ippp  ifdown-ppp     ifdown-TeamPort  ifup-bnep  ifup-isdn   ifup-ppp     ifup-TeamPort     network-functions</span><br><span class="line">ifcfg-eno2  ifdown       ifdown-ipv6  ifdown-routes  ifdown-tunnel    ifup-eth   ifup-plip   ifup-routes  ifup-tunnel       network-functions-ipv6</span><br><span class="line">ifcfg-eno3  ifdown-bnep  ifdown-isdn  ifdown-sit     ifup             ifup-ippp  ifup-plusb  ifup-sit     ifup-wireless</span><br><span class="line">ifcfg-eno4  ifdown-eth   ifdown-post  ifdown-Team    ifup-aliases     ifup-ipv6  ifup-post   ifup-Team    init.ipv6-global</span><br><span class="line">[root@localhost network-scripts]#</span><br><span class="line">[root@localhost network-scripts]# mv ifcfg-eno1 ifcfg-eth0</span><br><span class="line">[root@localhost network-scripts]# mv ifcfg-eno2 ifcfg-eth1</span><br><span class="line">[root@localhost network-scripts]# mv ifcfg-eno3 ifcfg-eth2</span><br><span class="line">[root@localhost network-scripts]# mv ifcfg-eno4 ifcfg-eth3</span><br></pre></td></tr></table></figure><h3 id="第四步修改网卡信息"><a href="#第四步修改网卡信息" class="headerlink" title="第四步修改网卡信息"></a>第四步修改网卡信息</h3><blockquote><p>需要修改的主要几点</p></blockquote><blockquote><p>1.NAME</p></blockquote><blockquote><p>2.DEVICE</p></blockquote><blockquote><p>3.BOOTPROTO [dhcp or static or none]none和static需要在输入ip地址</p></blockquote><blockquote><p>4.添加HWADDR 默认网卡没有mac地址，需要添加mac地址</p></blockquote><p><img src="http://static.zybuluo.com/abcdocker/nm42x21fuesf06s8kee51jwf/image_1d973tk0r17k91o41brp1ee11qjap.png" alt="image_1d973tk0r17k91o41brp1ee11qjap.png-132.5kB"></p><h3 id="第五步修改内核参数"><a href="#第五步修改内核参数" class="headerlink" title="第五步修改内核参数"></a>第五步修改内核参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# vi &#x2F;etc&#x2F;sysconfig&#x2F;grub</span><br></pre></td></tr></table></figure><p>在倒数第二行quiet前面添加<code>net.ifnames=0 biosdevname=0</code></p><p><img src="http://static.zybuluo.com/abcdocker/mtejm8isxl120hgxvqsca6v2/image_1d973vcu41cpv15241h7l3ju1p2k16.png" alt="image_1d973vcu41cpv15241h7l3ju1p2k16.png-85.7kB"></p><p>我们还可以在装系统的时候配置</p><p>光标移动到<code>Install CentOS</code>上，按tab键 输入<code>net.ifnames=0 biosdevname=0</code> 回车</p><p><img src="http://static.zybuluo.com/abcdocker/397q3x5xs56yh134pjv1xsjx/image_1d97aftiu14lmkqh6pb11b6fad1j.png" alt="image_1d97aftiu14lmkqh6pb11b6fad1j.png-21.2kB"></p><h3 id="第六步生成启动菜单"><a href="#第六步生成启动菜单" class="headerlink" title="第六步生成启动菜单"></a>第六步生成启动菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]#  grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found linux image: &#x2F;boot&#x2F;vmlinuz-3.10.0-957.el7.x86_64</span><br><span class="line">Found initrd image: &#x2F;boot&#x2F;initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">Found linux image: &#x2F;boot&#x2F;vmlinuz-0-rescue-f9f84382fb844c0a84e9ee9b2a2906b5</span><br><span class="line">Found initrd image: &#x2F;boot&#x2F;initramfs-0-rescue-f9f84382fb844c0a84e9ee9b2a2906b5.img</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="第七步验证是否修改成功"><a href="#第七步验证是否修改成功" class="headerlink" title="第七步验证是否修改成功"></a>第七步验证是否修改成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# reboot #重启生效</span><br><span class="line">centos7默认不支持ifconfig,如果需要ifconfig请yum install net-t</span><br></pre></td></tr></table></figure><p>修改完毕！</p><p><img src="http://static.zybuluo.com/abcdocker/e2smswto0wltzcwmzzbholsy/8DBD4A93-15BF-4F34-B5D8-E9908CE368E0.png" alt="8DBD4A93-15BF-4F34-B5D8-E9908CE368E0.png-568.3kB"></p><p><img src="http://static.zybuluo.com/abcdocker/go8fefa9mwh3nv2rxt89yz5l/83092637-F388-4307-9682-2F0DFF534624.png" alt="83092637-F388-4307-9682-2F0DFF534624.png-406.4kB"></p><p><img src="https://i4t.com/wp-content/uploads/2019/09/end.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 mypy 做 type check</title>
      <link href="/2020/03/06/%E4%BD%BF%E7%94%A8-mypy-%E5%81%9Atype-check/"/>
      <url>/2020/03/06/%E4%BD%BF%E7%94%A8-mypy-%E5%81%9Atype-check/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>完残！😂，最近看之前写的 Python 代码老得琢磨这比变量的类型是啥（Python 无类型系统xxx），不愧是我写的！</p><p>看段之前写的实现迭代器模式的代码：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抽象迭代器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象聚集类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterator</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span><span class="params">(Aggregate)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._books = []</span><br><span class="line">        self._last = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBookAt</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._books[index]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendBook</span><span class="params">(self, book)</span>:</span></span><br><span class="line">        self._books.append(book)</span><br><span class="line">        self._last = self._last + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLength</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._last</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterator</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> BookShelfIterator(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span><span class="params">(Iterator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, bookShelf)</span>:</span></span><br><span class="line">        self._bookShelf = bookShelf</span><br><span class="line">        self._index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._index &lt; self._bookShelf.getLength():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        book = self._bookShelf.getBookAt(self._index)</span><br><span class="line">        self._index = self._index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    bookShelf = BookShelf()</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"A"</span>))</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"B"</span>))</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"C"</span>))</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"D"</span>))</span><br><span class="line"></span><br><span class="line">    it = bookShelf.iterator()</span><br><span class="line">    <span class="keyword">while</span> it.hasNext():</span><br><span class="line">        book = it.next()</span><br><span class="line">        print(book.getName())</span><br></pre></td></tr></table></figure><p>有一丢丢难读（不通读的话，会乱猜某变量类型），回想之前在 PyCon China 2019 的大会资聊曾看到过类型检查相关的演讲主题，回顾下演讲视频。水一波，写篇文章了解下 Python 标准(<a href="https://www.python.org/dev/peps/pep-3107/" target="_blank" rel="noopener">PEP 3107</a> &amp; <a href="https://www.python.org/dev/peps/pep-0484/" target="_blank" rel="noopener">PEP 484</a> )支持的 mypy。</p><blockquote><p>类型系统：编译期的类型推导检查规则，类型系统属于一种轻量级的形式化方法（一种数学方法）</p></blockquote><h2 id="使用-mypy"><a href="#使用-mypy" class="headerlink" title="使用-mypy"></a>使用-mypy</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 mypy</span></span><br><span class="line">pip install mypy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 mypy 做类型检查</span></span><br><span class="line">mypy module_name.py</span><br></pre></td></tr></table></figure><p>以下使用方式适用于 Python 3.6 及以上的版本。<strong>值得注意</strong>：mypy 默认的推导类型不可为 None</p><h3 id="变量的类型注释"><a href="#变量的类型注释" class="headerlink" title="变量的类型注释"></a>变量的类型注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">integer: int = <span class="number">1</span></span><br><span class="line">string: str = <span class="string">"ShanSan"</span></span><br><span class="line">err_str: str = <span class="number">1</span>  <span class="comment"># error: Incompatible types in assignment</span></span><br><span class="line">child: bool = <span class="literal">True</span></span><br><span class="line"><span class="comment"># mypy 默认的推导类型不可为 None</span></span><br><span class="line">none: int - <span class="literal">None</span>  <span class="comment"># error: Invalid type comment or annotation</span></span><br><span class="line"></span><br><span class="line">print(integer, string)</span><br></pre></td></tr></table></figure><h3 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h3><p>关于更多 mypy 的类型系统内建的类型可参考：<a href="https://mypy.readthedocs.io/en/stable/builtin_types.html" target="_blank" rel="noopener">https://mypy.readthedocs.io/en/stable/builtin_types.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, Tuple, Optional, Iterable, Union</span><br><span class="line"><span class="comment"># 对于映射(Map)数据结构，需要指定 key 和 value 的类型</span></span><br><span class="line">x: Dict[str, float] = &#123;<span class="string">'field'</span>: <span class="number">2.0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tuple 需要指定所有元素的类型</span></span><br><span class="line">x: Tuple[int, str, float] = (<span class="number">3</span>, <span class="string">"yes"</span>, <span class="number">7.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># error: Incompatible types in assignment (expression has type "Tuple[int, str, float, int]", variable has type "Tuple[int, str, float]")</span></span><br><span class="line">y: Tuple[int, str, float] = (<span class="number">3</span>, <span class="string">"yes"</span>, <span class="number">7.5</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">op: Optional[str] = <span class="literal">None</span>  <span class="comment"># 可为 str 或 None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泛用可迭代对象</span></span><br><span class="line">l: Iterable = [<span class="number">1</span>]</span><br><span class="line">t: Iterable = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">d: Iterable = &#123;<span class="number">1</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可为 str 或 int</span></span><br><span class="line">str_int1: Union[str, int] = <span class="number">1</span></span><br><span class="line">str_int2: Union[str, int] = <span class="string">"ss"</span></span><br><span class="line">str_int3: Union[str, int] = <span class="literal">None</span>  <span class="comment"># error</span></span><br></pre></td></tr></table></figure><h3 id="函数注解"><a href="#函数注解" class="headerlink" title="函数注解"></a>函数注解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NoReturn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span> -&gt; NoReturn:</span>  <span class="comment"># 无返回值</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus</span><span class="params">(num1: int, num2: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带默认值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus_default</span><span class="params">(num1: int, num2: int = <span class="number">3</span>)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器的参数类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">container_param</span><span class="params">(names: List[str])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        print(name)</span><br></pre></td></tr></table></figure><h3 id="类成员注解"><a href="#类成员注解" class="headerlink" title="类成员注解"></a>类成员注解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    attr: int</span><br><span class="line">    <span class="comment"># 带默认值的实例变量</span></span><br><span class="line">    charge_percent: int = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 没有任何返回值应该注解为 None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 忽略对 self 类型的注解</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_method</span><span class="params">(self, num: int, str1: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> num * str1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持自定义类型的注解</span></span><br><span class="line">x: MyClass = MyClass()</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>OK， 差不多了，对之前的迭代器模式的代码改造一波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Iterable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象迭代器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽象聚集类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterator</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span><span class="params">(Aggregate)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._books: List[Book] = []</span><br><span class="line">        self._last: int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBookAt</span><span class="params">(self, index: int)</span> -&gt; Book:</span></span><br><span class="line">        <span class="keyword">return</span> self._books[index]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendBook</span><span class="params">(self, book: Book)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._books.append(book)</span><br><span class="line">        self._last = self._last + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLength</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self._last</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterator</span><span class="params">(self)</span> -&gt; BookShelfIterator:</span></span><br><span class="line">        <span class="keyword">return</span> BookShelfIterator(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span><span class="params">(Iterator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, bookShelf)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._bookShelf: BookShelf = bookShelf</span><br><span class="line">        self._index: int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> self._index &lt; self._bookShelf.getLength():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span> -&gt; Book:</span></span><br><span class="line">        book: Book = self._bookShelf.getBookAt(self._index)</span><br><span class="line">        self._index = self._index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self._name: str = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    bookShelf: BookShelf = BookShelf()</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"A"</span>))</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"B"</span>))</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"C"</span>))</span><br><span class="line">    bookShelf.appendBook(Book(<span class="string">"D"</span>))</span><br><span class="line"></span><br><span class="line">    it: Iterator = bookShelf.iterator()</span><br><span class="line">    <span class="keyword">while</span> it.hasNext():</span><br><span class="line">        book: Book = it.next()</span><br><span class="line">        print(book.getName())</span><br></pre></td></tr></table></figure><p>emmm, 舒服了一丢丢/(ㄒoㄒ)/~~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/python/mypy" target="_blank" rel="noopener">https://github.com/python/mypy</a></li><li><a href="https://shimo.im/docs/dpq9q6hJttwVcqHy/read" target="_blank" rel="noopener">PyCon China 2019 成都分会场-刘知杭-静态类型的 Python</a>, <a href="https://www.bilibili.com/video/av75148536?p=5" target="_blank" rel="noopener">video🔗</a></li><li><a href="https://shimo.im/docs/HRdRxCDXtKy9TPVh/read" target="_blank" rel="noopener">PyCon China 2019 北京分会场-依云-类型检查拯救粗心开发者</a>, <a href="https://www.bilibili.com/video/av75279850?p=9" target="_blank" rel="noopener">video🔗</a></li><li><a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html" target="_blank" rel="noopener">Type hints cheat sheet (Python 3)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 静态类型检查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洞悉技术的本质-Git内部原理探索</title>
      <link href="/2020/02/03/Git%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86%E6%8E%A2%E7%B4%A2/"/>
      <url>/2020/02/03/Git%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86%E6%8E%A2%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>洞悉技术的本质，可以让我们在层出不穷的框架面前仍能泰然处之。用了那么久的 Git，不懂点内部原理，那可不行！懂点原理可以让我们遇到问题的时候能够更好更快的理清解决问题的思路。</p><p>要真正读懂本文可能需要以下基础：</p><ul><li>有 Git 使用经验</li><li>对 Git 的三个分区有所了解</li><li>熟悉常用的 Linux 命令</li><li>对经典哈希算法有一定的了解，比如<a href="https://zh.wikipedia.org/zh/SHA-1" target="_blank" rel="noopener">SHA-1</a>、SHA-256、MD5等</li></ul><p>在开始之前，让我们先抛出几个问题，然后一一解决、回答它们</p><ul><li>.git版本库里的文件/目录是干什么的?</li><li>Git是如何存储文件信息的？</li><li>当我们执行git add、git commit时，Git背后做了什么？</li><li>Git分支的本质是什么?</li></ul><a id="more"></a><h1 id="Git分区"><a href="#Git分区" class="headerlink" title="Git分区"></a>Git分区</h1><p>在真正开始之前，让我们先回顾下Git的三个分区（Workspace、Index / Stage、git repository）</p><ul><li>工作区（Workspace）：此处进行代码文件的编辑</li><li>索引或称暂存区（Index / Stage）：存储文件状态信息，进行commit前会对此时的文件状态作快照（Snapshot）</li><li>Git版本库（git repository）：由Git Object持久记录每一次commit的快照和链式结构的commit变更历史</li></ul><p>先看下从《Got Git》和网络上搬来的Git分区工作原理图和待remote的工作流再次感性回顾下之前使用Git自己时怎么操作的</p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20200202210748.png" alt="工作区、版本库、暂存区工作原理图"></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20200202210624.png" alt="带Remote的工作流"></p><p>相信看了这些，会对Git有新的认知，让我们正式开始🎉！</p><h1 id="git版本库里的文件-目录是干什么的"><a href="#git版本库里的文件-目录是干什么的" class="headerlink" title=".git版本库里的文件/目录是干什么的"></a>.git版本库里的文件/目录是干什么的</h1><p>让我们通过一个从GitHub clone下来的一个实际项目的版本库来看下这些文件/目录，<a href="https://github.com/yeshan333/Explore-Git" target="_blank" rel="noopener">clone下来的repository</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yeshan333/Explore-Git</span><br><span class="line"></span><br><span class="line">$ ls -F1</span><br><span class="line">config</span><br><span class="line">description</span><br><span class="line">HEAD</span><br><span class="line">hooks/</span><br><span class="line">index</span><br><span class="line">info/</span><br><span class="line">logs/</span><br><span class="line">objects/</span><br><span class="line">packed-refs</span><br><span class="line">refs/</span><br></pre></td></tr></table></figure><p><strong>挑几个重要文件/目录的做下解释</strong></p><ul><li>HEAD文件：用于存放当前所在分支的引用，这个引用是个符号引用（symbolic reference）</li><li>index文件：二进制文件，它就是暂存区（Stage Area）。它是一个目录树，记录了文件的时间戳、文件长度、SHA-1等</li><li>refs目录：基本所有的引用（references）文件都存放在这里，引用文件中的内容为SHA-1值，一般是commit object的SHA-1值</li><li>objects目录：用于存放数据的所有 Git Object均存放在这个目录下，每个 Git Object 对应一个目录，object对应的SHA-1值的前 2 位为目录名，后 38 位为文件名</li></ul><p>抱着一些初步的认知，我们继续解决后面几个问题，加深对.git版本库内文件的理解</p><h1 id="Git是如何存储文件信息的"><a href="#Git是如何存储文件信息的" class="headerlink" title="Git是如何存储文件信息的"></a>Git是如何存储文件信息的</h1><p>要知道Git如何存储信息，我们需要了解一下常见的Git对象，Git就是通过这些对象存储文件信息的。Git Object是Git存储文件信息的最小单元，如下为几种常见的Git Object以及它们的作用，它们一般是不可变的（immutable），这些对象使用40位的SHA-1值进行标识。</p><ul><li><a href="https://en.wikipedia.org/wiki/Binary_large_object" target="_blank" rel="noopener">blob</a>：用于存储文件内容，Git保存文件的时候不会保存文件名</li><li>tree object：当前目录结构的一个快照（Snapshot），它存储了一条或多条树记录（tree entries），每条记录含有一个指向数据对象（blob）或子树对象（子树木对象可理解为子目录）的SHA-1指针以及相应的文件模式、类型、文件名，用于表示内容之间的目录层次关系</li><li>commit object：存储<strong>顶层tree object</strong>的SHA-1值、作者/提交者信息+时间戳以及提交注释，如果有父commit object，还会保存有这个commit object对应的SHA-1值。对于merge commit可能会有多个父commit object</li><li>tag object：用于标记commit object。关于<a href="https://git-scm.com/book/en/v2/Git-Internals-Git-References" target="_blank" rel="noopener">tag object</a></li></ul><p>让我们通过一个实际的版本库了解下这些对象，使用<a href="https://git-scm.com/docs/git-log#Documentation/git-log.txt---prettyltformatgt" target="_blank" rel="noopener"><code>git log</code></a>查看这个版本库详尽的历史提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=raw</span><br><span class="line">commit ee8a0dbc0c6fe89e6ff39b16c77543e8e2c6475b</span><br><span class="line">tree fb12b3e52ce18ce281bfc2b11a5e4350c2d10358</span><br><span class="line">parent 7b94dcbe89c9534913854284b4af727a9a5dfc84</span><br><span class="line">author yeshan333 &lt;1329441308@qq.com&gt; 1580629391 +0800</span><br><span class="line">committer yeshan333 &lt;1329441308@qq.com&gt; 1580629391 +0800</span><br><span class="line"></span><br><span class="line">    final commit</span><br><span class="line"></span><br><span class="line">commit 7b94dcbe89c9534913854284b4af727a9a5dfc84</span><br><span class="line">tree 8feb4afbab18e8d386413224a9e74f871c15a5ca</span><br><span class="line">author yeshan333 &lt;1329441308@qq.com&gt; 1580629170 +0800</span><br><span class="line">committer GitHub &lt;noreply@github.com&gt; 1580629170 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br></pre></td></tr></table></figure><p><strong>Git提供了一把非常好用的瑞士军刀🔪给我们剖析这些对象，它是就是<code>cat-file</code>，通过<code>-t</code>参数可以查看object的类型，通过<code>-p</code>参数我们可以查看object存储的具体内容。查看信息时，我们需要使用到object对应的SHA-1值，可不必写完，从头开始的前几位不冲突即可。</strong><a href="https://git-scm.com/docs/git-cat-file" target="_blank" rel="noopener">git cat-file</a></p><p>让我们通过它查看下SHA-1值<code>ee8a0dbc0c6fe89e6ff39b16c77543e8e2c6475b</code>对应的commit object的类型以及存放的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -t ee8a</span><br><span class="line">commit</span><br><span class="line"></span><br><span class="line">$ git cat-file -p ee8a</span><br><span class="line">tree fb12b3e52ce18ce281bfc2b11a5e4350c2d10358</span><br><span class="line">parent 7b94dcbe89c9534913854284b4af727a9a5dfc84</span><br><span class="line">author yeshan333 &lt;1329441308@qq.com&gt; 1580629391 +0800</span><br><span class="line">committer yeshan333 &lt;1329441308@qq.com&gt; 1580629391 +0800</span><br><span class="line"></span><br><span class="line">final commit</span><br></pre></td></tr></table></figure><p>让我们再查看下这个commit object（ee8a）存储的tree object（fb12）的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p fb12</span><br><span class="line">100644 blob 6116a7dd8f752dabff8730a46b46846b2d0a696b    README.md</span><br><span class="line">040000 tree 41ed97c2adb97658107069582b6a27e474b4cc64    <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">$ git cat-file -t fb12</span><br><span class="line">tree</span><br></pre></td></tr></table></figure><p>我们知道tree object存储了一条或多条树记录（tree entries），每条记录含有一个指向数据对象（blob）或子树对象（子树木对象可理解为子目录）的SHA-1指针以及相应的文件模式、类型、文件名。100644即为对应的文件模式，100644表示普通文本文件，040000表示目录文件。<a href="https://cloud.tencent.com/developer/ask/82974/answers/created" target="_blank" rel="noopener">关于文件模式的一点疑问</a></p><p>让我们再看下tree object（fb12）存储的SHA-1指针（6116）对应的blob（6116）存放的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 6116</span><br><span class="line"><span class="comment"># Explore-Git</span></span><br><span class="line">$ git cat-file -t 6116</span><br><span class="line">blob</span><br></pre></td></tr></table></figure><p>Nice，很好的对应了之前对blob、tree object、commit object的描述。关于文件的大部分信息都存放在这些object中。</p><h1 id="当我们执行git-add、git-commit时，Git背后做了什么"><a href="#当我们执行git-add、git-commit时，Git背后做了什么" class="headerlink" title="当我们执行git add、git commit时，Git背后做了什么"></a>当我们执行git add、git commit时，Git背后做了什么</h1><p>解答这个问题，我们需要通过实践去一步步感受Git背后的操作。我们创建一个简单的例子感受下，我们需要时刻关注.git/objects这个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir demo</span><br><span class="line">$ <span class="built_in">cd</span> demo</span><br><span class="line">$ git init <span class="comment"># 初始化Git仓库</span></span><br><span class="line">$ find .git/objects -<span class="built_in">type</span> f <span class="comment"># 没有文件</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"test"</span> &gt; test.txt</span><br><span class="line">$ mkdir hi</span><br><span class="line">$ <span class="built_in">cd</span> hi</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello"</span> &gt; hello.txt</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ find .git/objects -<span class="built_in">type</span> f</span><br><span class="line">$ <span class="comment"># 什么都没有</span></span><br></pre></td></tr></table></figure><p>这里我们创建先了两个文件，test.txt、hello.txt，其中hello.txt文件放到了hi目录中，然后我们查看了.git/objects目录，没有文件。接下来就是重头戏了，我们要将当前目录的文件/目录（Linux一切皆文件）添加到暂存区（stage/index）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ find .git/objects -<span class="built_in">type</span> f</span><br><span class="line">.git/objects/9d/aeafb9864cf43055ae93beb0afd6c7d144bfa4</span><br><span class="line">.git/objects/e9/65047ad7c57865823c7d992b1d046ea66edf78</span><br></pre></td></tr></table></figure><p>我们可以看到，执行了<code>git add</code>之后生成了两个文件，让我们通过<code>git cat-file</code>看看这两个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -t 9dae</span><br><span class="line">blob</span><br><span class="line">$ git cat-file -p 9dae</span><br><span class="line"><span class="built_in">test</span> <span class="comment"># test.txt文件中的内容</span></span><br><span class="line">$ git cat-file -t e965</span><br><span class="line">blob</span><br><span class="line">$ git cat-file -p e965</span><br><span class="line">Hello <span class="comment"># hi/hello.txt文件中的内容</span></span><br></pre></td></tr></table></figure><p>哦，Git为我们生成了两个object，两个blob，存放的是test.txt、hello.txt的内容，让我们commit一下看看Git又做了什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ find .git/objects -<span class="built_in">type</span> f</span><br><span class="line">.git/objects/27/1c49aa4a2c8eb1b2ef503c19378aa6810fca1e</span><br><span class="line">.git/objects/2e/8ebea76975c98806e73c0b7aea6c40c58d427c</span><br><span class="line">.git/objects/8c/3c7fbcd903744b20fd7567a1fcefa99133b5bc</span><br><span class="line">.git/objects/9d/aeafb9864cf43055ae93beb0afd6c7d144bfa4</span><br><span class="line">.git/objects/e9/65047ad7c57865823c7d992b1d046ea66edf78</span><br><span class="line">$ git cat-file -t 271c</span><br><span class="line">commit</span><br><span class="line">$ git cat-file -t 2e8e</span><br><span class="line">tree</span><br><span class="line">$ git cat-file -t 8c3c</span><br><span class="line">tree</span><br><span class="line">$</span><br><span class="line">$ git cat-file -p 271c</span><br><span class="line">tree 2e8ebea76975c98806e73c0b7aea6c40c58d427c</span><br><span class="line">author root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580651827 +0800</span><br><span class="line">committer root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580651827 +0800</span><br><span class="line"></span><br><span class="line">Hello Git</span><br><span class="line">$ git cat-file -p 8c3c</span><br><span class="line">100644 blob e965047ad7c57865823c7d992b1d046ea66edf78    hello.txt</span><br><span class="line">$ git cat-file -p 2e8e</span><br><span class="line">040000 tree 8c3c7fbcd903744b20fd7567a1fcefa99133b5bc    hi</span><br><span class="line">100644 blob 9daeafb9864cf43055ae93beb0afd6c7d144bfa4    test.txt</span><br></pre></td></tr></table></figure><p>哦，commit后Git为我们新创建了3个object，分别是根树对象tree object（2e8e）、子树对象tree object（8c3c）、commit object（271c）。现在一共有5个Git Object。这些object存放的内容符合我们在解答<strong>Git是如何存储文件信息的</strong>时对它们的表述。Git在add、commit后有条不紊的把它们组织了起来。tql👍</p><p>让我们看下此次提交的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=raw</span><br><span class="line">commit 271c49aa4a2c8eb1b2ef503c19378aa6810fca1e</span><br><span class="line">tree 2e8ebea76975c98806e73c0b7aea6c40c58d427c</span><br><span class="line">author root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580651827 +0800</span><br><span class="line">committer root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580651827 +0800</span><br><span class="line"></span><br><span class="line">    Hello Git</span><br></pre></td></tr></table></figure><p>问题来了，Git是如何组织这些object的❓令人兴奋的是Git在提供给我们这些顶层API去愉快使用的同时还提供了一些较为底层的API让我们能够更深入的了解它。接下来我们将通过部分底层的API来重现本次commit log的创建过程。主要用到的底层API如下：</p><ul><li><a href="https://git-scm.com/docs/git-hash-object#Documentation/git-hash-object.txt--w" target="_blank" rel="noopener">git hash-object</a>：生成blob</li><li><a href="https://git-scm.com/docs/git-update-index" target="_blank" rel="noopener">git update-index</a>：对暂存区进行操作</li><li><a href="https://git-scm.com/docs/git-write-tree" target="_blank" rel="noopener">git write-tree</a>：根据当前暂存区（index）状态创建一个tree object</li><li><a href="https://git-scm.com/docs/git-read-tree" target="_blank" rel="noopener">git read-tree</a>：将tree object读入暂存区</li><li><a href="https://git-scm.com/docs/git-commit-tree#_synopsis" target="_blank" rel="noopener">git commit-tree</a>：创建commit object</li></ul><p><strong>重现步骤如下：</strong></p><p>1、先初始化版本库，再为内容分别为<code>test</code>的test.txt、<code>Hello</code>的hello.txt创建两个blob，blob不存储文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">git init</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'test'</span> | git <span class="built_in">hash</span>-object -w --stdin</span><br><span class="line">9daeafb9864cf43055ae93beb0afd6c7d144bfa4</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'Hello'</span> | git <span class="built_in">hash</span>-object -w --stdin</span><br><span class="line">e965047ad7c57865823c7d992b1d046ea66edf78</span><br></pre></td></tr></table></figure><p>2、使用<code>git update-index -add</code>将blob（e965）加入暂存区，使用<code>--cacheinfo</code>参数指定文件模式、SHA-1值、文件名（hello.txt）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  git update-index --add --cacheinfo 100644 e965047ad7c57865823c7d992b1d046ea66edf78 hello.txt</span><br></pre></td></tr></table></figure><p>3、使用<code>git write-tree</code>将当前暂存区状态写入一个tree object（8c3c）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git write-tree</span><br><span class="line">8c3c7fbcd903744b20fd7567a1fcefa99133b5bc</span><br></pre></td></tr></table></figure><p>4、将hello.txt移出暂存区，将blob（9dae）加入暂存区（即将test.txt加入暂存区）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git update-index --remove hello.txt</span><br><span class="line">$ git update-index --add --cacheinfo 100644 9daeafb9864cf43055ae93beb0afd6c7d144bfa4 test.txt</span><br></pre></td></tr></table></figure><p>5、使用<code>git read-tree</code>将已有tree object作为<strong>子树对象</strong>加入暂存区，通过<code>--prefix</code>设置名称为hi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">read</span>-tree --prefix=hi 8c3c7fbcd903744b20fd7567a1fcefa99133b5bc</span><br></pre></td></tr></table></figure><p>6、记录下当前暂存区状态到tree object</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git write-tree</span><br><span class="line">2e8ebea76975c98806e73c0b7aea6c40c58d427c</span><br></pre></td></tr></table></figure><p>7、使用<code>git commit-tree</code>根据tree object的SHA-1值创建commit object</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'Hello Git'</span> | git commit-tree 2e8e</span><br><span class="line">2616a5b40ead79df23736f61b346080423f438fe</span><br></pre></td></tr></table></figure><p>8、查看commit log，没多大毛病，收工🎉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=raw 2616</span><br><span class="line">commit 2616a5b40ead79df23736f61b346080423f438fe</span><br><span class="line">tree 2e8ebea76975c98806e73c0b7aea6c40c58d427c</span><br><span class="line">author root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580660050 +0800</span><br><span class="line">committer root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580660050 +0800</span><br><span class="line"></span><br><span class="line">    Hello Git</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 2616</span><br><span class="line">tree 2e8ebea76975c98806e73c0b7aea6c40c58d427c</span><br><span class="line">author root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580660050 +0800</span><br><span class="line">committer root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt; 1580660050 +0800</span><br><span class="line"></span><br><span class="line">Hello Git</span><br></pre></td></tr></table></figure><p>相信到了这里，已经对Git在我们<code>git add</code>、<code>git commit</code>时做了什么有了一定的了解。如果想了解Git Object对应的SHA-1值如何生成和如何复现并串联多个commit object形成一个提交历史链，可查看《Pro Git》的第十章第二小节或参看后面的参考资料。</p><h1 id="Git分支的本质是什么"><a href="#Git分支的本质是什么" class="headerlink" title="Git分支的本质是什么"></a>Git分支的本质是什么</h1><p><strong>Git分支的本质是指向某一系列提交之首的指针或引用。</strong>Git使用引用的一个好处就是我们不需要花心思去记那些Git Object长长的SHA-1值。引用是存放SHA-1值的文件，它们位于<code>.git/refs</code>目录中。Git提供了一个API让我们更新引用-<code>update-ref</code>，示例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git update-ref refs/heads/master 2616 <span class="comment"># 2616为之前浮现commit log创建的commit object的SHA-1值</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 2616a5b40ead79df23736f61b346080423f438fe (HEAD -&gt; master)</span><br><span class="line">Author: root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt;</span><br><span class="line">Date:   Mon Feb 3 00:14:10 2020 +0800</span><br><span class="line"></span><br><span class="line">    Hello Git</span><br><span class="line">$ git <span class="built_in">log</span> master</span><br><span class="line">commit 2616a5b40ead79df23736f61b346080423f438fe (HEAD -&gt; master)</span><br><span class="line">Author: root &lt;root@DESKTOP-CQ9JEC7.localdomain&gt;</span><br><span class="line">Date:   Mon Feb 3 00:14:10 2020 +0800</span><br><span class="line"></span><br><span class="line">    Hello Git</span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">2616a5b40ead79df23736f61b346080423f438fe</span><br></pre></td></tr></table></figure><h2 id="HEAD引用"><a href="#HEAD引用" class="headerlink" title="HEAD引用"></a>HEAD引用</h2><p>在介绍HEAD文件的时候我们说过它存放的是当前所在分支的引用，而且这个引用是个<strong>符号引用</strong>（symbolic reference）。那么什么是符号引用？<strong>它是一个指向其它引用的指针</strong>。我们可以查看之前clone下来的<a href="https://github.com/yeshan333/Explore-Git" target="_blank" rel="noopener">Explore-Git</a>的HEAD文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>当我们checkout到某个分支时，HEAD文件内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch yeshan</span><br><span class="line">$ git checkout yeshan</span><br><span class="line">Switched to branch <span class="string">'yeshan'</span></span><br><span class="line"></span><br><span class="line">$ cat .git/HEAD</span><br><span class="line">ref: refs/heads/yeshan</span><br></pre></td></tr></table></figure><p>至此，抛出的问题已解答完毕。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://developer.aliyun.com/article/720615?spm=a2c6h.12873639.0.0.176712eeP7J5d0&tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">Go Git：面向未来的代码平台</a>，了解版本控制系统的发展和Git现存的问题，版本控制系统未来的走向</p></li><li><p><a href="https://github.com/gotgit/gotgit" target="_blank" rel="noopener">《Git权威指南》</a> - <a href="http://www.worldhello.net/gotgit/02-git-solo/030-head-master-commit-refs.html" target="_blank" rel="noopener">Git对象探秘</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/UQKrAR3zsdTRz8nFiLk2uQ" target="_blank" rel="noopener">这才是真正的Git——Git内部原理揭秘！</a></p></li><li><p><a href="https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Basic-Snapshotting" target="_blank" rel="noopener">《Pro Git》- Basic Snapshotting</a></p></li><li><p><a href="http://gitbook.liuhui998.com/1_2.html" target="_blank" rel="noopener">Git对象模型</a></p></li><li><p><a href="https://github.com/tank0317/git-learning/issues/5" target="_blank" rel="noopener">你知道 Git 是如何做版本控制的吗</a></p></li><li><p><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html#rebase" target="_blank" rel="noopener">图解Git</a></p></li><li><p><a href="https://developer.github.com/v3/git/blobs/" target="_blank" rel="noopener">GitHub Developer REST API Git Blobs</a></p></li><li><p><a href="https://cloud.tencent.com/developer/ask/82974/answers/created" target="_blank" rel="noopener">如何读取git-ls-tree输出的模式字段</a></p></li><li><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用Git命令清单</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结</title>
      <link href="/2019/12/31/2019%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
      <url>/2019/12/31/2019%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.vim-cn.com/d9/3a50eba326ba56d498de021a40b120dcfdd255.png" alt="banner"></p><a id="more"></a><h2 id="前言扯🥚"><a href="#前言扯🥚" class="headerlink" title="前言扯🥚"></a>前言扯🥚</h2><p>终于考完试了（昨天下午终结了最后一科-“万恶”的复变函数🎈🎉），可以摩擦下年终总结了，花点时间想下2019年我干了什么🎁。<del>完了写不下去了（此时中午12点59分30秒。</del></p><h2 id="忆往昔-xxx-2019"><a href="#忆往昔-xxx-2019" class="headerlink" title="忆往昔-xxx~2019"></a>忆往昔-xxx~2019</h2><p>这一年过得无比的充实，个人感觉高中的时候都没对自己这么狠过，我怕是上了个假的大学（忽然想起高三临近高考那段时间，别人在复习，而我却趴在桌面上在睡觉&lt;被“农药”毒害，趴了整个高三，挺对不起老师的，惭愧😥）。</p><p><strong>以下开始略微总结下今年的操作、收获与遗憾。</strong></p><h3 id="阅读方面"><a href="#阅读方面" class="headerlink" title="阅读方面"></a>阅读方面</h3><p>这一年看了很多的书，有技术方面的也有非技术方面的都有，我佛了，大三上一整个学期就没打过游戏，我都佩服我自己，ε=ε=ε=┏(゜ロ゜;)┛，略微罗列下：</p><ul><li>没看完的，看了大部分，但是没再继续看<ul><li>《Python密码学编程》</li><li>《Python从入门到实践》</li><li>《C++ Primer Plus》</li><li>《Python基础教程（第3版）》</li><li>《算法图解》</li><li>《啊哈！算法》</li><li>《HTTP权威指南》</li><li>《Flask Web开发：基于Python的Web应用开发实战》</li><li>《Flask 入门教程》</li><li>《Docker Deep Dive》</li><li>《Linux 就该这么学》</li><li>《How To Think Like A Computer Scientist》</li></ul></li><li>可以说是看完了的<ul><li>《Web全栈工程师的自我修养》</li><li>《Don’t Make Me Think》</li><li>《Growth: 全栈增长工程师指南》</li><li>《我的职业是前端工程师》</li><li>《RePractise》</li></ul></li><li>……</li></ul><p>上图，emmm…我正在看的，希望开学前能看完大部分，又能“吹水”了，都是💪力量啊！</p><p><img src="https://img.vim-cn.com/b9/96f74118397ece2626f6624e78999cce196d33.png" alt="书单"></p><p><del>小声bb，我入手了套《周易》</del>，看了那么多还是菜（太卑微了，总有那么种好高骛远的感觉！！！<del>斑驳</del></p><h3 id="技术实践与交流"><a href="#技术实践与交流" class="headerlink" title="技术实践与交流"></a>技术实践与交流</h3><p>这一年，我喜欢上了开源社区，我的第一个<a href="https://github.com/greyli/helloflask/issues/164" target="_blank" rel="noopener">issue</a>。很幸运能够偷偷的在图灵读者群QQ当个混子，知道了<a href="https://github.com/Zheaoli" target="_blank" rel="noopener">Manjusaka</a>（璈叔<del>，一直在听大佬出<a href="https://zhuanlan.zhihu.com/p/63557057" target="_blank" rel="noopener">《捕蛇者说》</a>播客，收获满满），通过大佬又知道了<a href="http://cn.pycon.org/" target="_blank" rel="noopener">PyCon China</a>。今年Python30周年，<a href="https://github.com/PyConChina" target="_blank" rel="noopener">PyCon China 2019</a>大佬云集，太香了，路费太贵没能去成，没能线下见诸位大佬（太苦bi了</del>/(ㄒoㄒ)/~~，还好有PPT和视频放出来，现在仍在反复的看一些感兴趣的Topic的Slide和视频，又get✅到了学习的新姿势。</p><p>这一年我做的都是一些小玩意，太卑微了，不敢列出来。不得不说GitHub真香，一些开源项目拿来即可用，可以快速集成到自己弄得东西上（此处吐槽😒文档写的不好或者连文档都没有的，看的太难受了）。虽然整的都是一些花里胡哨的小东西，至少我看到了自己在成长，不亏，此处上我的GitHub小绿点：</p><p><img src="https://img.vim-cn.com/4b/203608268ca031e7bb73c3ac82a3820255ee35.png" alt=""></p><p>再看下大佬的，我透，我就是didi，我整的还贼水。</p><p><img src="https://img.vim-cn.com/27/02088de73d4945fe23127816fe4fe7bb19d444.png" alt="大佬的GitHub"></p><p>GitHub还有一点特别香，通过follow各领域的大佬，我能了解到一些“骚”技术（emmm。。。，有些东西我还用上了，不愧是终极程序员社交网站。此处艾特一位友链小伙伴<a href="https://www.itrhx.com/" target="_blank" rel="noopener">TRHX🔗</a>，嘿嘿嘿，你star的大部分项目我都拿来耍过几下。</p><blockquote><p>emmm，很幸运的认识了友链里诸位大佬，无聊的时候经常去lu你们的文章，收获还是蛮多的。</p></blockquote><p><img src="https://img.vim-cn.com/87/5971c1bc68655ae307882d3aedb784acf45c5e.png" alt="感谢"></p><h2 id="缺憾与期待"><a href="#缺憾与期待" class="headerlink" title="缺憾与期待"></a>缺憾与期待</h2><h3 id="这一年有点难"><a href="#这一年有点难" class="headerlink" title="这一年有点难"></a>这一年有点难</h3><ul><li><p>自学太痛苦了（线下找不到倾诉的伙伴，院里找不到“真正”有共同兴趣、爱好、热情的伙伴，大部分人只是说说而已，行动上的弱者），真希望有个dalao带带我（枯了</p></li><li><p>我吐，一年多没跳舞了，我居然抛弃了我曾经热爱的<a href="https://baike.baidu.com/item/Breaking/216670?fr=aladdin" target="_blank" rel="noopener">Breaking</a>，虽然仍在看一些街舞文化相关的节目和比赛-&gt;<a href="https://baike.baidu.com/item/%E8%BF%99%EF%BC%81%E5%B0%B1%E6%98%AF%E8%A1%97%E8%88%9E/22293892?fromtitle=%E8%BF%99%E5%B0%B1%E6%98%AF%E8%A1%97%E8%88%9E&fromid=22473357&fr=aladdin" target="_blank" rel="noopener">《这！就是街舞》</a>、<a href="https://www.redbull.com/int-en/event-series/bc-one" target="_blank" rel="noopener">《Red Bull BC One》</a>，但我已经不再是个纯粹的B-Boy了</p></li><li><p>感觉自己没能真正的融入开源社区，并未参与多人优质开源项目的开发</p></li><li><p>撸了一下董老师的<a href="https://annual2019.pycourses.com/#0" target="_blank" rel="noopener">《爱澎湃2019年度Python榜单》</a>，发现我知道的东西还是太少，看来我对Python的热爱没有那么纯粹，信息的来源不太行</p></li><li><p>看了下<a href="https://githubreport.mdnice.com/?username=yeshan333" target="_blank" rel="noopener">我的GitHub年度报告</a>，看来得好好养生了</p></li></ul><p><img src="https://img.vim-cn.com/5e/dcd4262b56fd261731276c77124cde6e843e82.jpg" alt=""></p><h3 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h3><ul><li>新的一年，我又立下了一丢丢flag🚩，不知道下学期结束前能不能操作完(☆▽☆)</li></ul><p><img src="https://img.vim-cn.com/8b/017ad48a5f5b33dc9dfe164a97280c52fcb20c.png" alt="To-DO lists"></p><ul><li><p>稳住，别浪，Hello World -&gt; Cloud Native, Meta Year</p></li><li><p>期待下一年能撸一个优秀的技术开源项目或者去为优秀的开源项目贡献代码</p></li><li><p>期待自己所待的科协在未来有真正强有力的积累，能发挥出“马太效应”</p></li><li><p>我似乎还没真正想明白我想要什么，不给力啊！</p></li><li><p>新一年对自己的要求：不只是要做思想上的强者，更要做行动上的强者；多思考、多折腾、多更新。很喜欢的一句话：<strong>I hear and I forget. I see and I remember. I do and I understand.</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理与正向代理</title>
      <link href="/2019/12/25/Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2019/12/25/Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-反向代理与正向代理"><a href="#Nginx-反向代理与正向代理" class="headerlink" title="Nginx 反向代理与正向代理"></a>Nginx 反向代理与正向代理</h1><p>代理分为正向代理和反向代理,本次就来演示一下Nginx配置正向代理和反向代理的场景。 顺便讲解一下正向代理和反向代理的区别正向代理和反向代理的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nginx</span><br></pre></td></tr></table></figure><hr><p><strong>首先，我们需要知道什么是反向代理和正向代理区别</strong></p><h3 id="一、正向代理"><a href="#一、正向代理" class="headerlink" title="一、正向代理"></a>一、正向代理</h3><p><img src="http://static.zybuluo.com/abcdocker/ztwey8ruapp2ykog030x2tw7/image_1dc4a1othlvj1668rh21i53b649.png" alt="image_1dc4a1othlvj1668rh21i53b649.png-103.3kB"></p><blockquote><p>正向代理简单的来说就是我们的代理服务器代替用户去请求后端节点</p></blockquote><blockquote><p>nginx正向代理代替工具还有goproxy</p></blockquote><p><strong>为什么要使用正向代理</strong></p><ul><li><strong>用户无法直接访问服务器B</strong> （常见例子就是我们使用的<a href="https://i4t.com/category/shadowsocks" target="_blank" rel="noopener">Shadowsocks</a>）</li></ul><p><img src="http://static.zybuluo.com/abcdocker/5i3utwbs1bxvkqizf7jdptp1/image_1dc4e8hpa1hkod3fnm361n12tkm.png" alt="image_1dc4e8hpa1hkod3fnm361n12tkm.png-99.6kB"></p><ul><li><strong>Cache缓存作用</strong></li></ul><p>cache缓存技术和代理服务技术是紧密联系的（不只是正向代理使用cache缓存，反向代理同时也使用缓存）简单的来说就是用户A访问了<code>代理服务器</code>，那么代理服务器会将用户A的数据保存一段时间，如果该时间段呢用户B同时也访问了<code>代理服务器</code>，那么代理服务器将不会直接请求服务器B，而是直接将缓存直接返回给用户A</p><ul><li><strong>拦截访问</strong></li></ul><p><img src="http://static.zybuluo.com/abcdocker/arq8pe15o6o2i589t8pqfuof/image_1dc4f02k58jntf9qcplhe1e6g1g.png" alt="image_1dc4f02k58jntf9qcplhe1e6g1g.png-54.7kB"></p><p>假设用户A和用户B都设置了代理服务器，用户A允许访问互联网，而用户B不允许防火互联网（这个代理服务器Z上做限制）这样用户A因为授权，可以通过代理服务器访问到服务器C，而用户B因为没有被代理服务器授权时，数据包会直接丢弃</p><ul><li><strong>隐藏访问者</strong></li></ul><p><img src="http://static.zybuluo.com/abcdocker/ydr1ji2uwnwtiqhu3d3mx7cn/image_1dc4f9h94v6lmr614kpcqhmp32a.png" alt="image_1dc4f9h94v6lmr614kpcqhmp32a.png-35.7kB"></p><p>我们可以看出服务器C并不知道访问自己的实际是用户A，因为代理服务器Z代替用户A去直接与服务器C进行交互，如果代理服务器Z完全被用户A控制（或不完全控制）会惯以<code>肉鸡</code>术语称呼</p><ul><li><strong>正向代理总结</strong></li></ul><p>正向代理是一个位于客户端和原始服务器(origin server)之前的服务器，为了从原始服务器获取内容，客户端向代理发送一个请求并指定目标，然后代理服务器向原始服务器转交请求并将获得的内容返回给客户端。客户端必须设置正向代理服务器。（类似于我们的<a href="https://i4t.com/category/shadowsocks" target="_blank" rel="noopener">ss服务</a>）</p><h3 id="二、反向代理"><a href="#二、反向代理" class="headerlink" title="二、反向代理"></a>二、反向代理</h3><p>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理发送普通请求，接着反向代理将判断向何处(后端节点)转交请求，并将获得的内容返回给客户端</p><blockquote><p>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器，并将本来要直接发送到Web服务器上的http请求发送到代理服务器中，当一个代理服务器能够代理外部网络上的主机，访问内部网络时，这种代理服务的方式成为反向代理服务</p></blockquote><p><img src="http://static.zybuluo.com/abcdocker/dvkjbg2nqgwrqqpturqvh1ht/image_1dc4ggusp1acf1vnr19nd1jfr161j2n.png" alt="image_1dc4ggusp1acf1vnr19nd1jfr161j2n.png-86.3kB"></p><ul><li>透明代理</li></ul><p>透明代理的意思是客户端根本不需要指定有代理服务器的存在，改变你的<code>request fields</code>(报文)，并会传送真实IP，注意加密的透明代理则属于匿名代理，意思是不用设置代理了。透明代理实践的例子就是很多公司所使用的行为管理软件</p><p><img src="http://static.zybuluo.com/abcdocker/x8ipxuog91w448rf0xqgfb59/image_1dc4h8g9ppsnavbfbp1kk01iim34.png" alt="image_1dc4h8g9ppsnavbfbp1kk01iim34.png-72.5kB"></p><p>当用户A和用户B并不知道行为管理设备充当透明代理行为，用户A或者用户B向服务器A或者服务器B提交请求的时候，透明代理设备根据自身策略拦截并修改用户A或B的报文，并作为实际的请求方，向服务器A或者B发送请求，当接受信息回传，透明代理再根据自身的设置把允许的保存发回至用户A或B，<strong>如果透明代理设置不允许访问服务器B，那么用户A或者用户B就不会得到服务器B的数据</strong></p><h2 id="三、正向代理配置测试"><a href="#三、正向代理配置测试" class="headerlink" title="三、正向代理配置测试"></a>三、正向代理配置测试</h2><p><strong>我们使用nginx代理上网为例子进行演示nginx正向代理</strong></p><p>下载并安装nginx (正向代理不需要单独的模块)</p><p><img src="http://static.zybuluo.com/abcdocker/k7mcvff4rso5ib367xfmr6dn/123.png" alt="123.png-159.3kB"></p><p><strong>我们使用2台服务器都进行如下操作</strong></p><p>10.4.82.140 tomcat.i4t.com 为后端应用服务(域名为tomcat.i4t.com)</p><p>10.4.82.142 nginx.i4t.com 为代理服务器(域名为nginx.i4t.com)</p><blockquote><p><strong>请仔细阅读本段</strong> 首先我们代理服务器几乎不进行任何配置，只是一个普通的nginx代理，所有修改nginx的配置都是在代理服务器上添加</p></blockquote><p>两台nginx默认配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.nginx版本没有太大要求</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.10.3.tar.gz</span><br><span class="line"></span><br><span class="line">#按照依赖包</span><br><span class="line">yum install -y gcc glibc gcc-c++ prce-devel openssl-devel pcre-devel</span><br><span class="line">useradd -s &#x2F;sbin&#x2F;nologin nginx -M </span><br><span class="line">tar xf nginx-1.10.3.tar.gz &amp;&amp; cd nginx-1.10.3</span><br><span class="line"></span><br><span class="line">#编译</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx-1.10.3 --user&#x3D;nginx --group&#x3D;nginx --with-http_ssl_module --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line">检查</span><br><span class="line">&#x2F;usr&#x2F;loca&#x2F;nginx&#x2F;sbin&#x2F;nginx -t</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line"></span><br><span class="line">查看服务器是否启动</span><br><span class="line">netstat -lntp|grep nginx</span><br><span class="line">    tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      7058&#x2F;nginx: master</span><br></pre></td></tr></table></figure><p>接下来是配置nginx代理</p><p><strong>首先我们先配置2台nginx服务器</strong></p><p>1.先配置<code>nginx.i4t.com</code> nginx信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#配置10.4.82.142 后端服务器</span><br><span class="line">cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  nginx.i4t.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;nginx.i4t.com&quot; &gt;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><p>此时nginx.i4t.com域名访问如下</p><p><img src="http://static.zybuluo.com/abcdocker/f5m5ptxz4c9m0mkt3ypa48md/image_1dc6fqsem48edhv13e3ill19k1s.png" alt="image_1dc6fqsem48edhv13e3ill19k1s.png-26.3kB"></p><p><strong>接下来配置后端服务器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代理服务器默认配置</span><br><span class="line">10.4.82.140</span><br></pre></td></tr></table></figure><p>以下是后端服务器默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  tomcat.i4t.com;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> echo &quot; tomcat.i4t.com&quot; &gt;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line"> &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx  -s reload</span><br></pre></td></tr></table></figure><p>tomcat.i4t.com后端服务器的访问内容如下</p><p><img src="http://static.zybuluo.com/abcdocker/fnpyhyzmrexcehbsyn50ja1p/12333.png" alt="12333.png-64.7kB"></p><p>接下来我们将<code>tomcat.i4t.com 也就是10.4.82.140</code>进行配置权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#只允许10.4.82.142访问</span><br><span class="line">cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  tomcat.i4t.com;</span><br><span class="line"></span><br><span class="line">        resolver 8.8.8.8;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">        proxy_pass $scheme:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">        if ( $remote_addr !~* &quot;10.4.82.142&quot;) &#123;</span><br><span class="line">            return 403;</span><br><span class="line">        &#125;</span><br><span class="line">        root   &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#proxy_pass $scheme:&#x2F;&#x2F;$host（请求的域名）$request_uri; 域名后面参数</span><br><span class="line">#resolver DNS地址，可以不写</span><br></pre></td></tr></table></figure><p>我们可以看到我们现在电脑已经无法访问tomcat.i4t.com，需要注意的是，我们只是修改了tomcat.i4t.com的代理，nginx.i4t.com依旧可以正常访问的</p><p><img src="http://static.zybuluo.com/abcdocker/pscsrg674ms1pr355tl5alvy/image_1dc6g35vq1v2a94i1q141pvk1q923l.png" alt="image_1dc6g35vq1v2a94i1q141pvk1q923l.png-39kB"></p><p>现在我们进行代理配置</p><ul><li>windows配置如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IE--&gt;Internet选项--&gt;连接--&gt;局域网设置--&gt;代理服务器</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/abcdocker/93z8mmryw5upkgiwvctdgrf0/image_1dc6h8d211sg518nj1vrc1etapah42.png" alt="image_1dc6h8d211sg518nj1vrc1etapah42.png-246.7kB"></p><ul><li>mac设置如下</li></ul><p><img src="http://static.zybuluo.com/abcdocker/dbnux7j8m6hkscmkzh9crhkc/image_1dc6haibh11471s8jcod1fv9eh94f.png" alt="image_1dc6haibh11471s8jcod1fv9eh94f.png-99.4kB"></p><p><img src="http://static.zybuluo.com/abcdocker/6yqgx71ay61fw0mwld231zfh/image_1dc6hbavagmtog91a231ee12t64s.png" alt="image_1dc6hbavagmtog91a231ee12t64s.png-91.3kB"></p><ul><li>Linux</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;10.4.82.142:80</span><br><span class="line">wget http:&#x2F;&#x2F;tomcat.i4t.com</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/abcdocker/su4ykm4xjt6r40slu6ui76b6/3333.png" alt="3333.png-351.1kB"></p><p><strong>这时候我们访问tomcat.i4t.com就是200，状态</strong></p><p><img src="http://static.zybuluo.com/abcdocker/k5tpjx98l0auad3da9g8bvga/image_1dc6hdijka551kb51q821p3m1t9r59.png" alt="image_1dc6hdijka551kb51q821p3m1t9r59.png-30.7kB"></p><h2 id="四、反向代理配置测试"><a href="#四、反向代理配置测试" class="headerlink" title="四、反向代理配置测试"></a>四、反向代理配置测试</h2><p>安装和上面编译安装一样，没有特殊模块。只需要修改配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">user  www;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">    access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  nginx.i4t.com;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">           proxy_pass http:&#x2F;&#x2F;abcdocker;</span><br><span class="line">           proxy_set_header   Host             $host;</span><br><span class="line">           proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">           proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    upstream abcdocker &#123;</span><br><span class="line">       server 10.4.82.140:8080;</span><br><span class="line">       server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#proxy_pass 代理节点，可以用ip+端口</span><br><span class="line">#upstream 后面写名称</span><br><span class="line">#server 后端节点名称</span><br></pre></td></tr></table></figure><p>访问验证，我们访问nginx.i4t.com域名打开的是tomcat后端节点</p><p><img src="http://static.zybuluo.com/abcdocker/y1nhqvcp1zf532g7w5josuqx/333.png" alt="333.png-334.7kB"></p><blockquote><p><strong>请注意缓存（google浏览器缓存不是很好清理）</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>❤Thanksgiving❤</title>
      <link href="/2019/11/28/heart/"/>
      <url>/2019/11/28/heart/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img.vim-cn.com/5c/2ba4e2431c8f59fa8fdcf10f0348f6ff7f0d5b.png" alt="感恩节"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Serialization and Deserialization</title>
      <link href="/2019/11/25/Serialization-and-Deserialization/"/>
      <url>/2019/11/25/Serialization-and-Deserialization/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><blockquote><p>Serialization：Data Structure/Object –&gt; Binary String<br>Deserialization：Binary String –&gt; Data Structure/Object<br>Goals：Cross-platform Communication、Persistent Storage and More</p></blockquote><h1 id="Python中对象的序列化与反序列化"><a href="#Python中对象的序列化与反序列化" class="headerlink" title="Python中对象的序列化与反序列化"></a>Python中对象的序列化与反序列化</h1><h2 id="pickle-module"><a href="#pickle-module" class="headerlink" title="pickle module"></a>pickle module</h2><blockquote><p>pickle 仅可用于 Python，pickle所使用的数据流格式仅可用于 Python<br>pickle 模块可以将复杂对象转换为字节流，也可以将字节流转换为具有相同内部结构的对象。<br>可被pickling和unpickling的对象：<a href="https://docs.python.org/zh-cn/3/library/pickle.html#what-can-be-pickled-and-unpickled" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/pickle.html#what-can-be-pickled-and-unpickled</a></p></blockquote><p>pickle提供了优秀的方法方便我们对对象进行pickling（封存）和unpickling（解封）</p><a id="more"></a><h3 id="使用dumps和loads方法进行序列化和反序列化"><a href="#使用dumps和loads方法进行序列化和反序列化" class="headerlink" title="使用dumps和loads方法进行序列化和反序列化"></a>使用dumps和loads方法进行序列化和反序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = dict(name=<span class="string">'shan'</span>, age=<span class="number">20</span>, sex=<span class="string">"man"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps(person)  <span class="comment"># dumps方法会将obj序列化为bytes返回</span></span><br><span class="line"><span class="string">b'\x80\x03&#125;q\x00(X\x04\x00\x00\x00nameq\x01X\x04\x00\x00\x00shanq\x02X\x03\x00\x00\x00ageq\x03K\x14X\x03\x00\x00\x00sexq\x04X\x03\x00\x00\x00manq\x05u.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; with open("dump.txt","wb") as f:</span></span><br><span class="line"><span class="string">...     pickle.dump(person, f)</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; f = open("dump.txt","rb")</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; d = pickle.load(f)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; f.close()</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; d</span></span><br><span class="line"><span class="string">&#123;'</span>name<span class="string">': '</span>shan<span class="string">', '</span>age<span class="string">': 20, '</span>sex<span class="string">': '</span>man<span class="string">'&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; pickle.loads(pickle.dumps(d))</span></span><br><span class="line"><span class="string">&#123;'</span>name<span class="string">': '</span>shan<span class="string">', '</span>age<span class="string">': 20, '</span>sex<span class="string">': '</span>man<span class="string">'&#125;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.python.org/zh-cn/3/library/pickle.html#pickle.dump" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/pickle.html#pickle.dump</a></li><li>bytes对象是由单个字节组成的不可变序列</li><li>使用<code>dump</code>方法可将序列化的对象写入file obj</li><li>load用于还原封存生成的bytes_object，loads方法用于还原从文件中读取的封存对象</li></ul><h2 id="json-module"><a href="#json-module" class="headerlink" title="json module"></a>json module</h2><blockquote><p>相比于pickle，json只能表示内置类型的子集，不能表示自定义的类<br>json格式的文件的易读性更好<br>Python json模块提供的API与pickle模块很相似</p></blockquote><h3 id="使用dumps和loads进行序列化和反序列化"><a href="#使用dumps和loads进行序列化和反序列化" class="headerlink" title="使用dumps和loads进行序列化和反序列化"></a>使用dumps和loads进行序列化和反序列化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = dict(name=<span class="string">'shan'</span>, age=<span class="number">20</span>, sex=<span class="string">"man"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(person)</span><br><span class="line"><span class="string">'&#123;"name": "shan", "age": 20, "sex": "man"&#125;'</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = json.dumps(person)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json_str)</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'shan'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'sex'</span>: <span class="string">'man'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>dumps方法会将obj转换为标准格式的JSON str并返回</li><li>loads方法可将包含JSON文档的str、bytes或者bytearray反序列化为Python对象</li></ul><h3 id="自定义对象的序列化与反序列化"><a href="#自定义对象的序列化与反序列化" class="headerlink" title="自定义对象的序列化与反序列化"></a>自定义对象的序列化与反序列化</h3><blockquote><p>对于自定义对象的序列化和反序列化操作需要我们实现专门的encoder和decoder<br>需要用到dumps方法的default参数和loads方法的object_hook参数<br><a href="https://docs.python.org/3/library/json.html#json.loads" target="_blank" rel="noopener">https://docs.python.org/3/library/json.html#json.loads</a><br><a href="https://docs.python.org/3/library/json.html#json.loads" target="_blank" rel="noopener">https://docs.python.org/3/library/json.html#json.loads</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, score)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.age = age</span><br><span class="line"><span class="meta">... </span>        self.score = score</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">student2dict</span><span class="params">(std)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> &#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">'name'</span>: std.name,</span><br><span class="line"><span class="meta">... </span>        <span class="string">'age'</span>: std.age,</span><br><span class="line"><span class="meta">... </span>        <span class="string">'score'</span>: std.score</span><br><span class="line"><span class="meta">... </span>    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">dict2student</span><span class="params">(d)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> Student(d[<span class="string">'name'</span>], d[<span class="string">'age'</span>], d[<span class="string">'score'</span>])</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'Bob'</span>, <span class="number">20</span>, <span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(s, default=student2dict))</span><br><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>, <span class="string">"age"</span>: <span class="number">20</span>, <span class="string">"score"</span>: <span class="number">88</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = json.dumps(s, default=student2dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.loads(json_str, object_hook=dict2student))</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x000001B101675198</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json_str, object_hook=dict2student)</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x000001B101675128</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>old = json.loads(json_str, object_hook=dict2student)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>old.name</span><br><span class="line"><span class="string">'Bob'</span></span><br></pre></td></tr></table></figure><h2 id="third-party-module：marshmallow"><a href="#third-party-module：marshmallow" class="headerlink" title="third-party module：marshmallow"></a>third-party module：marshmallow</h2><blockquote><p>marshmallow is an ORM/ODM/framework-agnostic library for converting complex datatypes, such as objects, to and from native Python datatypes.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> marshmallow</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@dataclass</span><br><span class="line"><span class="meta">... </span><span class="class"><span class="keyword">class</span> <span class="title">Album</span>:</span></span><br><span class="line"><span class="meta">... </span>    title: str</span><br><span class="line"><span class="meta">... </span>    release_date: dt.date</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AlbumSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line"><span class="meta">... </span>    title = fields.Str()</span><br><span class="line"><span class="meta">... </span>    release_date = fields.Date()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>album = Album(<span class="string">"Seven Innovation Base"</span>, dt.date(<span class="number">2019</span>, <span class="number">11</span>, <span class="number">23</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>schema = AlbumSchema()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = schema.dump(album)  <span class="comment"># obj -&gt; dict</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'Seven Innovation Base'</span>, <span class="string">'release_date'</span>: <span class="string">'2019-11-23'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data_str = schema.dumps(album)  <span class="comment"># obj -&gt; str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data_str</span><br><span class="line"><span class="string">'&#123;"title": "Seven Innovation Base", "release_date": "2019-11-23"&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>使用 marshmallow 可以很方便的对自定义对象进行序列化和反序列化</li><li>对object进行在序列化之前，需要为object创建一个schema,schema中的字段名必须与自定义的object中的成员一致</li><li>dumps method：obj -&gt; str, dump method：obj -&gt; dict</li><li>反序列化的 dict -&gt; obj 需要使用decorator：<code>post_load</code>自己实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, email)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User(name=&#123;self.name!r&#125;)&gt;"</span>.format(self=self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSchema</span><span class="params">(Schema)</span>:</span></span><br><span class="line">    name = fields.Str()</span><br><span class="line">    email = fields.Email()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_user</span><span class="params">(self, data, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> User(**data)</span><br><span class="line"></span><br><span class="line">user_data = &#123;</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"ken@yahoo.com"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Ken"</span>,</span><br><span class="line">&#125;</span><br><span class="line">schema = UserSchema()</span><br><span class="line">result = schema.load(user_data)</span><br><span class="line">print(result)  <span class="comment"># 输出结果：&lt;User(name='Ken')&gt;</span></span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://www.infoq.cn/article/serialization-and-deserialization" target="_blank" rel="noopener">序列化与反序列化</a></li><li><a href="https://docs.python.org/zh-cn/3/library/pickle.html" target="_blank" rel="noopener">pickle module</a></li><li><a href="https://docs.python.org/zh-cn/3/library/json.html#module-json" target="_blank" rel="noopener">json module</a></li><li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener">bytes</a></li><li><a href="https://blog.igevin.info/posts/restful-api-get-started-to-write/" target="_blank" rel="noopener">RESTful API编写指南</a></li><li><a href="https://blog.igevin.info/posts/flask-rest-serialize-deserialize/" target="_blank" rel="noopener">Flask RESTful API开发之序列化与反序列化</a></li><li><a href="https://marshmallow.readthedocs.io/en/stable/quickstart.html" target="_blank" rel="noopener">marshmallow</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone后如何checkout到remote branch</title>
      <link href="/2019/10/27/clone%E5%90%8E%E5%A6%82%E4%BD%95checkout%E5%88%B0remote-branch/"/>
      <url>/2019/10/27/clone%E5%90%8E%E5%A6%82%E4%BD%95checkout%E5%88%B0remote-branch/</url>
      
        <content type="html"><![CDATA[<h2 id="what-why"><a href="#what-why" class="headerlink" title="what/why"></a>what/why</h2><p>通常情况使用<code>git clone github_repository_address</code>下载下来的仓库使用<code>git branch</code>查看当前所有分支时只能看到master分支，但是想要切换到其他分支进行工作怎么办❓</p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191027014941.png" alt=""></p><p>其实使用git clone下载的repository没那么简单😥，clone得到的是仓库所有的数据，不仅仅是复制在Github repository所能看到的master分支下的所有文件，<strong>clone下来的是仓库下的每一个文件和每一个文件的版本（也就是说所有的分支都被搞下来了咯）</strong>，那为啥看不到，其实remote branch被隐藏了，需要使用<code>git branch -a</code>才能看到。</p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191027015046.png" alt=""></p><h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><p>emmm…，现在看到了，那么怎么切换到remote branch呢？（我太难了🙃），又到了查文档的时候了，一波操作过后了解到git checkout是有restore working tree files的功能的，可以用来restore remote branch，比如使用以下命令在本地创建个新分支track远程分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;branch&gt; --track &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子，本地为远程分支CkaiGrac-PYMO创建的新分支名为yeshan，push时需要注意</span></span><br><span class="line">git checkout -b yeshan --track origin/CkaiGrac-PYMO</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191027015123.png" alt=""></p><p>tips：使用<code>git checkout -t &lt;remote/branch&gt;</code>默认会在本地建立一个和远程分支名字一样的分支</p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191027015200.png" alt=""></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul><li><a href="https://git-scm.com/docs/git-branch" target="_blank" rel="noopener">git-branch: https://git-scm.com/docs/git-branch</a></li><li><a href="https://git-scm.com/docs/git-checkout" target="_blank" rel="noopener">git-checkout: https://git-scm.com/docs/git-checkout</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Microsoft Edge Beta将网页变成应用</title>
      <link href="/2019/10/11/%E4%BD%BF%E7%94%A8Microsoft-Edge-Beta%E5%B0%86%E7%BD%91%E9%A1%B5%E5%8F%98%E6%88%90%E5%BA%94%E7%94%A8/"/>
      <url>/2019/10/11/%E4%BD%BF%E7%94%A8Microsoft-Edge-Beta%E5%B0%86%E7%BD%91%E9%A1%B5%E5%8F%98%E6%88%90%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天无聊的我打开了装了很久都没用的Microsoft Edge Beta，一波乱戳，惊讶的发现<a href="https://www.microsoftedgeinsider.com/zh-cn/" target="_blank" rel="noopener">Microsoft Edge Beta</a>居然有将网页打包为应用的功能😂</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191011222459.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191011222513.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191011222538.png" alt=""></p><p><strong>B站也有PC”客户端”了，真香😂</strong></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单感受下Python内置数据类型常用操作的性能</title>
      <link href="/2019/10/02/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%8BPython%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%80%A7%E8%83%BD/"/>
      <url>/2019/10/02/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E4%B8%8BPython%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%80%A7%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="生成一个列表的几种方式的性能对比"><a href="#生成一个列表的几种方式的性能对比" class="headerlink" title="生成一个列表的几种方式的性能对比"></a>生成一个列表的几种方式的性能对比</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表常用操作性能测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代 + '+'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        l = l + [i]</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代 + append</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        l.append(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表生成式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># list构造函数 + range</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test4</span><span class="params">()</span>:</span></span><br><span class="line">    l = list(range(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">t1 = Timer(<span class="string">"test1()"</span>, <span class="string">"from __main__ import test1"</span>)</span><br><span class="line"><span class="comment"># print("concat %f seconds" % t1.timeit(number=1000))</span></span><br><span class="line"></span><br><span class="line">t2 = Timer(<span class="string">"test2()"</span>, <span class="string">"from __main__ import test2"</span>)</span><br><span class="line"><span class="comment"># print("concat %f seconds" % t2.timeit(number=1000))</span></span><br><span class="line"></span><br><span class="line">t3 = Timer(<span class="string">"test3()"</span>, <span class="string">"from __main__ import test3"</span>)</span><br><span class="line"><span class="comment"># print("concat %f seconds" % t3.timeit(number=1000))</span></span><br><span class="line"></span><br><span class="line">t4 = Timer(<span class="string">"test4()"</span>, <span class="string">"from __main__ import test4"</span>)</span><br><span class="line"><span class="comment"># print("concat %f seconds" % t4.timeit(number=1000))</span></span><br><span class="line"></span><br><span class="line">result = [t1.timeit(<span class="number">1000</span>), t2.timeit(<span class="number">1000</span>), t3.timeit(<span class="number">1000</span>), t4.timeit(<span class="number">1000</span>)]</span><br><span class="line">method = [<span class="string">"for+ '+'"</span>, <span class="string">"for + append"</span>, <span class="string">"list comprehension"</span>, <span class="string">"list + range"</span>]</span><br><span class="line"></span><br><span class="line">plt.bar(method, result, color=<span class="string">'rgby'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.legend('concat time')</span></span><br><span class="line"><span class="comment"># print(zip(method, result))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> zip(method, result):</span><br><span class="line">    plt.text(x, y, <span class="string">"%fs"</span> % y)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191002194307.png" alt="Cost time"></p><a id="more"></a><h1 id="list和dict的检索效率对比"><a href="#list和dict的检索效率对比" class="headerlink" title="list和dict的检索效率对比"></a>list和dict的检索效率对比</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">lst_result = []</span><br><span class="line">d_result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>,<span class="number">1000001</span>,<span class="number">20000</span>):</span><br><span class="line">    t = Timer(<span class="string">"random.randrange(%d) in x"</span> % i, <span class="string">"from __main__ import random,x"</span>)</span><br><span class="line"></span><br><span class="line">    x = list(range(i))</span><br><span class="line">    lst_time = t.timeit(number=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    x = &#123;j:<span class="literal">None</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(i)&#125;</span><br><span class="line">    d_time = t.timeit(number=<span class="number">1000</span>)</span><br><span class="line">    </span><br><span class="line">    lst_result.append(lst_time)</span><br><span class="line">    d_result.append(d_time)</span><br><span class="line">    print(<span class="string">"%d,%10.3f,%10.3f"</span> % (i, lst_time, d_time))</span><br><span class="line"></span><br><span class="line">test = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>,<span class="number">1000001</span>,<span class="number">20000</span>)]</span><br><span class="line"></span><br><span class="line">plt.plot(test, lst_result, <span class="string">'ro'</span>)</span><br><span class="line">plt.plot(test, d_result, <span class="string">'bo'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend([<span class="string">'List'</span>,<span class="string">'Dictionary'</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191002202553.png" alt="result plot"></p><h1 id="del-list-index-与del-dict-key-性能对比"><a href="#del-list-index-与del-dict-key-性能对比" class="headerlink" title="del list[index]与del dict[key] 性能对比"></a>del list[index]与del dict[key] 性能对比</h1><blockquote><p>average time complexity：$ O(n)\ \ vs\ \ O(1) $</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">20000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l_result = []</span><br><span class="line">d_result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">    test_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(size)]</span><br><span class="line">    list_t = Timer(<span class="string">"del test_list[%d]"</span> % i,<span class="string">"from __main__ import test_list"</span>)</span><br><span class="line">    list_result = list_t.timeit(number=<span class="number">1</span>)</span><br><span class="line">    l_result.append(list_result)</span><br><span class="line"></span><br><span class="line">    test_dict = &#123;j:<span class="literal">None</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(size)&#125;</span><br><span class="line">    dict_t = Timer(<span class="string">"del test_dict[%d]"</span> % i,<span class="string">"from __main__ import test_dict"</span>)</span><br><span class="line">    dict_result = dict_t.timeit(number=<span class="number">1</span>)</span><br><span class="line">    d_result.append(dict_result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print("%d,%f,%f" % (i, list_result, dict_result))</span></span><br><span class="line"></span><br><span class="line">plt.plot(range(size), l_result)</span><br><span class="line">plt.plot(range(size), d_result)</span><br><span class="line"></span><br><span class="line">plt.legend([<span class="string">'del list[index]'</span>, <span class="string">'del dict[key]'</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20191002211901.png" alt="result"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://www.matplotlib.org.cn/index.html" target="_blank" rel="noopener">matplotlib中文文档</a></p></li><li><p><a href="https://wiki.python.org/moin/TimeComplexity" target="_blank" rel="noopener">TimeComplexity<Python Wiki></a></p></li><li><p><a href="https://www.icourse163.org/course/PKU-1206307812" target="_blank" rel="noopener">北大数据结构与算法公开课</a></p></li><li><p><a href="https://docs.python.org/zh-cn/3/library/timeit.html" target="_blank" rel="noopener">Python timeit</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2019/08/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/08/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://labs.play-with-docker.com/" target="_blank" rel="noopener">Play With Docker一个免费使用的基于web界面的Docker环境</a></p></blockquote><h1 id="常用docker命令"><a href="#常用docker命令" class="headerlink" title="常用docker命令"></a>常用docker命令</h1><p><strong>可使用<code>docker COMMAND --help</code>查看命令的用法</strong></p><h2 id="Docker镜像相关"><a href="#Docker镜像相关" class="headerlink" title="Docker镜像相关"></a>Docker镜像相关</h2><ul><li>1、<code>docker image pull</code>：用于下载镜像，镜像从远程镜像仓库服务的仓库中下载，默认从Docker Hub的仓库中拉取</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span></span><br><span class="line"><span class="comment"># 说明：如果给出tag，一般拉取latest，name一般为username/repository,digest为镜像摘要可不给出</span></span><br><span class="line">docker image pull ubuntu:latest</span><br><span class="line"><span class="comment"># 这个拉取标签为latest的ubuntu官方镜像，latest: Pulling from library/ubuntu，latest不一定是最新镜像</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>2、<code>docker image ls</code>：列出本地Docker主机上存储的镜像</p></li><li><p>3、<code>docker image inspect</code>：查看镜像的细节，包括镜像层数据和元数据</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker image inspect [OPTIONS] IMAGE [IMAGE...]</span></span><br><span class="line"><span class="comment"># inspect后一般跟repository name或image id</span></span><br></pre></td></tr></table></figure><ul><li><p>4、<code>docker image rm</code>：用于删除镜像。如果镜像存在关联的容器，并且容器处于运行(Up)或停止(Exit)状态时，不允许删除该镜像。rm后可跟repository或image id</p></li><li><p>5、<code>dicker image search</code>：从Docker Hub查找镜像</p></li><li><p>6、<code>docker image build</code>：根据Dockerfile构建镜像</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如：使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</span></span><br><span class="line">docker build -t yeshan333/ubuntu:latest .</span><br></pre></td></tr></table></figure><ul><li>7、<code>docker image history</code>：用于查看镜像构建的相关信息</li></ul><h2 id="Docker容器相关"><a href="#Docker容器相关" class="headerlink" title="Docker容器相关"></a>Docker容器相关</h2><ul><li>1、<code>docker container run</code>：用于启动新容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span><br><span class="line"><span class="comment"># 常用options：</span></span><br><span class="line"><span class="comment"># -d: 后台运行容器，并返回容器ID；</span></span><br><span class="line"><span class="comment"># -i: 以交互模式运行容器，通常与 -t 同时使用；</span></span><br><span class="line"><span class="comment"># -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span></span><br><span class="line"><span class="comment"># -P: 随机端口映射，容器内部端口随机映射到主机的高端口</span></span><br><span class="line"><span class="comment"># -p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span></span><br><span class="line"><span class="comment"># --name="container-name": 为容器指定一个名称；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">docker container run -it ubuntu:latest /bin/bash</span><br><span class="line"><span class="comment"># 说明：-it使容器具备交互性并与终端连接，命令最后表明运行容器中的Bash Shell程序</span></span><br></pre></td></tr></table></figure><ul><li><p>2、<code>docker container ls</code>：列出所有运行状态的容器可用<code>docker p</code>s代替，如果加个*<em>-a</em>附加参数，会列出所有容器（包括处于停止状态的容器）</p></li><li><p>3、<code>docker container stop</code>：停止运行中的容器，并将其状态设置为Exited(0)，stop后跟container name或container id</p></li><li><p>4、<code>docker container rm</code>：用于删除停止运行的容器，rm后跟container name或container id，使用-f参数可强制删除运行中的容器</p></li><li><p>5、<code>docker container exec</code>：用于连接一个处于运行状态的容器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">docker container <span class="built_in">exec</span> -t &lt;container-name or container-id&gt; bash</span><br><span class="line"><span class="comment"># 该命令会将docker主机中的shell连接到一个运行中的容器，在容器内部启动一个新的bash shell进程</span></span><br></pre></td></tr></table></figure><ul><li><p>6、<code>docker container start</code>：用于重启处于停止(Exited)状态的容器，start后跟container name或container id</p></li><li><p>7、<code>docker container inspect</code>：查看容器的配置信息和运行时信息，inspect后跟container name或container id</p></li><li><p>8、快捷键<code>Ctrl+PQ</code>用于断开docker主机的shell终端与容器终端的连接，并在退出后保证容器在后台运行</p></li></ul><h1 id="应用容器化"><a href="#应用容器化" class="headerlink" title="应用容器化"></a>应用容器化</h1><blockquote><p>(Containerizing|Dockerizing)即将应用整合到容器中并且运行的过程</p></blockquote><h2 id="应用容器化的一般步骤"><a href="#应用容器化的一般步骤" class="headerlink" title="应用容器化的一般步骤"></a>应用容器化的一般步骤</h2><ul><li>1、编写应用代码</li><li>2、创建Dockerfile，其中包括当前应用的描述、依赖以及如何运行这个应用</li><li>3、对Dockerfile执行docker image build命令</li><li>4、等待Docker将应用程序构建到Docker镜像中</li></ul><blockquote><p>Once your app is containerized (made into a Docker image), you’re ready to ship it and run it as a container.《Docker Deep Dive》</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190808213453.png" alt="docker deep dive"></p><h2 id="使用Dockerfile定制镜像"><a href="#使用Dockerfile定制镜像" class="headerlink" title="使用Dockerfile定制镜像"></a>使用Dockerfile定制镜像</h2><ul><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener">Dockerfile最佳实践</a></li><li><a href="https://docker_practice.gitee.io/image/build.html" target="_blank" rel="noopener">使用Dockerfile定制镜像</a></li></ul><blockquote><p>Dockerfile中以#开头的都是注释行，除注释之外，每一行都是一条指令<br>指令的的一般格式：INSTRUCTION argument，INSTRUCTION一般都为大写</p></blockquote><p>示例Dockerfile：<a href="https://github.com/yeshan333/psweb" target="_blank" rel="noopener">https://github.com/yeshan333/psweb</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line">LABEL maintainer&#x3D;&quot;nigelpoulton@hotmail.com&quot;</span><br><span class="line"></span><br><span class="line"># Install Node and NPM</span><br><span class="line">RUN apk add --update nodejs nodejs-npm</span><br><span class="line"></span><br><span class="line"># Copy app to &#x2F;src</span><br><span class="line">COPY . &#x2F;src</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;src</span><br><span class="line"></span><br><span class="line"># Install dependencies</span><br><span class="line">RUN  npm install</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;node&quot;, &quot;.&#x2F;app.js&quot;]</span><br></pre></td></tr></table></figure><ul><li>说明：<ul><li>每个Dockerfile文件文件的第一行一般都是<code>FROM</code>指令。<strong>FROM指定的镜像会作为当前镜像的一个基础镜像层，当前应用的剩余内容会作为新的镜像层添加到基础镜像层之上。</strong>，FROM建议引用官方镜像</li><li>LABEL指定当前镜像维护者，给镜像使用者一个沟通渠道</li><li><code>RUN apk add --update nodejs nodejs-npm</code>将当前应用的依赖安装到镜像中，RUN指令会新建一个镜像层存储这些内容</li><li><code>COPY . /src</code>会将应用相关文件从构建上下文复制到当前镜像中，这会新建一个镜像层</li><li><code>WORKDIR /src</code>会为Dockerfile中未执行的指令设置工作目录</li><li><code>RUN  npm install</code>在当前工作目录中为应用安装依赖，这会新建一个镜像层</li><li><code>EXPOSE 8080</code>对外提供一个web服务端口</li><li><code>ENTRYPOINT [&quot;node&quot;, &quot;./app.js&quot;]</code>指定了当前镜像的入口程序，container运行时就会运行</li></ul></li></ul><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用docker image build根据Dockerfile制作镜像，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -t用于指定制作好的镜像的名字及标签，通常 name:tag 或者 name</span><br><span class="line"># 最后的 . 表示使用当前目录作为构建上下文</span><br><span class="line">docker image build -t web:latest .</span><br></pre></td></tr></table></figure><p><strong>使用<code>docker image history web:latest</code>可以查看构建镜像过程中执行了哪些指令</strong></p><h3 id="推送镜像到Docker-Hub"><a href="#推送镜像到Docker-Hub" class="headerlink" title="推送镜像到Docker Hub"></a>推送镜像到Docker Hub</h3><ul><li>推送镜像前建议使用以下命令给镜像打新标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># new-tag建议以自己的 DockerHub ID&#x2F;new-tag 的格式命名，方便推送到自己的repo</span><br><span class="line">docker image tag &lt;current-tag&gt; &lt;new-tag&gt;</span><br></pre></td></tr></table></figure></li><li>使用<code>docker image push &lt;tag-name&gt;</code>推送镜像，推送前需要<code>docker login</code>,<strong>记得测试打包好的应用再推送！！！</strong></li></ul><h3 id="Dockerfile常用指令"><a href="#Dockerfile常用指令" class="headerlink" title="Dockerfile常用指令"></a>Dockerfile常用指令</h3><table><thead><tr><th align="center">指令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">FROM</td><td align="center">指定要构建的镜像的基础镜像，一般为Dockerfile文件第一行</td></tr><tr><td align="center">RUN</td><td align="center">用于在镜像中执行命令，会新建一个镜像层</td></tr><tr><td align="center">COPY</td><td align="center">一般用于将应用代码copy到镜像中，这会新建一个镜像层</td></tr><tr><td align="center">WORKDIR</td><td align="center">用于设置Dockerfile中未执行的指令的工作目录</td></tr><tr><td align="center">ENTRYPOINT</td><td align="center">指定镜像以容器方式启动后默认运行的程序， ENTRYPOINT 的命令不会被docker run指定要执行的命令覆盖</td></tr><tr><td align="center">CMD</td><td align="center">指定容器启动时执行的命令，一个 Dockerfile 中只能有一个 CMD 指令，如果写了多个，那么只有最后一个会执行。CMD 和 ENTRYPOINT 同时存在时，CMD 中的内容会变成 ENTRYPOINT 中指令命令的默认参数，该参数可以被 docker run 时设置的命令覆盖</td></tr><tr><td align="center">ENV</td><td align="center">设置镜像中的环境变量</td></tr><tr><td align="center">EXPOSE</td><td align="center">记录应用所使用的网络端口</td></tr></tbody></table><p>更多：</p><ul><li><a href="https://docker_practice.gitee.io/image/dockerfile/" target="_blank" rel="noopener">Dockerfile指令详解</a></li><li><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile reference</a></li></ul><p align="middle"><a src="https://labs.play-with-docker.com/"><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190808232118.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个不错的Jupyter Notebook云端展示平台</title>
      <link href="/2019/08/07/%E5%87%A0%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84Jupyter%20Notebook%E4%BA%91%E7%AB%AF%E5%B1%95%E7%A4%BA%E5%B9%B3%E5%8F%B0/"/>
      <url>/2019/08/07/%E5%87%A0%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84Jupyter%20Notebook%E4%BA%91%E7%AB%AF%E5%B1%95%E7%A4%BA%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="jupyter-nbviewer"><a href="#jupyter-nbviewer" class="headerlink" title="jupyter nbviewer"></a>jupyter nbviewer</h1><p><a href="https://nbviewer.jupyter.org/" target="_blank" rel="noopener">URL:https://nbviewer.jupyter.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807100641.png" alt=""></p><p>结合Github的示例用法：<a href="https://nbviewer.jupyter.org/github/" target="_blank" rel="noopener">https://nbviewer.jupyter.org/github/</a> + &lt;<code>用户名</code>或者<code>用户名/存放ipynb文件的仓库</code>或者<code>Gist ID</code>&gt;</p><p>例如：<a href="https://nbviewer.jupyter.org/github/yeshan333/JupyterNotebook-Show-sample" target="_blank" rel="noopener">https://nbviewer.jupyter.org/github/yeshan333/JupyterNotebook-Show-sample</a></p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807101034.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807101015.png" alt=""></p><p>还行<del>~</del></p><h1 id="binder"><a href="#binder" class="headerlink" title="binder"></a>binder</h1><p><a href="https://mybinder.org" target="_blank" rel="noopener">URL:https://mybinder.org</a></p><p>使用文档：<a href="https://mybinder.readthedocs.io/en/latest/index.html#" target="_blank" rel="noopener">https://mybinder.readthedocs.io/en/latest/index.html#</a></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807102351.png" alt=""></p><p>结合Github的示例用法：<a href="https://mybinder.org/v2/gh/" target="_blank" rel="noopener">https://mybinder.org/v2/gh/</a> + &lt;用户名/仓库名&gt; + /分支名 + ?filepath= + ipynb文件名</p><p>例如：<a href="https://mybinder.org/v2/gh/yeshan333/JupyterNotebook-Show-sample/master?filepath=demo.ipynb" target="_blank" rel="noopener">https://mybinder.org/v2/gh/yeshan333/JupyterNotebook-Show-sample/master?filepath=demo.ipynb</a></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807103106.png" alt=""></p><p><strong>很nice啊，在线交互式环境，在线跑代码，就是渲染有点小慢</strong></p><h1 id="google-colab"><a href="#google-colab" class="headerlink" title="google colab"></a>google colab</h1><p><a href="https://colab.research.google.com/notebooks/welcome.ipynb" target="_blank" rel="noopener">官方介绍:https://colab.research.google.com/notebooks/welcome.ipynb</a>，需要科学上网</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=62772711&cid=109062819&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807103836.png" alt=""></p><p>结合Github的示例用法：<a href="https://colab.research.google.com/github/" target="_blank" rel="noopener">https://colab.research.google.com/github/</a> + 用户名/ + 存放ipynb文件的仓库名/ + blob/ + 分支名 + 要展示的ipynb文件路径</p><p>示例：<a href="https://colab.research.google.com/github/yeshan333/JupyterNotebook-Show-sample/blob/master/demo.ipynb" target="_blank" rel="noopener">https://colab.research.google.com/github/yeshan333/JupyterNotebook-Show-sample/blob/master/demo.ipynb</a></p><p><img src="https://cdn.jsdelivr.net/gh/ssmath/mypic/img/20190807105348.png" alt=""></p><p>也是个在线的交互式环境，很nice了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex基本语法简记</title>
      <link href="/2019/06/18/latex%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%AE%80%E8%AE%B0/"/>
      <url>/2019/06/18/latex%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="公式插入方式"><a href="#公式插入方式" class="headerlink" title="公式插入方式"></a>公式插入方式</h1><ol><li>行内公式可用<code>\(...\)</code>或<code>$...$</code></li></ol><ul><li>例如<code>$ f(x)=x^2 $</code>,显示为$ f(x)=x^2 $</li></ul><ol start="2"><li>独立公式（单独另起一行,公式会居中），使用<code>$$...$$</code>或<code>\[...\]</code></li></ol><ul><li>例如：<code>$$ \limit{f(x)dx} $$</code>或<br>$$ \int_a^b{f(x)dx} $$</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>行内公式可用<span class="code">`\(...\)`</span>或<span class="code">`$...$`</span></span><br><span class="line"><span class="bullet">- </span>例如<span class="code">`$ f(x)=x^2 $`</span>,显示为$ f(x)=x^2 $</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>独立公式（单独另起一行,公式会居中），使用<span class="code">`$$...$$`</span>或<span class="code">`\[...\]`</span></span><br><span class="line"><span class="bullet">- </span>例如：<span class="code">`$$ \limit&#123;f(x)dx&#125; $$`</span>或</span><br><span class="line">$$ \int_a^b&#123;f(x)dx&#125; $$</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="大括号的使用"><a href="#大括号的使用" class="headerlink" title="大括号的使用"></a>大括号的使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">$$ f(x)&#x3D;\left\&#123;</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">x &amp; &#x3D; &amp; \cos(t) \\</span><br><span class="line">y &amp; &#x3D; &amp; \sin(t) \\</span><br><span class="line">z &amp; &#x3D; &amp; \frac xy</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line">\right.</span><br><span class="line">$$</span><br><span class="line">方法二：</span><br><span class="line">$$ F^&#123;HLLC&#125;&#x3D;\left\&#123;</span><br><span class="line">\begin&#123;array&#125;&#123;rcl&#125;</span><br><span class="line">F_L       &amp;      &amp; &#123;0      &lt;      S_L&#125;\\</span><br><span class="line">F^*_L     &amp;      &amp; &#123;S_L \leq 0 &lt; S_M&#125;\\</span><br><span class="line">F^*_R     &amp;      &amp; &#123;S_M \leq 0 &lt; S_R&#125;\\</span><br><span class="line">F_R       &amp;      &amp; &#123;S_R \leq 0&#125;</span><br><span class="line">\end&#123;array&#125; \right. $$</span><br><span class="line">方法三:</span><br><span class="line">$$f(x)&#x3D;</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">0&amp; \text&#123;x&#x3D;0&#125;\\</span><br><span class="line">1&amp; \text&#123;x!&#x3D;0&#125;</span><br><span class="line">\end&#123;cases&#125;$$</span><br></pre></td></tr></table></figure><p>方法一：<br>$$ f(x)=\left{<br>\begin{aligned}<br>x &amp; = &amp; \cos(t) \<br>y &amp; = &amp; \sin(t) \<br>z &amp; = &amp; \frac xy<br>\end{aligned}<br>\right.<br>$$<br>方法二：<br>$$ F^{HLLC}=\left{<br>\begin{array}{rcl}<br>F_L       &amp;      &amp; {0      &lt;      S_L}\<br>F^<em>_L     &amp;      &amp; {S_L \leq 0 &lt; S_M}\<br>F^</em>_R     &amp;      &amp; {S_M \leq 0 &lt; S_R}\<br>F_R       &amp;      &amp; {S_R \leq 0}<br>\end{array} \right. $$<br>方法三:<br>$$f(x)=<br>\begin{cases}<br>0&amp; \text{x=0}\<br>1&amp; \text{x!=0}<br>\end{cases}$$</p><h1 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h1><p>要输出字符　空格　#　$　%　&amp;　_　{　}　，用命令：<code>\空格　#　\$　\%　\&amp;　_　{　}</code></p><h2 id="运算符表"><a href="#运算符表" class="headerlink" title="运算符表"></a>运算符表</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\pm</td><td align="center">$\pm$</td><td align="center">\times</td><td align="center">$\times$</td></tr><tr><td align="center">\div</td><td align="center">$\div$</td><td align="center">\mid</td><td align="center">$\mid$</td></tr><tr><td align="center">\nmid</td><td align="center">$\nmid$</td><td align="center">\cdot</td><td align="center">$\cdot$</td></tr><tr><td align="center">\circ</td><td align="center">$\circ$</td><td align="center">\ast</td><td align="center">$\ast$</td></tr><tr><td align="center">\bigodot</td><td align="center">$\bigodot$</td><td align="center">\bigotimes</td><td align="center">$\bigotimes$</td></tr><tr><td align="center">\bigoplus</td><td align="center">$\bigoplus$</td><td align="center">\leq</td><td align="center">$\leq$</td></tr><tr><td align="center">\geq</td><td align="center">$\geq$</td><td align="center">\neq</td><td align="center">$\neq$</td></tr><tr><td align="center">\approx</td><td align="center">$\approx$</td><td align="center">\equiv</td><td align="center">$\equiv$</td></tr><tr><td align="center">\sum</td><td align="center">$\sum$</td><td align="center">\prod</td><td align="center">$\prod$</td></tr></tbody></table><h3 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\emptyset</td><td align="center">$\emptyset$</td><td align="center">\in</td><td align="center">$\in$</td></tr><tr><td align="center">\notin</td><td align="center">$\notin$</td><td align="center">\subset</td><td align="center">$\subset$</td></tr><tr><td align="center">\supset</td><td align="center">$\supset$</td><td align="center">\subseteq</td><td align="center">$\subseteq$</td></tr><tr><td align="center">\supseteq</td><td align="center">$\supseteq$</td><td align="center">\bigcap</td><td align="center">$\bigcap$</td></tr><tr><td align="center">\bigcup</td><td align="center">$\bigcup$</td><td align="center">\bigvee</td><td align="center">$\bigvee$</td></tr><tr><td align="center">\bigwedge</td><td align="center">$\bigwedge$</td><td align="center">\biguplus</td><td align="center">$\biguplus$</td></tr><tr><td align="center">\bigsqcup</td><td align="center">$\bigsqcup$</td><td align="center">&ensp;</td><td align="center">&ensp;</td></tr></tbody></table><h3 id="对数运算符"><a href="#对数运算符" class="headerlink" title="对数运算符"></a>对数运算符</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\log</td><td align="center">$\log$</td><td align="center">\lg</td><td align="center">$\lg$</td><td align="center">\ln</td><td align="center">$\ln$</td></tr></tbody></table><h3 id="三角运算符"><a href="#三角运算符" class="headerlink" title="三角运算符"></a>三角运算符</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\bot</td><td align="center">$\bot$</td><td align="center">\angle</td><td align="center">$\angle$</td><td align="center">30^\circ</td><td align="center">$30^\circ$</td></tr><tr><td align="center">\sin</td><td align="center">$\sin$</td><td align="center">\cos</td><td align="center">$\cos$</td><td align="center">\tan</td><td align="center">$\tan$</td></tr><tr><td align="center">\cot</td><td align="center">$\cot$</td><td align="center">\sec</td><td align="center">$\sec$</td><td align="center">\csc</td><td align="center">$\csc$</td></tr></tbody></table><h3 id="微积分运算符"><a href="#微积分运算符" class="headerlink" title="微积分运算符"></a>微积分运算符</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\prime</td><td align="center">$\prime$</td><td align="center">\int</td><td align="center">$\int$</td><td align="center">\iint</td><td align="center">$\iint$</td></tr><tr><td align="center">\iiint</td><td align="center">$\iiint$</td><td align="center">\oint</td><td align="center">$\oint$</td><td align="center">\lim</td><td align="center">$\lim$</td></tr><tr><td align="center">\infty</td><td align="center">$\infty$</td><td align="center">\nabla</td><td align="center">$\nabla$</td><td align="center">&ensp;</td><td align="center">&ensp;</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\because</td><td align="center">$\because$</td><td align="center">\therefore</td><td align="center">$\therefore$</td><td align="center">\forall</td><td align="center">$\forall$</td></tr><tr><td align="center">\exists</td><td align="center">$\exists$</td><td align="center">\not=</td><td align="center">$\not=$</td><td align="center">\not&gt;</td><td align="center">$\not&gt;$</td></tr><tr><td align="center">\not&lt;</td><td align="center">$\not&lt;$</td><td align="center">\not\subset</td><td align="center">$\not\subset$</td><td align="center">&ensp;</td><td align="center">&ensp;</td></tr></tbody></table><h2 id="其它符号"><a href="#其它符号" class="headerlink" title="其它符号"></a>其它符号</h2><h3 id="戴帽和连线符号"><a href="#戴帽和连线符号" class="headerlink" title="戴帽和连线符号"></a>戴帽和连线符号</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\hat{y}</td><td align="center">$\hat{y}$</td><td align="center">\check{y}</td><td align="center">$\check{y}$</td><td align="center">\breve</td><td align="center">$\breve{y}$</td></tr><tr><td align="center">\overline{a+b+c+d}</td><td align="center">$\overline{a+b+c+d}$</td><td align="center">\underline{a+b+c+d}</td><td align="center">$\underline{a+b+c+d}$</td><td align="center">\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}</td><td align="center">$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$</td></tr></tbody></table><h3 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h3><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\uparrow</td><td align="center">$\uparrow$</td><td align="center">\downarrow</td><td align="center">$\downarrow$</td><td align="center">\Uparrow</td><td align="center">$\Uparrow$</td></tr><tr><td align="center">\Downarrow</td><td align="center">$\Downarrow$</td><td align="center">\rightarrow</td><td align="center">$\rightarrow$</td><td align="center">\leftarrow</td><td align="center">$\leftarrow$</td></tr><tr><td align="center">\Rightarrow</td><td align="center">$\Rightarrow$</td><td align="center">\Leftarrow</td><td align="center">$\Leftarrow$</td><td align="center">\longrightarrow</td><td align="center">$\longrightarrow$</td></tr><tr><td align="center">\Longrightarrow</td><td align="center">$\Longrightarrow$</td><td align="center">\longleftarrow</td><td align="center">$\longleftarrow$</td><td align="center">\Longleftarrow</td><td align="center">$\Longleftarrow$</td></tr></tbody></table><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>起始标记<code>\begin{matrix}</code>,结束标记<code>\end{matrix}</code></li><li>每一行末标记<code>\\</code>进行换行，行间元素以<code>&amp;</code>分隔用于对齐。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;</span><br><span class="line">1&amp;0&amp;0\\</span><br><span class="line">0&amp;1&amp;0\\</span><br><span class="line">0&amp;0&amp;1\\</span><br><span class="line">\end&#123;matrix&#125;$$</span><br></pre></td></tr></table></figure><p>$$\begin{matrix}<br>1&amp;0&amp;0\<br>0&amp;1&amp;0\<br>0&amp;0&amp;1\<br>\end{matrix}$$</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul><li>可用下列词替换<code>matrix</code>设置矩阵边框<ul><li>pmatrix、bmatrix、Bmatrix：小括号、中括号、大括号边框</li><li>vmatrix、Vmatrix：单竖线、双竖线边框</li></ul></li><li>省略元素<ul><li>横省略号：<code>\cdots</code></li><li>竖省略号：<code>\vdots</code></li><li>斜省略号：<code>\ddots</code></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;Bmatrix&#125;</span><br><span class="line">&#123;a_&#123;11&#125;&#125;&amp;&#123;a_&#123;12&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;1n&#125;&#125;\\</span><br><span class="line">&#123;a_&#123;21&#125;&#125;&amp;&#123;a_&#123;22&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;2n&#125;&#125;\\</span><br><span class="line">&#123;\vdots&#125;&amp;&#123;\vdots&#125;&amp;&#123;\ddots&#125;&amp;&#123;\vdots&#125;\\</span><br><span class="line">&#123;a_&#123;m1&#125;&#125;&amp;&#123;a_&#123;m2&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;mn&#125;&#125;\\</span><br><span class="line">\end&#123;Bmatrix&#125;$$</span><br></pre></td></tr></table></figure><p>$$\begin{Bmatrix}<br>{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}}\<br>{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots}\<br>{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}}\<br>\end{Bmatrix}$$</p><h1 id="希腊字母表"><a href="#希腊字母表" class="headerlink" title="希腊字母表"></a>希腊字母表</h1><table><thead><tr><th align="center">命令</th><th align="center">显示</th><th align="center">命令</th><th align="center">显示</th></tr></thead><tbody><tr><td align="center">\alpha</td><td align="center">$\alpha$</td><td align="center">\beta</td><td align="center">$\beta$</td></tr><tr><td align="center">\gamma</td><td align="center">$\gamma$</td><td align="center">\delta</td><td align="center">$\delta$</td></tr><tr><td align="center">\epsilon</td><td align="center">$\epsilon$</td><td align="center">\zeta</td><td align="center">$\zeta$</td></tr><tr><td align="center">\eta</td><td align="center">$\eta$</td><td align="center">\theta</td><td align="center">$\theta$</td></tr><tr><td align="center">\iota</td><td align="center">$\iota$</td><td align="center">\kappa</td><td align="center">$\kappa$</td></tr><tr><td align="center">\lambda</td><td align="center">$\lambda$</td><td align="center">\mu</td><td align="center">$\mu$</td></tr><tr><td align="center">\nu</td><td align="center">$\nu$</td><td align="center">\xi</td><td align="center">$\xi$</td></tr><tr><td align="center">\pi</td><td align="center">$\pi$</td><td align="center">\rho</td><td align="center">$\rho$</td></tr><tr><td align="center">\sigma</td><td align="center">$\sigma$</td><td align="center">\tau</td><td align="center">$\tau$</td></tr><tr><td align="center">\upsilon</td><td align="center">$\upsilon$</td><td align="center">\phi</td><td align="center">$\phi$</td></tr><tr><td align="center">\chi</td><td align="center">$\chi$</td><td align="center">\psi</td><td align="center">$\psi$</td></tr><tr><td align="center">\omega</td><td align="center">$\omega$</td><td align="center">&ensp;</td><td align="center">&ensp;</td></tr></tbody></table><ul><li>如果需要大写的希腊字母，将命令首字母大写即可<ul><li>例如：<code>\Gamma</code>,显示$ \Gamma $</li></ul></li><li>如果要将字母斜体显示，使用<code>\var</code>前缀即可<ul><li>例如：<code>\varGamma</code>，显示$ \varGamma $</li></ul></li></ul><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><ul><li>分组：<ul><li>使用<code>{}</code>将具有相同等级的内容扩入其中，成组处理。</li><li>比如：<code>\10^10</code>呈现为$10^10$，<code>10^{10}</code>呈现为$10^{10}$。</li></ul></li><li>空格：<ul><li>单个空格：<code>a\ b</code>，$a\ b$</li><li>四个空格：<code>a\quad b</code>,$a\quad b$</li></ul></li><li>上标<code>^</code>，下标<code>_</code></li><li>尖括号<code>\langle\rangle</code>：$\langle\rangle$</li><li>使用<code>\left</code>或<code>\right</code>使符号大小与临近的公式符号相适应，对比如下：<ul><li><code>(\frac{x}{y})</code>：$(\frac{x}{y})$</li><li><code>\left(\frac{x}{y}\right)</code>：$\left(\frac{x}{y}\right)$</li></ul></li><li>分式：<ul><li><code>\frac{1}{3}</code>：$\frac{1}{3}$</li><li><code>1 \over 3</code>：$1 \over 3$</li></ul></li><li>开根<code>\sqrt[n]{3}</code>：$\sqrt[n]{3}$</li><li>省略号：<ul><li><code>\ldots</code>：与文本底线对齐的省略号</li><li><code>\cdots</code>：与文本中线对齐的省略号</li><li><code>$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$</code>：$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$</li></ul></li></ul><h2 id="综合运用示范"><a href="#综合运用示范" class="headerlink" title="综合运用示范"></a>综合运用示范</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% 极限运算</span><br><span class="line">$$\lim\limits_&#123;n \rightarrow +\infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;$$</span><br><span class="line">$$\lim_&#123;n \rightarrow +\infty&#125; \frac&#123;1&#125;&#123;n(n+1)&#125;$$</span><br></pre></td></tr></table></figure><p>$$\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}$$</p><p>$$\lim_{n \rightarrow +\infty} \frac{1}{n(n+1)}$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$ \left[J_\alpha(x) &#x3D; \sum_&#123;m&#x3D;0&#125;^\infty \frac&#123;(-1)^m&#125;&#123;m! \Gamma (m + \alpha + 1)&#125; &#123;\left(&#123; \frac&#123;x&#125;&#123;2&#125; &#125;\right)&#125;^&#123;2m + \alpha&#125;\right] $$</span><br></pre></td></tr></table></figure><p>$$ \left[J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha}\right] $$</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax使用LaTeX语法编写数学公式教程</a></li><li><a href="https://qianwenma.cn/2018/05/17/mathjax-yu-fa-can-kao/#" target="_blank" rel="noopener">MathJax 语法参考</a></li><li><a href="https://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="noopener">基本数学公式语法(of MathJax)</a></li><li><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax basic tutorial and quick reference</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebooks的简单了解</title>
      <link href="/2019/05/22/Jupyter-Notebooks%E7%9A%84%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/"/>
      <url>/2019/05/22/Jupyter-Notebooks%E7%9A%84%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>玩Python这么久了，连Jupyter都不会，有点捞，今天补一补这方面的操作。。。。</p></blockquote><h1 id="Jupyter-Notebooks"><a href="#Jupyter-Notebooks" class="headerlink" title="Jupyter Notebooks"></a><a href="https://jupyter.org/" target="_blank" rel="noopener">Jupyter Notebooks</a></h1><p>&ensp;&ensp;Jupyter Notebooks 是一款开源的网络应用，我们可以将其用于创建和共享代码与文档。其提供了一个环境，你无需离开这个环境，就可以在其中编写你的代码、运行代码、查看输出、可视化数据并查看结果。因此，这是一款可执行端到端的数据科学工作流程的便捷工具，其中包括数据清理、统计建模、构建和训练机器学习模型、可视化数据等等。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>pip install ipython jupyter</code></pre><h2 id="上手上手"><a href="#上手上手" class="headerlink" title="上手上手"></a>上手上手</h2><p>在终端输入<code>jupyter notebook</code>启动Jupyter notebooks,它会在默认浏览器中打开，地址是<a href="http://localhost:8888/tree。" target="_blank" rel="noopener">http://localhost:8888/tree。</a></p><p><img src="https://s2.ax1x.com/2019/05/22/VCCz7R.md.png" alt="VCCz7R.md.png"></p><!-- more --><p><img src="https://s2.ax1x.com/2019/05/22/VCCxB9.md.png" alt="VCCxB9.md.png"></p><p>新建个Python文件试试</p><p><img src="https://raw.githubusercontent.com/yeshan333/blog_images/master/posts/jupyter.gif" alt="https://raw.githubusercontent.com/yeshan333/blog_images/master/posts/jupyter.gif"></p><h1 id="Jupyter常用键盘快捷键"><a href="#Jupyter常用键盘快捷键" class="headerlink" title="Jupyter常用键盘快捷键"></a>Jupyter常用键盘快捷键</h1><p><strong>esc和enter用于切换Jupyter的键盘输入模式，esc切换为命令模式（blue），enter切换为编辑模式（green）</strong></p><ul><li><p>命令模式(常用)</p><ul><li>连续按两下D，删除当前活跃单元</li><li>按A在活跃单元上插入一个单元，按B在活跃单元下插入一个单元</li><li>按Z撤销被删除的单元</li><li>按Y将当前单元变为代码单元</li><li>按Shift+方向上下键选择多个单元，按Shift+M可以合并选择的单元</li><li>Ctrl+Shift+F用于打开命令面板</li><li>按H查看快捷键完整列表</li></ul></li><li><p>编辑模式（常用）</p><ul><li>Ctrl+S保存（防死机(๑•̀ㅂ•́)و✧）</li><li>Ctrl+Home回到单元起始位置</li><li>Ctrl+Enter运行整个单元块</li><li>Alt+Enter运行当前活跃单元块，并在当前活跃单元块下方创建新的单元块</li></ul></li></ul><p><img src="https://s2.ax1x.com/2019/05/22/VCPpA1.md.png" alt="VCPpA1.md.png"></p><hr><p>emmm可以划水了。。。。</p><p>了解更多：</p><p><a href="https://zhuanlan.zhihu.com/p/37553863" target="_blank" rel="noopener">始于Jupyter Notebooks：一份全面的初学者实用指南</a></p><p><a href="https://zhuanlan.zhihu.com/p/42468945" target="_blank" rel="noopener">jupyter notebook使用技巧</a></p><p><a href="https://segmentfault.com/a/1190000013014274?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">Jupyter介绍和使用 中文版</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPie的使用</title>
      <link href="/2019/04/23/HTTPie%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/23/HTTPie%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>HTTPie（发音为aitch-tee-tee-pie）是一个命令行HTTP客户端。其目标是使与Web服务的CLI交互尽可能人性化。它提供了一个简单的http命令，允许使用简单自然的语法发送任意HTTP请求，并显示彩色输出。HTTPie可用于测试，调试以及通常与HTTP服务器交互。</p></blockquote><h1 id="HTTPie官方文档"><a href="#HTTPie官方文档" class="headerlink" title="HTTPie官方文档"></a>HTTPie官方文档</h1><ul><li><a href="https://httpie.org/doc" target="_blank" rel="noopener">https://httpie.org/doc</a></li></ul><p>windows下安装</p><pre><code>pip install --upgrade httpie</code></pre><h1 id="HTTPie的简单使用"><a href="#HTTPie的简单使用" class="headerlink" title="HTTPie的简单使用"></a>HTTPie的简单使用</h1><h2 id="一个完整的请求语句的大概样子"><a href="#一个完整的请求语句的大概样子" class="headerlink" title="一个完整的请求语句的大概样子"></a>一个完整的请求语句的大概样子</h2><pre><code>http [选项(flags)] [方法] URL [查询字符串/数据字段/首部字段]</code></pre><h2 id="HTTPie数据语法"><a href="#HTTPie数据语法" class="headerlink" title="HTTPie数据语法"></a>HTTPie数据语法</h2><table><thead><tr><th align="center">类型</th><th align="center">符号</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">URL参数</td><td align="center">==</td><td align="center">param==value</td></tr><tr><td align="center">首部字段</td><td align="center">:</td><td align="center">Name:value</td></tr><tr><td align="center">数据字段</td><td align="center">=</td><td align="center">field=value</td></tr><tr><td align="center">原生JSON字段</td><td align="center">:=</td><td align="center">field:=json</td></tr><tr><td align="center">表单上传字段</td><td align="center">@</td><td align="center">field@dir/file</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">$ http --download www.jb51.net/my_file.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交表单</span></span><br><span class="line">$ http -f POST www.jb51.net name=<span class="string">'Dan Nanni'</span> comment=<span class="string">'Hi there'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPie的默认数据类型为JSON格式的</span></span><br><span class="line">$ http PUT example.org name=John email=john@example.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用代理</span></span><br><span class="line">$ http --proxy=http:http://10.10.1.10:3128 --proxy=https:https://10.10.1.10:1080 example.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制请求头</span></span><br><span class="line">$ http www.test.com User-Agent:Xmodulo/1.0 Referer:http://www.imike.me MyParam:Foo</span><br></pre></td></tr></table></figure><h2 id="放着先。。。。。。。。。占个位"><a href="#放着先。。。。。。。。。占个位" class="headerlink" title="放着先。。。。。。。。。占个位"></a>放着先。。。。。。。。。占个位</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git Branch Practice</title>
      <link href="/2019/04/08/Git-Branch-Practice/"/>
      <url>/2019/04/08/Git-Branch-Practice/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在弄一个东西，基本的功能已经弄好了，现在想再扩展一起其他功能，但这样势必会改动原有代码，我又不想破坏原有的代码逻辑，方便以后查看。记得Git有个分支工作流可以很好的满足我的需求(๑•̀ㅂ•́)و✧。emmm，很久没发文了，record一下吧。(ノへ￣、)</p></blockquote><h1 id="使用到的命令"><a href="#使用到的命令" class="headerlink" title="使用到的命令"></a>使用到的命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="comment"># 显示所有本地分支</span></span><br><span class="line">$ git branch &lt;new branch&gt; <span class="comment"># 创建新分支</span></span><br><span class="line">$ git checkout &lt;branch&gt; <span class="comment"># 切换到指定分支</span></span><br><span class="line">$ git branch -d &lt;branch&gt; <span class="comment"># 删除本地分支</span></span><br><span class="line">$ git push --<span class="built_in">set</span>-upstream origin &lt;branch&gt; <span class="comment"># 将本地分支与远程分支关联</span></span><br><span class="line">$ git push origin --delete &lt;branch&gt; <span class="comment"># 删除远程分支</span></span><br><span class="line"></span><br><span class="line">$ git tag -n <span class="comment"># 列出所有本地标签以及相关信息</span></span><br><span class="line">$ git tag &lt;tagname&gt; <span class="comment"># 基于最新提交创建标签</span></span><br><span class="line">&amp; git tag &lt;tagname&gt; -m <span class="string">"备注信息"</span> <span class="comment"># 基于最新提交创建含备注信息的标签</span></span><br><span class="line">$ git tag -d &lt;tagname&gt; <span class="comment"># 删除标签</span></span><br><span class="line">$ git push orign &lt;tagname&gt; <span class="comment"># 将指定信息推送到远程仓库</span></span><br><span class="line">$ git push --tags <span class="comment"># 推送所有标签到远程仓库</span></span><br></pre></td></tr></table></figure><h1 id="操作-操作"><a href="#操作-操作" class="headerlink" title="操作~操作"></a>操作~操作</h1><p><img src="https://img.vim-cn.com/00/950a7bad9cc5835194268fce6d40a444b7cfcc.png" alt="https://img.vim-cn.com/00/950a7bad9cc5835194268fce6d40a444b7cfcc.png"></p><p>emmm，顺便试试tag</p><p><img src="https://img.vim-cn.com/a4/26dbcd8ed54643c057193aa14d15ade7ef2358.png" alt="https://img.vim-cn.com/a4/26dbcd8ed54643c057193aa14d15ade7ef2358.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我与vim的亲密接触(ˉ▽￣～)</title>
      <link href="/2019/03/20/%E6%88%91%E4%B8%8Evim%E7%9A%84%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/"/>
      <url>/2019/03/20/%E6%88%91%E4%B8%8Evim%E7%9A%84%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>emmm，闲来无事，打算了解下神奇vim（用来zhuangbi）。在终端操作很帅(ˉ▽￣～)~~！<br>什么是vim？？Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p></blockquote><h1 id="vi-vim的使用"><a href="#vi-vim的使用" class="headerlink" title="vi/vim的使用"></a>vi/vim的使用</h1><p>vi/vim有三种模式：</p><ul><li><strong>命令模式</strong>：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。刚启动时就是这个模式。</li><li><strong>输入模式</strong>：正常的文本录入。</li><li><strong>末行模式</strong>：保存或退出文档，以及设置编辑环境。又可成为底线命令模式。</li></ul><a id="more"></a><p><img src="https://img.shan333.cn/images/2019/03/20/vim-vi-workmodel.png" alt="vim-vi-workmodel.png"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>命令模式常用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">dd</td><td align="center">删除（剪切）光标所在整行</td></tr><tr><td align="center">5dd</td><td align="center">删除（剪切）从光标处开始的5行</td></tr><tr><td align="center">yy</td><td align="center">复制光标所在的整行</td></tr><tr><td align="center">5yy</td><td align="center">复制从光标处开始的5行</td></tr><tr><td align="center">n</td><td align="center">显示搜索命令定位到的下一个字符串</td></tr><tr><td align="center">N</td><td align="center">显示搜索命令定位到的上一个字符串</td></tr><tr><td align="center">u</td><td align="center">撤销上一步的操作</td></tr><tr><td align="center">p</td><td align="center">将之前删除（dd）或复制（yy）过的数据粘贴到光标后面</td></tr></tbody></table><p>末行模式可用命令：</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">:w</td><td align="center">保存</td></tr><tr><td align="center">:q</td><td align="center">退出</td></tr><tr><td align="center">:q!</td><td align="center">强制退出（放弃对文档内容的修改）</td></tr><tr><td align="center">:wq!</td><td align="center">强制保存退出</td></tr><tr><td align="center">:set nu</td><td align="center">显示行号</td></tr><tr><td align="center">:set nonu</td><td align="center">不显示行号</td></tr><tr><td align="center">:命令</td><td align="center">执行该命令</td></tr><tr><td align="center">:整数</td><td align="center">跳转到该行</td></tr><tr><td align="center">:s/one/two</td><td align="center">将当前光标所在行的第一个one替换成two</td></tr><tr><td align="center">:s/one/two/p</td><td align="center">将当前光标所在行的所有one替换成two</td></tr><tr><td align="center">:%s/one/two/g</td><td align="center">将全文中的所有one替换成two</td></tr><tr><td align="center">?字符串</td><td align="center">在文本中从下到上搜索该字符串</td></tr><tr><td align="center">/字符串</td><td align="center">在文本中从上到下搜索该字符串</td></tr></tbody></table><h1 id="我与它的亲密接触。。。。。"><a href="#我与它的亲密接触。。。。。" class="headerlink" title="我与它的亲密接触。。。。。"></a>我与它的亲密接触。。。。。</h1><p><img src="https://img.shan333.cn/images/2019/03/20/_2019_03_21_00_34_28_680.gif" alt="_2019_03_21_00_34_28_680.gif"></p><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><ul><li>vim官网：<a href="https://www.vim.org/" target="_blank" rel="noopener">https://www.vim.org/</a></li><li>vim快捷键键位图：<a href="https://www.jianshu.com/p/8b986f572a61" target="_blank" rel="noopener">https://www.jianshu.com/p/8b986f572a61</a></li></ul><p><img src="https://img.shan333.cn/images/2019/03/20/1294928-20171207102042159-1872416815.jpg" alt="1294928-20171207102042159-1872416815.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy建立数据库模型之间的关系</title>
      <link href="/2019/03/20/SQLAlchemy%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2019/03/20/SQLAlchemy%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="常见关系："><a href="#常见关系：" class="headerlink" title="常见关系："></a>常见关系：</h1><ul><li>一对多关系</li><li>多对一关系</li><li>多对多关系</li><li>一对一关系</li></ul><h1 id="一对多关系（一个作者，多篇文章）"><a href="#一对多关系（一个作者，多篇文章）" class="headerlink" title="一对多关系（一个作者，多篇文章）"></a>一对多关系（一个作者，多篇文章）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 一对多关系，单作者-多文章，外键不可少</span></span><br><span class="line"><span class="comment">## 外键(ForeignKey)总在多的那边定义,关系(relationship)总在单的那边定义</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    phone = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    <span class="comment"># articles为关系属性(一个集合，可以像列表一样操作，在关系的出发侧定义</span></span><br><span class="line">    <span class="comment">## relationship()函数的第一个参数为关系另一侧的模型名称(Article)</span></span><br><span class="line">    articles = db.relationship(<span class="string">'Article'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">15</span>), index=<span class="literal">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line">    <span class="comment"># 传入ForeignKey的参数形式为："表名.字段名"</span></span><br><span class="line">    <span class="comment">## 模型类对应的表名由Flask-SQLAlchemy生成，默认为类名称的小写形式，多个单词通过下划线分隔</span></span><br><span class="line">    author_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'author.id'</span>)) <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段(author_id)和关系属性(articles)的命名没有限制</span></span><br><span class="line"><span class="comment">## 建立关系可通过操作关系属性进行</span></span><br><span class="line">&gt;&gt;&gt;shansan = Author(name=<span class="string">"shansan"</span>)</span><br><span class="line">&gt;&gt;&gt;hello = Article(title=<span class="string">"Hello world !"</span>)</span><br><span class="line">&gt;&gt;&gt;boy = Article(title=<span class="string">"Hello Boy !"</span>)</span><br><span class="line">&gt;&gt;&gt;db.session.add(shansan) <span class="comment"># 将创建的数据库记录添加到会话中</span></span><br><span class="line">&gt;&gt;&gt;db.session.add(hello)</span><br><span class="line">&gt;&gt;&gt;db.session.add(boy)</span><br><span class="line">&gt;&gt;&gt;shansan.articles.append(hello) <span class="comment"># 操作关系属性</span></span><br><span class="line">&gt;&gt;&gt;shansan.articles.append(boy)</span><br><span class="line">&gt;&gt;&gt;db.session.commit()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="基于一对多的双向关系（bidirectional-relationship）"><a href="#基于一对多的双向关系（bidirectional-relationship）" class="headerlink" title="基于一对多的双向关系（bidirectional relationship）"></a>基于一对多的双向关系（bidirectional relationship）</h2><p>在这里我们希望可以在Book类中存在这样一个属性：通过调用它可以获取对应的作者的记录，这类返回单个值的关系属性称为<strong>标量关系属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立双向关系时，关系两边都有关系函数</span></span><br><span class="line"><span class="comment"># 在关系函数中，我们使用back_populates参数连接对方，参数的值设置为关系另一侧的关系属性名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># back_populates的参数值为关系另一侧的关系属性名</span></span><br><span class="line">    books = db.relationship(<span class="string">'Book'</span>, back_populates=<span class="string">'writer'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Writer %r&gt;'</span> % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">50</span>), index=<span class="literal">True</span>)</span><br><span class="line">    writer_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'writer.id'</span>))</span><br><span class="line">    </span><br><span class="line">    writer = db.relationship(<span class="string">'Writer'</span>, back_populates=<span class="string">'books'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Book %r&gt;'</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置双向属性后，我们既可以通过集合属性操作关系，也可通过标量关系属性操作关系</span></span><br></pre></td></tr></table></figure><h1 id="多对一关系（多个市民都在同一个城市）"><a href="#多对一关系（多个市民都在同一个城市）" class="headerlink" title="多对一关系（多个市民都在同一个城市）"></a>多对一关系（多个市民都在同一个城市）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外键总在多的一侧定义</span></span><br><span class="line"><span class="comment">## 多对一关系中，外键和关系属性都在多的一侧定义</span></span><br><span class="line"><span class="comment">## 这里的关系属性是标量关系属性（返回单一数据）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Citizen</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    city_id = db.Column(db.Integer, db.ForeignKey(<span class="string">'city.id'</span>))</span><br><span class="line">    city = db.relationship(<span class="string">'City'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="一对一关系（国家和首都）"><a href="#一对一关系（国家和首都）" class="headerlink" title="一对一关系（国家和首都）"></a>一对一关系（国家和首都）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 一对一关系，将关系函数的uselist参数设为False，使得集合关系属性无法使用列表语义操作</span></span><br><span class="line"><span class="comment">## 这里使用的是一对一双向关系</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    capital = db.relationship(<span class="string">'Capital'</span>, uselist=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Capital</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    country_id= db.Column(db.Integer, db.ForeignKey(<span class="string">'country.id'</span>))</span><br><span class="line">    country = db.relationship(<span class="string">'Country'</span>)</span><br></pre></td></tr></table></figure><h1 id="多对多双向关系（老师和学生）"><a href="#多对多双向关系（老师和学生）" class="headerlink" title="多对多双向关系（老师和学生）"></a>多对多双向关系（老师和学生）</h1><ul><li>多对多关系的建立需要使用关联表（association table）。关联表不存储数据，只用来存储关系两侧模型的外键对应关系</li><li>定义关系两侧的关系函数时，需要添加一个<strong>secondary</strong>参数，值设为关联表的名称 </li><li>关联表由使用db.Table类定义，传入的第一个参数为关联表的名称</li><li>我们在关联表中将多对多的关系分化成了两个一对多的关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 多对多关系，使用关联表（association table），关联表由db.Table定义</span></span><br><span class="line"><span class="comment">## 关系函数需要设置secondary参数，值为关系表名</span></span><br><span class="line"></span><br><span class="line">association_table = db.Table(<span class="string">'association_table'</span>,</span><br><span class="line">                             db.Column(<span class="string">'student_id'</span>, db.Integer, db.ForeignKey(<span class="string">'teacher.id'</span>)),</span><br><span class="line">                             db.Column(<span class="string">'teacher_id'</span>, db.Integer, db.ForeignKey(<span class="string">'student.id'</span>))</span><br><span class="line">                             )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    grade = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    teachers = db.relationship(<span class="string">'Teacher'</span>, secondary=association_table,back_populates=<span class="string">'students'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">70</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    office = db.Column(db.String(<span class="number">20</span>))</span><br><span class="line">    students = db.relationship(<span class="string">'Student'</span>, secondary=association_table, back_populates=<span class="string">'teachers'</span>)</span><br></pre></td></tr></table></figure><h1 id="常用的SQLAlchemy关系函数参数和常用的SQLAlchemy关系记录加载方式（lazy参数可选值）"><a href="#常用的SQLAlchemy关系函数参数和常用的SQLAlchemy关系记录加载方式（lazy参数可选值）" class="headerlink" title="常用的SQLAlchemy关系函数参数和常用的SQLAlchemy关系记录加载方式（lazy参数可选值）"></a>常用的SQLAlchemy关系函数参数和常用的SQLAlchemy关系记录加载方式（lazy参数可选值）</h1><ul><li>使用关系函数定义的属性不是数据库字段，而是类似于特定的查询函数</li><li>当关系属性被调用时，关系函数会加载相应的记录</li></ul><p><img src="https://s2.ax1x.com/2019/03/20/AKnfCq.png" alt="AKnfCq.png"></p><p><img src="https://s2.ax1x.com/2019/03/20/AKn5vT.png" alt="AKn5vT.png"></p><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">http://www.sqlalchemy.org/</a></p><p><a href="https://github.com/sqlalchemy/sqlalchemy" target="_blank" rel="noopener">https://github.com/sqlalchemy/sqlalchemy</a></p><p><a href="https://github.com/mitsuhiko/flask-sqlalchemy" target="_blank" rel="noopener">https://github.com/mitsuhiko/flask-sqlalchemy </a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask的请求钩子与上下文简记</title>
      <link href="/2019/03/16/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E9%92%A9%E5%AD%90%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%80%E8%AE%B0/"/>
      <url>/2019/03/16/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E9%92%A9%E5%AD%90%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="请求钩子-Hook"><a href="#请求钩子-Hook" class="headerlink" title="请求钩子(Hook)"></a>请求钩子(Hook)</h1><blockquote><p>在客户端和服务器交互的过程中，有些准备工作或扫尾工作需要处理，比如：在请求开始时，建立数据库连接；在请求结束时，指定数据的交互格式。为了让&gt;每个视图函数避免编写重复功能的代码，Flask提供了通用设施的功能，即请求钩子。通过请求钩子，我们可以对请求进行预处理(preprocessing)和后处理&gt;(postprocessing)。</p></blockquote><p>Flask的请求钩子通过装饰器实现，每个钩子可以注册任意多个处理函数，默认的五种请求钩子如下:</p><table><thead><tr><th align="center">钩子</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">before_first_request</td><td align="left">注册一个函数，在处理请求前运行</td></tr><tr><td align="center">before_request</td><td align="left">注册一个函数，在处理每个请求前运行</td></tr><tr><td align="center">after_request</td><td align="left">注册一个函数，如果有未处理的一场抛出。会在每个请求结束后运行</td></tr><tr><td align="center">teardown_request</td><td align="left">注册一个函数，即使有未处理的异常抛出，会在每个请求介绍后执行。如果发生异常，会传入异常对象作为参数注册到函数中</td></tr><tr><td align="center">after_this_request</td><td align="left">在视图函数内注册一个函数，在这个请求结束后运行</td></tr></tbody></table><a id="more"></a><p>假如我们创建了三个视图函数A、B、C，其中视图C使用了after_this_request钩子，那么当请求A进入后，整个请求处理周期的请求处理函数调用流程如图:</p><p><img src="https://s2.ax1x.com/2019/03/15/AEdgN4.png" alt="AEdgN4.png"></p><h1 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h1><blockquote><p>什么是上下文？上下文相当于一个容器，它保存了程序运行过程中的一些信息，它是当前环境的一个快照(snapshot)。<br>Flask中有两种上下文，程序上下文(application context)和请求上下文(request context)。<br>程序上下文中包含了程序运行所必须的信息；请求上下文里包含了请求的各种信息，比如请求的URL、HTTP方法等</p></blockquote><h2 id="上下文全局变量"><a href="#上下文全局变量" class="headerlink" title="上下文全局变量"></a>上下文全局变量</h2><p>我们知道，Flask将请求报文封装在request对象中。按照一般的思路，如果我们要在视图函数中使用它，就得把它作为参数传入视图函数，就像我们接收URL变量一样。但这样就会导致大量的重复，而且增加了的程序的负担。<br>不一般的是，我们可以从Flask导入一个全局的request变量，在视图函数中直接调用request的属性获取数据。这是为什么？因为Flask会在每个请求产生后后自动激活当前请求的上下文，激活请求上下文后，request被临时设置为全局可访问。在每个请求结束后，Flask就会销毁对应的请求上下文。</p><p>Flask提供的四个上下文全局变量如下：</p><table><thead><tr><th align="center">变量名</th><th align="center">上下文类别</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">current_app</td><td align="center">程序上下文</td><td align="left">指向处理请求的当前程序实例</td></tr><tr><td align="center">g</td><td align="center">程序上下文</td><td align="left">替代Python的全局变量用法，确保仅在当前请求可用，用于存储全局数据，每次请求都会重设</td></tr><tr><td align="center">request</td><td align="center">请求上下文</td><td align="left">封装客户端发出的请求报文数据</td></tr><tr><td align="center">session</td><td align="center">请求上下文</td><td align="left">用于记住请求之间的数据，通过签名的Cookie实现</td></tr></tbody></table><ul><li>不同的视图函数中，request对象都表示和视图函数对应的请求，也就是当前请求</li><li>程序存在多个程序实例的情况，使用current_app可获取对应的实例</li></ul><h2 id="上下文的激活"><a href="#上下文的激活" class="headerlink" title="上下文的激活"></a>上下文的激活</h2><p><strong>请求进入时，Flask会自动激活请求上下文，此时程序上下文也被自动激活。请求处理完毕后，请求上下文和程序上下文也会自动销毁。两者具有相同的生命周期。</strong></p><ul><li>Flask自动激活上下文的情况：<ul><li>使用<code>flask run</code>命令启动程序时</li><li>使用旧的<code>app.run()</code>方法启动程序时</li><li>执行使用<code>@app.cli.command()</code>装饰器注册的flask命令时</li><li>使用<code>flask shell</code>命令启动Python Shell时</li></ul></li></ul><ul><li>手动激活的方法:<ul><li>使用with语句，程序上下文对象可通过app.app_context()获取</li><li>使用push（）方法激活程序上下文</li><li>请求上下文可以通过test_request_context()方法临时创建</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from app import app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from flask import current_app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; with app.app_context():</span></span><br><span class="line">    ... current_app.name</span><br><span class="line">'app'</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from app import app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from flask import current_app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; app_ctx = app.app_context()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; app_ctx.push()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; current_app.name</span></span><br><span class="line">'app'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; app_ctx.pop()</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from app import app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from flask import request</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; with app.test_request_context(<span class="string">'/hello'</span>):</span></span><br><span class="line">...     request.method</span><br><span class="line">'GET'</span><br></pre></td></tr></table></figure><p>参考：<a href="https://book.douban.com/subject/30310340/" target="_blank" rel="noopener">https://book.douban.com/subject/30310340/</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地项目推送到GitHub远程仓库</title>
      <link href="/2019/03/08/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2019/03/08/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="如何将本地项目推送到Github"><a href="#如何将本地项目推送到Github" class="headerlink" title="如何将本地项目推送到Github"></a>如何将本地项目推送到Github</h1><blockquote><p>Tip：在本地要安装好Git，官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p></blockquote><p><img src="https://s2.ax1x.com/2019/03/08/kzni4K.png" alt="kzni4K.png"></p><blockquote><p>一个学习Git的好地方：<a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a></p></blockquote><blockquote><p>在线闯关实战，边练边学的好地方：<a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p></blockquote><h2 id="方法一：使用https推送"><a href="#方法一：使用https推送" class="headerlink" title="方法一：使用https推送"></a>方法一：使用https推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤</span></span><br><span class="line"><span class="comment"># 1.创建一个目录</span></span><br><span class="line">mkdir Test</span><br><span class="line"><span class="comment"># 2.将当前目录变为git管理仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 3.将文件添加到版本库，这里将目录下的所有文件都添加进去了</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 4.告诉git将文件提交到仓库</span></span><br><span class="line">git commit -m <span class="string">"first-commit"</span></span><br><span class="line"><span class="comment"># 5.将当前仓库与远程仓库关联</span></span><br><span class="line">git remote add origin 远程仓库的https地址 <span class="comment"># eg: git remote add https://github.com/ssmath/Test.git</span></span><br><span class="line"><span class="comment"># 6.将仓库内master分支的所有内容推送到远程仓库,这里会使用到Github的账号密码</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://s2.ax1x.com/2019/03/08/kzusFP.png" alt="kzusFP.png"></p><p><img src="https://s2.ax1x.com/2019/03/08/kzugSS.png" alt="kzugSS.png"></p><h2 id="方法二：使用ssh推送"><a href="#方法二：使用ssh推送" class="headerlink" title="方法二：使用ssh推送"></a>方法二：使用ssh推送</h2><ol><li>生成ssh密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your email address"</span></span><br><span class="line"><span class="comment"># eg: ssh-keygen -t rsa -C "1329441308@qq.com"</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/03/08/kzKcA1.png" alt="kzKcA1.png"></p><ol start="2"><li>找到生成的文件，复制id_rsa.pub文件中的内容，文件一般在用户目录下的.ssh目录中</li></ol><p><img src="https://s2.ax1x.com/2019/03/08/kzMw5t.png" alt="https://s2.ax1x.com/2019/03/08/kzMw5t.png"></p><ol start="3"><li>使用密钥与远程仓库配对，检验能否成功通讯</li></ol><p><img src="https://s2.ax1x.com/2019/03/08/kzMdUI.png" alt="https://s2.ax1x.com/2019/03/08/kzMdUI.png"></p><pre><code>ssh -T git@github.com  # 检验能否成功通讯</code></pre><p><img src="https://s2.ax1x.com/2019/03/08/kzMRVs.png" alt="kzMRVs.png"></p><ol start="4"><li>推送本地文件到github</li></ol><p><img src="https://s2.ax1x.com/2019/03/08/kzlilT.png" alt="kzlilT.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置Pipenv工作环境</title>
      <link href="/2019/03/03/vscode%E9%85%8D%E7%BD%AEPipenv%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/03/03/vscode%E9%85%8D%E7%BD%AEPipenv%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="让vscode使用Pipenv工作环境"><a href="#让vscode使用Pipenv工作环境" class="headerlink" title="让vscode使用Pipenv工作环境"></a>让vscode使用Pipenv工作环境</h1><h2 id="1、查看Pipenv的位置"><a href="#1、查看Pipenv的位置" class="headerlink" title="1、查看Pipenv的位置"></a>1、查看Pipenv的位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 先激活Pipenv环境</span><br><span class="line">pipenv shell</span><br><span class="line"># 获取当前虚拟环境的位置</span><br><span class="line">pipenv --venv</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/yeshan333/blog_images/master/posts/0078bOVFgy1g0pe3ndazpj30ft01l746.jpg" alt=""></p><h2 id="2、打开setting-json配置文件"><a href="#2、打开setting-json配置文件" class="headerlink" title="2、打开setting.json配置文件"></a>2、打开setting.json配置文件</h2><ul><li><p>Ctrl+Shift+P，输入settings，选择Open Settings(JSon)</p></li><li><p>将之前得到的Pipenv环境路径添加进去</p><p>  “python.venvPath”: “C:\Users\Algorithm\.virtualenvs”</p></li></ul><p><img src="https://raw.githubusercontent.com/yeshan333/blog_images/master/posts/0078bOVFgy1g0pdwtnoqtj30gu08rq3k.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/yeshan333/blog_images/master/posts/0078bOVFgy1g0pdyyyuvqj30m405pjrh.jpg" alt=""></p><a id="more"></a><h2 id="3、重启vscode"><a href="#3、重启vscode" class="headerlink" title="3、重启vscode"></a>3、重启vscode</h2><p><img src="https://raw.githubusercontent.com/yeshan333/blog_images/master/posts/0078bOVFgy1g0pe1hhuo1j30sg0lc770.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000017558652" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017558652</a></p><p><a href="https://blog.csdn.net/weixin_34294649/article/details/87518937" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34294649/article/details/87518937</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy New Year !</title>
      <link href="/2019/02/05/Happy-New-Year/"/>
      <url>/2019/02/05/Happy-New-Year/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C：printf(&quot;Happy New Year&quot;);</span><br><span class="line">C++ : cout&lt;&lt;&quot;Happy New Year&quot;;</span><br><span class="line">Objectivec: NSLog(@&quot;Happy New Year!&quot;);</span><br><span class="line">QBasic : Print &quot;Happy New Year&quot;</span><br><span class="line">Asp : Response.Write &quot;Happy New Year&quot;</span><br><span class="line">PHP : echo &quot;Happy New Year&quot;;</span><br><span class="line">Ruby: puts &quot;Happy New Year!&quot;</span><br><span class="line">JavaScript: alert(&quot;Happy New Year&quot;)</span><br><span class="line">VBScript:MsgBox &quot;Happy New Year&quot;</span><br><span class="line">JavaScript: document.write(&quot;Happy New Year&quot;)</span><br><span class="line">JavaScript: console.log(&#39; Happy New Year&#39;);</span><br><span class="line">xml &lt;TextView android:text&#x3D;&quot;Happy New Year! &quot; &#x2F;&gt; </span><br><span class="line">Delphi: ShowMessage(&#39;Happy New Year！&#39;);</span><br><span class="line">VB: Msg(&quot;Happy New Year！&quot;)</span><br><span class="line">VC: MessageBox(&quot;Happy New Year！&quot;);</span><br><span class="line">shell: echo Happy New Year</span><br><span class="line">perl: print &#39;Happy New Year&#39;</span><br><span class="line">java: System.out.println(&quot;Happy New Year&quot;);</span><br><span class="line">LISP:(format t &quot;Happy New Year!~%&quot;)</span><br><span class="line">powerBuilder:messagebox（&quot;Happy New Year&quot;)</span><br><span class="line">C#：System.Console.WriteLine(&quot;Happy New Year!&quot;)</span><br><span class="line">COBOL:DISPLAY &#39;Happy New Year!&#39;</span><br><span class="line">Python:print(&quot;Happy New Year！&quot;)</span><br><span class="line">aswing:JOptionPane.showMessageDialog(&quot;happy&quot;,&quot;Happy New Year！&quot;)</span><br><span class="line">flex:Alert.show(&quot;Happy New Year！&quot;);</span><br><span class="line">Clojure: (println &quot;Happy New Year&quot;) </span><br><span class="line">verilog&#x2F;systemverilog&#x2F;e $display(&quot;Happy New Year&quot;) </span><br><span class="line">as:trace(&quot;Happy New Year！&quot;);</span><br></pre></td></tr></table></figure><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=42909530&cid=75244190&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML&amp;&amp;CSS(划水~~~)</title>
      <link href="/2019/01/22/HTML-CSS-%E5%88%92%E6%B0%B4/"/>
      <url>/2019/01/22/HTML-CSS-%E5%88%92%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-超文本标记语言"><a href="#HTML-超文本标记语言" class="headerlink" title="HTML(超文本标记语言)"></a><a href="http://www.w3school.com.cn/html/index.asp" target="_blank" rel="noopener">HTML</a>(超文本标记语言)</h1><p>HTML标签不区分大小写。</p><h2 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h2><ul><li>ID属性指定一个标识符，用于唯一标识页面元素，这些标识符主要供Javascript和CSS使用</li><li>class属性是一个全局属性，可用于建立元素编组。可以给多个元素指定相同的class属性，以便在CSS或Javascript中将这些元素作为一个编组来引用它们</li><li>style属性用于定义标签的样式。任何标签中都可以指定属性style。使用style属性可以为标签指定一个或多个样式规则，** 在style定义多条规则的方法是用分号将他们分开 **</li></ul><a id="more"></a><h2 id="HTML的列表"><a href="#HTML的列表" class="headerlink" title="HTML的列表"></a>HTML的列表</h2><p>列表标签的特征：</p><blockquote><ol><li>每个列表都有一个指定列表类型的外部元素。</li><li>每个列表项都有自己的标签。</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">无序列表：<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">有序列表：<span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">定义列表：<span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">词汇列表的列表项为<span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">其他列表的列表项为<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="有序列表（ol）"><a href="#有序列表（ol）" class="headerlink" title="有序列表（ol）"></a>有序列表（ol）</h3><p>有序列表默认的编号为罗马数字，可以使用属性style指定列表的编号样式，使用CSS属性list-style-type进行修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">style</span>=<span class="string">"list-style-type: upper-roman"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>罗马假日<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>平凡的世界<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>封神榜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无间道<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol style="list-style-type: upper-roman">    <li>罗马假日</li>    <li>平凡的世界</li>    <li>封神榜</li>    <li>无间道</li></ol><p><strong><u>有序列表的编号样式</u></strong></p><table><thead><tr><th align="left">CSS属性list-style-type</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">decimal(默认)</td><td align="left">标准阿拉伯数字</td></tr><tr><td align="left">lower-alpha</td><td align="left">小写字母</td></tr><tr><td align="left">upper-alpha</td><td align="left">大写字母</td></tr><tr><td align="left">lower-roman</td><td align="left">小写罗马数字</td></tr><tr><td align="left">upper-roman</td><td align="left">大写罗马数字</td></tr></tbody></table><h3 id="无序列表（ul）"><a href="#无序列表（ul）" class="headerlink" title="无序列表（ul）"></a>无序列表（ul）</h3><p><strong><u>无序列表编号样式</u></strong></p><table><thead><tr><th align="left">CSS属性list-style-type</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">disc</td><td align="left">圆盘，默认样式</td></tr><tr><td align="left">square</td><td align="left">实心正方形</td></tr><tr><td align="left">circle</td><td align="left">空心圆</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"list-style-type: square"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>正方体<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>长方体<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>圆柱体<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul style="list-style-type: square">    <li>正方体</li>    <li>长方体</li>    <li>圆柱体</li></ul><h3 id="定义列表（dl）"><a href="#定义列表（dl）" class="headerlink" title="定义列表（dl）"></a>定义列表（dl）</h3><p>定义列表的每个列表项都包含两部分</p><ul><li>术语，标签为<code>&lt;dt&gt;</code></li><li>术语的定义，标签为<code>&lt;dt&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>超文本标记语言，标准通用标记语言下的一个应用。是 网页制作必备的编程语言。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>HTML</dt>    <dd>超文本标记语言，标准通用标记语言下的一个应用。是 网页制作必备的编程语言。</dd>    <dt>CSS</dt>    <dd>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。</dd></dl><h2 id="链接和锚"><a href="#链接和锚" class="headerlink" title="链接和锚"></a>链接和锚</h2><h3 id="链接到另一个页面的特定位置"><a href="#链接到另一个页面的特定位置" class="headerlink" title="链接到另一个页面的特定位置"></a>链接到另一个页面的特定位置</h3><p>** 方法： 使用锚，即在链接的URL中指定要链接到的元素的ID **</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">另一个页面2.html：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"part4"</span>&gt;</span>Part four<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">当前页面1.html：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"2.html#part4"</span>&gt;</span>go to part four<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接到当前页面的其他元素"><a href="#链接到当前页面的其他元素" class="headerlink" title="链接到当前页面的其他元素"></a>链接到当前页面的其他元素</h3><p>** 方法: 省略页面名就行，使用<code>#</code>号和<code>ID</code> **</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">go to<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#section5"</span>&gt;</span>the fifth setion<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h2><p>span标签和style属性结合使用时，可取代很多标签，效果很nice</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is some<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"text-decoration: underline"</span>&gt;</span> underline text<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is some<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-style:oblique"</span>&gt;</span> oblique text<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is some<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"text-decoration:line-through"</span>&gt;</span>line-through text<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is some<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight:120"</span>&gt;</span> bolder text<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here is some<span style="text-decoration: underline"> underline text</span></p><p>Here is some<span style="font-style:oblique"> oblique text</span></p><p>Here is some<span style="text-decoration:line-through">line-through text</span></p><p>Here is some<span style="font-weight:120"> bolder text</span></p><h2 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h2><table><thead><tr><th align="left">标签</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">&lt;table&gt;&lt;/table&gt;</td><td align="left">定义表格</td></tr><tr><td align="left">&#60;caption&#62;&#60;/caption&#62;</td><td align="left">创建表题(可选)</td></tr><tr><td align="left">&#60;tr&#62;&#60;/tr&#62;</td><td align="left">定义一个表格行，其中可包含表头单元格或数据单元格</td></tr><tr><td align="left">&#60;th&#62;&#60;/th&#62;</td><td align="left">定义一个表头单元格。表头单元格得内容通常显示为粗体，且在水平和竖直方向上都居中</td></tr><tr><td align="left">&#60;td&#62;&#60;/td&#62;</td><td align="left">定义一个数据单元格。数据单元格得内容通常显示为常规字体，在水平方向上左对齐，而且在垂直方向上居中</td></tr><tr><td align="left">&#60;colgroup&#62;&#60;/colgroup&#62;</td><td align="left">将一列或多列编组</td></tr><tr><td align="left">&#60;col&#62;&#60;/col&#62;</td><td align="left">用于定义表格列属性</td></tr><tr><td align="left">&#60;thead&#62;&#60;/thead&#62;</td><td align="left">创建表示表头的行编组。一个表格只能有一个表头</td></tr><tr><td align="left">&#60;tfoot&#62;&#60;/tfoot&#62;</td><td align="left">创建表示表尾的行编组。一个表格只能有一个表尾，它必须在表体前定义</td></tr><tr><td align="left">&#60;tbody&#62;&#60;/tbody&#62;</td><td align="left">定义一个或多个表示表体的行编组。一个表格可包含多个表头部分</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Table<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">style</span>=<span class="string">"width: 100%;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Science and Mathematic Class Schedules<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">colgroup</span> <span class="attr">style</span>=<span class="string">"width: 20%; text-align: center; vertical-align: top; background-color: #fcf;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">colgroup</span> <span class="attr">span</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"width: 40%; vertical-align: top; background-color: #ccf;"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- span属性指定了列编组包含的列数，默认为1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span> <span class="attr">style</span>=<span class="string">"background-color: red;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Room<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">style</span>=<span class="string">"background-color: yellow;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Biology<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Science Wing, Room 102<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8:00 AM to 9:45 AM<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Science<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Science Wing, Room 110<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>9:50 AM to 11:30 AM<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Physics<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Science Wing, Room 107<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1:00 PM to 2:45 PM<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">style</span>=<span class="string">"background-color: gray;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Geometry<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mathematics Wing, Room 236<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8:00 AM to 9:45 Am<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Algebra<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mathematics Wing, Room 239<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>9:50 AM to 11:30 AM<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Trigonometry<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mathematics Wing, Room 245<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1:00 PM to 2:45 PM<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- tfoot一般放在tbody之前 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span> <span class="attr">style</span>=<span class="string">"background-color: blue;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Room<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PWucSsn.png" alt=""></p><ul><li>text-align：指定水平对齐方式，可能取值：left、center、right</li><li>vertical-align：指定垂直对齐方式，可能取值：top、middle、bottom</li></ul><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><table><thead><tr><th align="left">属性</th><th align="left">适用元素</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">border</td><td align="left">table</td><td align="left">指定表格是否带边框，默认不带。这个属性指定了表格边框的宽度</td></tr><tr><td align="left">span</td><td align="left">col和colgroup</td><td align="left">指定列编组包含多少列，必须是大于0的整数</td></tr><tr><td align="left">colspan</td><td align="left">th或td</td><td align="left">指定单元格将向右延伸横跨多少列</td></tr><tr><td align="left">rowspan</td><td align="left">th或td</td><td align="left">指定单元格将向下延伸横跨多少行</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>colspan and rowspan<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"10"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>跨行跨列表格<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 跨列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 跨行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>辣椒<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛角椒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>灯笼椒<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/KsbLpBt.png" alt=""></p><h2 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h2><table><thead><tr><th align="center">标签/属性</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center">&#60;form&#62;</td><td align="left">创建HTML表单。一个文档可包含多个表单，但是不可嵌套</td></tr><tr><td align="center">action</td><td align="left">标签&#60;form&#62;的一个属性，使用URL路径指定负责处理表单数据的服务器脚本</td></tr><tr><td align="center">enctype</td><td align="left">&#60;form&#62;的一个属性，指定将表单数据发送给服务器前如何对其进行编码</td></tr><tr><td align="center">method</td><td align="left">&#60;form&#62;的一个属性，指定如何将表单数据发送给服务器</td></tr><tr><td align="center">&#60;input&#62;</td><td align="left">一个用于创建表单控件以收集用户输入的信息</td></tr><tr><td align="center">&#60;button&#62;</td><td align="left">创建一个可包含HTML内容的按钮</td></tr><tr><td align="center">&#60;textarea&#62;</td><td align="left">创建多行的文本输入字段</td></tr><tr><td align="center">&#60;select&#62;</td><td align="left">创建一个菜单或可滚动列表，列表项由&#60;option&#62;创建</td></tr><tr><td align="center">&#60;progress&#62;</td><td align="left">显示任务完成进度的进度条</td></tr><tr><td align="center">&#60;label&#62;</td><td align="left">创建与表单控件配套的标签</td></tr><tr><td align="center">&#60;fieldset&#62;</td><td align="left">将表单控件编组</td></tr><tr><td align="center">type</td><td align="left">标签&#60;input的一个属性&#62;，指定了表单控件的类型，可能取值：<br>text：创建一个单行文本输入字段<br>password：&ensp;创建一个可遮挡用户输入的单行文本输入字段<br>hidden：&ensp;创建一个隐藏的表单控件<br>checkbox：&ensp;创建一个复选框<br>search：&ensp;创建一个搜索关键字输入字段<br>file：&ensp;创建一个文件上传控件让用户能够选择要随表单数据一起上传到服务器的文件<br>color、date、datetime、email、url、reset等等</td></tr></tbody></table><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><table><thead><tr><th align="left">items</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">HTML语义标签</td><td align="left"><a href="http://www.w3school.com.cn/html/html5_semantic_elements.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/html/html5_semantic_elements.asp</a></td></tr><tr><td align="left">pre标签</td><td align="left"><a href="http://www.w3school.com.cn/tags/tag_pre.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/tag_pre.asp</a></td></tr><tr><td align="left">HTML字符实体</td><td align="left"><a href="http://www.w3school.com.cn/html/html_entities.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/html/html_entities.asp</a></td></tr></tbody></table><hr/><h1 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS(层叠样式表)"></a><a href="http://www.w3school.com.cn/css/css_jianjie.asp" target="_blank" rel="noopener">CSS</a>(层叠样式表)</h1><p>样式表由一系列规则组成，大致结构如下</p><pre><code>selector { property1: value1; property }</code></pre><ul><li>每条规则都以选择器(selector)打头,后面是一系列有花括号括起来的属性(property)和值(value)。</li><li>每个选择器可以指定任意数量的属性,但属性之间必须用分号分隔。</li><li>在最后一个属性/值对后面,可以有分号,也可以没有。</li></ul><h2 id="选择器-selector"><a href="#选择器-selector" class="headerlink" title="选择器(selector)"></a>选择器(selector)</h2><blockquote><p>任何标签都可以用作CSS选择器，与这种选择器相关联的规则将应用于页面中所有指定的元素</p></blockquote><p>可使用单个选择器将样式应用于多种元素，元素间用逗号间隔，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这个规则与上面那个等价</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上下文选择器"><a href="#上下文选择器" class="headerlink" title="上下文选择器"></a>上下文选择器</h3><p>&ensp;&ensp;使用上下文选择器可以将样式应用于嵌套在指定元素内的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面那条规则应用于嵌套在有序列表中的em元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cite</span> &#123; <span class="attribute">font-style</span>: inherit; <span class="attribute">font-weight</span>: <span class="number">200</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">cite</span> &#123; <span class="attribute">font-style</span>: italic; <span class="attribute">font-weight</span>: <span class="number">500</span>;&#125;</span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">cite</span>&#123; <span class="attribute">font-style</span>: normal; <span class="attribute">font-weight</span>: bolder;&#125;</span><br></pre></td></tr></table></figure><p>第一条为应用于所有cite标签的规则<br>对于嵌套的cite标签，后两条规则说明了他们应该应用的样式</p><h3 id="类-amp-amp-ID-选择器"><a href="#类-amp-amp-ID-选择器" class="headerlink" title="类 &amp;&amp; ID 选择器"></a>类 &amp;&amp; ID 选择器</h3><ul><li>将选择器应用于类，使用<code>.</code>+<code>类名</code></li><li>将选择器应用于ID，使用<code>#</code>+<code>ID</code>，ID是独一无二的</li><li>给多个元素指定相同的样式可以使用类名，给单个元素指定样式可以使用ID</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用类型名 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shan"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line">.shan &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ------------------------------------ --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用ID --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>Copyright 2019<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CSS --&gt;</span></span><br><span class="line">#footer &#123;</span><br><span class="line">    font-size: small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">span</span><span class="selector-class">.important</span> &#123; <span class="attribute">fot-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure><p>这个选择器只与p标签，属于important类的span标签匹配,与下面的span标签不匹配</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph. <span class="tag">&lt;<span class="name">em</span>&gt;</span>This is an <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"important"</span>&gt;</span>important<span class="tag">&lt;/<span class="name">span</span>&gt;</span> sentence.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的span为p的孙子</p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p><a href="http://www.w3school.com.cn/css/css_pseudo_classes.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/css/css_pseudo_classes.asp</a></p><p>锚伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;<span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;<span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;<span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;<span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><blockquote><p><a href="http://www.w3school.com.cn/css/css_selector_descendant.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/css/css_selector_descendant.asp</a></p></blockquote><h2 id="CSS度量单位"><a href="#CSS度量单位" class="headerlink" title="CSS度量单位"></a>CSS度量单位</h2><blockquote><p><a href="http://www.w3school.com.cn/cssref/css_units.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/css_units.asp</a></p></blockquote><h2 id="CSS颜色"><a href="#CSS颜色" class="headerlink" title="CSS颜色"></a>CSS颜色</h2><blockquote><p><a href="http://www.w3school.com.cn/cssref/css_colors.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/css_colors.asp</a></p></blockquote><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src="https://s2.ax1x.com/2019/01/22/kki3LT.gif" alt="kki3LT.gif"></p><ul><li>element: 元素/内容</li><li>padding: 内边距</li><li>border: 边框</li><li>margin: 外边距</li></ul><h3 id="边框的属性"><a href="#边框的属性" class="headerlink" title="边框的属性"></a>边框的属性</h3><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">border-style</td><td align="left">指定显示的边框类型。可能取值包括：none、dotted、dashed、solid、double、groove、ridge、inset、outset、inherit。</td></tr><tr><td align="left">border-width</td><td align="left">指定边框的宽度，单位通常为像素(px)。</td></tr><tr><td align="left">border-color</td><td align="left">指定边框颜色。</td></tr></tbody></table><p>同时设置多个边框属性时，形式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">selector</span> &#123; <span class="attribute">border</span>: style width color; &#125;</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">border</span>: dashed <span class="number">3px</span> red; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Bcl26OF.png" alt=""></p><h3 id="内边距和外边距"><a href="#内边距和外边距" class="headerlink" title="内边距和外边距"></a>内边距和外边距</h3><ul><li>内边距(padding)是边框里面的空白区域</li><li>外边距(margin)是边框外面的空白区域</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.outer</span> &#123; <span class="attribute">border</span>: <span class="number">2px</span> solid black; &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span> &#123; </span></span><br><span class="line">            border: 2px dotted black;</span><br><span class="line">            padding: 15px;</span><br><span class="line">            margin: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    工程狮</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            攻城狮（谐音）工程师，来源于腾讯QQ手机管家于2012年3月1日16:53在发布了一条微博：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            声称腾讯公司一名保安经过一层层技术面试进入了腾讯研究院，成为一名攻城狮（工程师）。<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            这种事儿看起来相信很多人的第一反应都是恶搞，不过不久，腾讯老大马化腾亲自出面，核实了这一事件的真实性，并且称这是个“很励志的故事”。<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/w4RwOST.png" alt=""></p><h3 id="内容-element-盒子"><a href="#内容-element-盒子" class="headerlink" title="内容(element)盒子"></a>内容(element)盒子</h3><ul><li>块式盒子</li><li>内嵌盒子</li></ul><p>块级元素前后都换行，而内嵌元素的尺寸取决于其包含的内容以及外边距、内边距和边框的设置。CSS提供了属性<code>display</code>来修改元素的默认行为，属性display的可能取值有三个:block、inline和none。</p><p><img src="https://i.imgur.com/QAAOmAT.png" alt=""></p><p>边框显示了在样式表中指定的盒子的尺寸。但文本太多的时候，盒子可能无法容纳，多出来的文本可能会跑到边框的下方。这时，可以通过CSS属性<code>overflow</code>告诉浏览器要如何做。overflow的可能取值包括:visible(默认)、hidden、scroll、auto和inherit。</p><p><img src="https://i.imgur.com/O07gEYV.png" alt=""></p><p><img src="https://i.imgur.com/sqVTUKQ.png" alt=""></p><h3 id="浮动（修改块级元素的排列方式）"><a href="#浮动（修改块级元素的排列方式）" class="headerlink" title="浮动（修改块级元素的排列方式）"></a>浮动（修改块级元素的排列方式）</h3><ul><li>属性float，指出浮动位置，取值：right、left、none</li><li>属性clear，消除浮动的影响，取值：none、left、right、both</li></ul><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="html,result" data-user="yeshan333" data-slug-hash="BMaWem" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="1">  <span>See the Pen <a href="https://codepen.io/yeshan333/pen/BMaWem/" target="_blank" rel="noopener">  1</a> by Mr.Ye (<a href="https://codepen.io/yeshan333" target="_blank" rel="noopener">@yeshan333</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><img src="https://i.imgur.com/g69xTsU.png" alt=""></p><p>&ensp;&ensp;浮动的p元素移到了页面右边，而第二个段落出现在它的左边。通过将属于right类的元素p的样式属性float设置为right，指出了页面其他元素应沿元素绕排。我们将第三个段落的clear属性设置为both，消除了前面浮动的影响。</p><p>如果想要将第二段浮动到第一段的下方，可设置第二段的属性float为right，属性clear设置为right。仅仅设置float属性时，两个段落会并排。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">clear</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/OjShnIP.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jinja2语法小记</title>
      <link href="/2019/01/09/Jinja2%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
      <url>/2019/01/09/Jinja2%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="jinja2模板语法小记"><a href="#jinja2模板语法小记" class="headerlink" title="jinja2模板语法小记"></a>jinja2模板语法小记</h1><blockquote><p><a href="http://docs.jinkan.org/docs/jinja2/templates.html" target="_blank" rel="noopener">Jinja2模板中文文档</a></p></blockquote><h2 id="三种常见界定符"><a href="#三种常见界定符" class="headerlink" title="三种常见界定符"></a>三种常见界定符</h2><ol><li>表达式<br>{{ ... }}</li></ol><p>用于装载字符串、变量、函数调用等</p><ol start="2"><li>语句<br>{% ... %}</li></ol><p>用于装载控制语句，比如if判断、for循环等</p><ol start="3"><li>注释<br>{# ... #}</li></ol><p>用于装载一个注释，模板渲染的时候会被忽略掉</p><a id="more"></a><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>在模板中，我们可以使用“<strong>.</strong>”获取变量的属性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user = &#123;</span><br><span class="line"><span class="string">'username'</span> : <span class="string">'shansan'</span>,</span><br><span class="line"><span class="string">'bio'</span>: <span class="string">'我佛了'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果user为传入模板中的字典变量，则我们可通过”<strong>.</strong>“获取它的键值。<br>eg：<strong><em>user.username</em></strong><br>user.username等价于user[‘username’]</p><ol start="2"><li>我们可以用<strong>set</strong>标签在模板中定义变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set navigation &#x3D; [(&#39;&#x2F;&#39;,&#39;Home&#39;),(&#39;&#x2F;about&#39;,&#39;关于我&#39;)] %&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>endset</strong>声明结束</p><h1 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器(filter)"></a>过滤器(filter)</h1><blockquote><p>过滤器(filter)是一些可以用来修改和过滤特殊变量值的函数。<br>过滤器和变量用一个竖线“<strong>|</strong>”（管道符号）隔开，需要参数的过滤器可以像函数一样使用括号传递</p></blockquote><p>eg: 对一个movies列表使用length过滤器获取其长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movies|length</span><br></pre></td></tr></table></figure><blockquote><p>下面是Jinja2常用的内置过滤器</p></blockquote><table><thead><tr><th align="center">过滤器</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">default(value,default_value,boolean=False)</td><td align="center">设置默认值，默认值作为参数传入，别名为d</td></tr><tr><td align="center">escap(s)</td><td align="center">转义HTML文本，别名为e</td></tr><tr><td align="center">first(seq)</td><td align="center">返回序列的第一个元素</td></tr><tr><td align="center">last(seq)</td><td align="center">返回列表的最后一个元素</td></tr><tr><td align="center">length(object)</td><td align="center">返回变量的长度</td></tr><tr><td align="center">safe(value)</td><td align="center">将变量标记为安全，避免转义</td></tr><tr><td align="center">wordcount(s)</td><td align="center">计算单词数量</td></tr></tbody></table><p>过滤器函数的第一个参数表示被过滤的变量值(value)或字符串(s)，<strong>即竖线符号左侧的值</strong>其他参数可以使用括号传入</p><h1 id="测试器-Test"><a href="#测试器-Test" class="headerlink" title="测试器(Test)"></a>测试器(Test)</h1><blockquote><p>测试器主要用来判断一个值是否满足某种变量类型,返回布尔值（True or False）的特殊函数<br>语法为：<strong>if…is…</strong></p></blockquote><ul><li>is的左侧是测试器函数的第一个参数(value)</li><li>其他参数可以通过添加括号传入，也可以在右侧使用空格连接</li></ul><blockquote><p>Jinja2常用内置测试器</p></blockquote><table><thead><tr><th align="center">测试器</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">callable(object)</td><td align="center">判断对象是否可调用</td></tr><tr><td align="center">defined(value)</td><td align="center">判断变量是否已定义</td></tr><tr><td align="center">none(value)</td><td align="center">判断变量是否为None</td></tr><tr><td align="center">number(value)</td><td align="center">判断变量是否为数字</td></tr><tr><td align="center">string(value)</td><td align="center">判断变量是否为字符串</td></tr><tr><td align="center">sequence(value)</td><td align="center">判断变量是否为序列，比如字符串、列表、元组</td></tr><tr><td align="center">iterable(value)</td><td align="center">判断变量是否可迭代</td></tr><tr><td align="center">mapping(value)</td><td align="center">判断变量是否是匹配对象，比如字典</td></tr><tr><td align="center">smeas(value,other)</td><td align="center">判断变量与other是否指向相同的内存地址</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if foo is smeas(bar) %&#125;</span><br><span class="line">&#123;# 等价于 #&#125;</span><br><span class="line">&#123;% if foo is smeas bar %&#125;</span><br></pre></td></tr></table></figure><p>判断foo和bar所以指向的内存地址是否相同</p><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><blockquote><p>在Jinja2中，语句使用<strong>{% ... %}</strong>标识<br>在语句结束的地方，必须添加结束标签</p></blockquote><ul><li>if语句使用endif</li><li>for语句使用endfor</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user.name &#x3D;&#x3D; &#39;shansan&#39; %&#125;</span><br><span class="line">    &lt;h1&gt;you are right!&lt;&#x2F;h1&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;h1&gt;you are wrong!&lt;&#x2F;h1&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for g in ga %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; g.name &#125;&#125; - &#123;&#123; g.year &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><strong><em>不可使用break和continue控制循环的执行</em></strong></p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="局部模板"><a href="#局部模板" class="headerlink" title="局部模板"></a>局部模板</h2><ul><li>当多个独立模板中使用到同一块HTML代码时，可以把这部分代码抽离出来，放到局部模板中</li><li>局部模板的命名一般以一个下划线开始</li><li>使用<strong>include</strong>标签插入一个局部模板</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#39;_banner.html&#39; %&#125;</span><br></pre></td></tr></table></figure><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><ul><li>宏，类似于Python中的函数。使用宏可以封装一部分模板代码</li><li>一般把宏寄存在即存在名为macros.html或_macros.html文件中</li><li>使用macro和endmacro标签声明宏的开始和结束</li><li>在开始标签中定义宏的名称和接收的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro qux(amount&#x3D;1) %&#125;</span><br><span class="line">    &#123;% if amount&#x3D;&#x3D;1 %&#125;</span><br><span class="line">        I am qux.</span><br><span class="line">    &#123;% elif amount&gt;1 %&#125;</span><br><span class="line">        We are qux.</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>就像从Python模块中导入函数一样，我们可以使用import导入宏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from &#39;macros.html&#39; import qux %&#125;</span><br></pre></td></tr></table></figure><p>PS:<font color="red">默认情况下，使用include导入一个局部模板会传递上下文到局部模板中，但使用import却不会</font></p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><blockquote><p>模板继承允许我们构建一个包含站点共同元素的基本模板”骨架”，并定义子模版可以覆盖的块</p></blockquote><ol><li>基模板 base.html</li></ol><p>** 在基模板中定义的块（block），可以让子模版通过定义同名的块来执行继承操作 **</p><p><u>块的开始和结束分别使用block和endblock标签,不同的块允许嵌套</u><br><u>以下示例代码中使用head、title、styles、content、footer和scripts划分了不同的标签块</u></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;Template - HelloFlask&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% block styles %&#125;&#123;% endblock styles %&#125;</span><br><span class="line">&#123;% endblock head %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('index') &#125;&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock content %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    &#123;% block footer %&#125;</span><br><span class="line">        &#123;% endblock footer %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    &#123;% block scripts %&#125;&#123;% endblock scripts %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>子模版 index.html</li></ol><ul><li>当在子模版创建同名的块时，会使用字块的内容覆盖父块的内容</li><li>这里子模版的content块的内容覆盖了基模板content块的内容</li><li><font color=red>extends 标签必须是模板中的第一个 标签</font></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 'base.html' %&#125;</span><br><span class="line">&#123;% from 'macros.html' import qux %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% set name='baz' %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Template<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('watchlist') &#125;&#125;"</span>&gt;</span>Watchlist<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Filter: &#123;&#123; foo|musical &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Global: &#123;&#123; bar() &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Test: &#123;% if name == 'baz' %&#125;I am baz.&#123;% endif %&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Macro: &#123;&#123; qux(amount=5) &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure><p><strong>* 如需要向基模板中追加内容，可以使用Jinja2的super()函数 *</strong></p><p>如向基模板的styles块追加一行样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block styles %&#125;</span><br><span class="line">&#123;&#123; super() &#125;&#125;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    html&#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><hr><p>参考：</p><ul><li><p><a href="https://book.douban.com/subject/30310340/" target="_blank" rel="noopener">https://book.douban.com/subject/30310340/</a></p></li><li><p><a href="https://www.cnblogs.com/yanzi-meng/p/8342798.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanzi-meng/p/8342798.html</a></p></li><li><p><a href="http://docs.jinkan.org/docs/jinja2/templates.html#id21" target="_blank" rel="noopener">http://docs.jinkan.org/docs/jinja2/templates.html#id21</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型算法-1</title>
      <link href="/2019/01/03/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95-1/"/>
      <url>/2019/01/03/%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型算法-1"><a href="#泛型算法-1" class="headerlink" title="泛型算法-1"></a>泛型算法-1</h1><blockquote><p>泛型算法实现了一些经典算法的公共接口，如排序和搜索；称它们是“泛型的”，是因为它们可以用于不同类型的元素的和多种容器类型（不仅包括标准库类型，还包括内置的数组类型），以及其它类型的序列。</p></blockquote><p>** 大多数算法都定义在头文件algorithm中 **</p><p><font color="red">算法永远不会执行容器的操作</font></p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*算法find*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- find将范围内中的所有元素与给定值进行比较，返回指向第一个等于给定值的迭代器</span></span><br><span class="line"><span class="comment">- 如果范围内无匹配元素，则find返回第二个参数来表示搜索失败 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_value</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//find函数的返回值类型是迭代器类型 </span></span><br><span class="line"><span class="comment">//在vector中查找值 </span></span><br><span class="line"><span class="keyword">int</span> val = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> result = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),val);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在数组中查找值 </span></span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> search = <span class="built_in">find</span>(<span class="built_in">begin</span>(nums),<span class="built_in">end</span>(nums),<span class="number">11</span>);<span class="comment">//值不存在，返回尾后迭代器 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*search&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法count*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 返回给定值在序列中出现的次数 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">value_count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//count函数返回给定值在序列中出现的次数</span></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> c = count(a,a+<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1出现的次数:"</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法accumulate*/</span> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- accumulate将第三个参数作为求和起点</span></span><br><span class="line"><span class="comment">- 注意序列中的元素的类型必须与第三个参数匹配 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//accumulate函数用去求给定元素范围内元素的和 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> sum = accumulate(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v_compare&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( equal(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v_compare.<span class="built_in">begin</span>()) )</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"yeah"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*算法fill*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 用于确定两个序列中是否保存相同的值</span></span><br><span class="line"><span class="comment">- 第二个序列至少与第一个序列一样长 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_fill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="built_in">fill</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">1</span>);<span class="comment">//不要对空容器使用此操作 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> a:v)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimDups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v)</span></span>;</span><br><span class="line">sort(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//使用sort算法按字典序重排序列 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//unique重排了输入范围，使得每个单词只出现一次，</span></span><br><span class="line"><span class="comment">//unique返回指向不重复区域之后一个位置的迭代器 </span></span><br><span class="line"><span class="keyword">auto</span> end_unique = unique(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//删除重复元素 </span></span><br><span class="line">words.erase(end_unique,words.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">print</span>(words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> a:v)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定制操作，按照长度重新排vector</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isShorter</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &gt; s2.<span class="built_in">size</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//按长度进行排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">length_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),isShorter);</span><br><span class="line"><span class="built_in">print</span>(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用算法stable_sort来保持等长元素间的字典序 </span></span><br><span class="line">    stable_sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),isShorter);</span><br><span class="line"><span class="built_in">print</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向算法传递函数"><a href="#向算法传递函数" class="headerlink" title="向算法传递函数"></a>向算法传递函数</h2><h3 id="算法谓词"><a href="#算法谓词" class="headerlink" title="算法谓词"></a>算法谓词</h3><ul><li>算法谓词即标准库算法传递的参数, 可以指定算法的操作，它是一个可以调用的表达式，其返回结果是一个能用作条件的值</li><li>接受谓词参数的算法对输入序列中的元素调用谓词。因此元素类型必须能转换成谓词的参数类型</li></ul><blockquote><p>标准库算法所使用的谓词分为两类：<br>1.一元谓词：它们只接受一个参数<br>2.二元谓词：它们接受两个参数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定制操作，按照长度重新排vector</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isShorter</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1,<span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.<span class="built_in">size</span>() &gt; s2.<span class="built_in">size</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//按长度进行排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">length_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(),isShorter);</span><br><span class="line"><span class="built_in">print</span>(words);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用算法stable_sort来保持等长元素间的字典序 </span></span><br><span class="line">    stable_sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),isShorter);</span><br><span class="line"><span class="built_in">print</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里向算法stable_sort传递的第三个参数就是一个谓词</p><h2 id="lambda表达式（匿名函数）"><a href="#lambda表达式（匿名函数）" class="headerlink" title="lambda表达式（匿名函数）"></a>lambda表达式（匿名函数）</h2><blockquote><p>lambda表达式与其它函数的区别是：lambda表达式可定义在函数内部</p></blockquote><p>基本形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[capture lsit](parameter <span class="built_in">list</span>)  -&gt;  <span class="keyword">return</span> type &#123;function body&#125;</span><br></pre></td></tr></table></figure><ul><li>capture list(捕获列表): 一个lambda所在函数中的定义的局部变量的列表（通常为空）</li><li>parameter list(参数列表)</li><li>return type(返回类型)</li><li>function body(函数体)</li></ul><p>** 我们可以忽略形参列表和返回类型，但是必须永远包含捕获列表和函数体 **</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">auto</span> f = []&#123;<span class="keyword">return</span> <span class="number">44</span>;&#125; ;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f()&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//打印44</span></span><br></pre></td></tr></table></figure><p>上面的向算法stable_sort传递的实参可以改写为,效果还是一样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stable_sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), [](<span class="keyword">const</span> <span class="built_in">string</span> &amp;a,<span class="keyword">const</span> <span class="built_in">string</span> s&amp;b)&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span>()&#125;);</span><br></pre></td></tr></table></figure><h3 id="捕获列表的使用"><a href="#捕获列表的使用" class="headerlink" title="捕获列表的使用"></a>捕获列表的使用</h3><p>一个lambda可以出现在一个函数内部，使用其局部变量，但它只能使用那些指明的变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type sz)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用sort算法按字典序重排序列 s</span></span><br><span class="line">sort(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//unique重排了输入范围，使得每个单词只出现一次，</span></span><br><span class="line"><span class="comment">//unique返回指向不重复区域之后一个位置的迭代器 </span></span><br><span class="line"><span class="keyword">auto</span> end_unique = unique(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//删除重复元素 </span></span><br><span class="line">words.erase(end_unique,words.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//按长度排序,长度相同的按字典序排 </span></span><br><span class="line">stable_sort(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(), </span><br><span class="line">[](<span class="keyword">const</span> <span class="built_in">string</span> &amp;a,<span class="keyword">const</span> <span class="built_in">string</span> &amp;b)&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>();&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//算法find_if返回一个迭代器，这个迭代器指向第一个满足size()&gt;=sz的元素</span></span><br><span class="line"><span class="comment">//这里用到了捕获列表，使用局部变量sz </span></span><br><span class="line"><span class="keyword">auto</span> wc = find_if(words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>(), </span><br><span class="line">[sz](<span class="keyword">const</span> <span class="built_in">string</span> &amp;a)&#123;<span class="keyword">return</span> a.<span class="built_in">size</span>()&gt;sz; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算满足size &gt;= sz 的元素的个数 </span></span><br><span class="line"><span class="keyword">auto</span> count = words.<span class="built_in">end</span>() - wc;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the numbers of word longer than "</span>&lt;&lt;sz&lt;&lt;<span class="string">": "</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//打印长度大于等于给定值sz的单词</span></span><br><span class="line"><span class="comment">//算法for_earch接受一个可调用对象，并对输入序列中的每个元素调用此对象 </span></span><br><span class="line">for_each(wc,words.<span class="built_in">end</span>(),[](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123; <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="string">" "</span>; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)</span><br><span class="line">    words.push_back(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> a:words)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">biggies(words,<span class="number">6</span>);<span class="comment">//打印长度大于或等于给定值的单词 </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/7Ldocia.png" alt=""></p><p>** 捕获列表只用于局部非静态（static）变量，lambda可以直接使用局部static变量和在它所在函数之外声明的名字 **</p><h3 id="lambada捕获和返回"><a href="#lambada捕获和返回" class="headerlink" title="lambada捕获和返回"></a>lambada捕获和返回</h3><ul><li>变量的捕获方式有两种:值捕获、引用捕获</li><li>使用引用捕获变量时，必须确保被引用的对象在lambda执行的时候是存在的</li><li>lambda捕获的是局部变量，这些变量在函数结束后就不复存在了</li></ul><blockquote><p>我们可以从一个函数返回lambda，函数可以直接返回一个可调用对象，或者返回一个类对象，该类含有可调用对象的数据成员。如果函数返回一个lambda，则与函数不能返回一个局部变量类似，此lambda也不能包含引用捕获</p></blockquote><h4 id="使用-amp-、-进行隐式捕获"><a href="#使用-amp-、-进行隐式捕获" class="headerlink" title="使用&amp;、=进行隐式捕获"></a>使用<strong><em>&amp;</em></strong>、<strong><em>=</em></strong>进行隐式捕获</h4><p>我们可以让编译器根据lambda体中的代码来推断我们要使用哪些变量</p><ul><li><strong>&amp;</strong>告诉编译器采用引用捕获方式</li><li><strong>=</strong>告诉编译器采用值捕获方式</li></ul><p><font color="blue">混合使用显式捕获和隐式捕获时,显示捕获必须使用与隐式捕获不同的方式</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words, ostream &amp;os=<span class="built_in">cout</span>, <span class="keyword">char</span> c=<span class="string">' '</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//os隐式捕获，c显式捕获 </span></span><br><span class="line">    for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), [&amp;, c](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123; os&lt;&lt;s&lt;&lt;c;&#125; );</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//c隐式捕获，os显示捕获 </span></span><br><span class="line">for_each(words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>(), [=, &amp;os](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123; os&lt;&lt;s&lt;&lt;c;&#125; );   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str;</span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;temp)</span><br><span class="line">    str.push_back(temp);</span><br><span class="line"></span><br><span class="line">biggies(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/blhDe01.png" alt=""></p><h4 id="指定lambda的返回类型"><a href="#指定lambda的返回类型" class="headerlink" title="指定lambda的返回类型"></a>指定lambda的返回类型</h4><ul><li>要为一个lambda定义返回类型时，必须使用尾置返回类型</li><li>尾置返回类型跟在形参列表后面，并以一个<code>-&gt;</code>符号开头</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f = [](<span class="keyword">int</span> i)-&gt;<span class="keyword">int</span>&#123; <span class="keyword">return</span> i+<span class="number">1</span>;&#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f(<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//输出结果为：4</span></span><br></pre></td></tr></table></figure><h4 id="可变lambada"><a href="#可变lambada" class="headerlink" title="可变lambada"></a>可变lambada</h4><p>使用关键字<code>mutable</code>改变一个被捕获变量的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> f = [i]()<span class="keyword">mutable</span>&#123; <span class="keyword">return</span> ++i;&#125;;</span><br><span class="line">i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f();<span class="comment">//输出结果为2</span></span><br></pre></td></tr></table></figure><h4 id="lambda捕获列表"><a href="#lambda捕获列表" class="headerlink" title="lambda捕获列表"></a>lambda捕获列表</h4><table><thead><tr><th align="center">&ensp;</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">[]</td><td align="left">空捕获列表。lambda不能使用所在函数中的变量。一个lambda只有捕获变量后才能使用它们</td></tr><tr><td align="center">[names]</td><td align="left">names是一个逗号分隔的名字列表，这些名字都是lambda所在函数的局部变量。默认情况下，捕获列表中的变量都被拷贝</td></tr><tr><td align="center">[&amp;]</td><td align="left">隐式捕获列表，采用隐式捕获方式</td></tr><tr><td align="center">[=]</td><td align="left">隐式捕获列表，采用值捕获方式</td></tr><tr><td align="center">[&amp;, identifier_list]</td><td align="left">identifier_list是一个逗号分隔的列表，包含0个或多个来自所在函数的变量，这些变量采用值捕获方式。任何隐式捕获的变量都采用引用方式捕获</td></tr><tr><td align="center">[=, identifier_list]</td><td align="left">identifier_list是一个逗号分隔的列表，包含0个或多个来自所在函数的变量，这些变量采用引用捕获方式，且变量名字前必须使用&amp;。任何隐式捕获的变量都采用值方式捕获</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Sakura</title>
      <link href="/2018/12/12/Hexo-Theme-Sakura/"/>
      <url>/2018/12/12/Hexo-Theme-Sakura/</url>
      
        <content type="html"><![CDATA[<p>hexo-theme-sakura主题 <a href="https://github.com/honjun/hexo-theme-sakura/blob/master/README.md" target="_blank" rel="noopener">English document</a></p><p>基于WordPress主题<a href="https://github.com/mashirozx/Sakura/" target="_blank" rel="noopener">Sakura</a>修改成Hexo的主题。</p><p><a href="https://sakura.hojun.cn" target="_blank" rel="noopener">demo预览</a></p><p>正在开发中……</p><p><img src="https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg" alt=""></p><h2 id="交流群"><a href="#交流群" class="headerlink" title="交流群"></a>交流群</h2><p>若你是使用者，加群QQ: 801511924</p><p>若你是创作者，加群QQ: 194472590</p><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul><li>首页大屏视频</li><li>首页随机封面</li><li>图片懒加载</li><li>valine评论</li><li>fancy-box相册</li><li>pjax支持，音乐不间断</li><li>aplayer音乐播放器</li><li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li></ul><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p><p><a href="https://www.paypal.me/hojuncn" target="_blank" rel="noopener">paypal</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/AliPayQR.jpg" target="_blank" rel="noopener">Alipay 支付宝</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/WeChanSQ.jpg" target="_blank" rel="noopener">WeChat Pay 微信支付</a></p><h2 id="未完善的使用教程"><a href="#未完善的使用教程" class="headerlink" title="未完善的使用教程"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p><h2 id="1、主题下载安装"><a href="#1、主题下载安装" class="headerlink" title="1、主题下载安装"></a>1、主题下载安装</h2><p><a href="https://github.com/honjun/hexo-theme-sakura" target="_blank" rel="noopener">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p><p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p><h2 id="2、主题配置"><a href="#2、主题配置" class="headerlink" title="2、主题配置"></a>2、主题配置</h2><h3 id="博客根目录下的-config配置"><a href="#博客根目录下的-config配置" class="headerlink" title="博客根目录下的_config配置"></a>博客根目录下的_config配置</h3><p>站点</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你的站点名</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">站点简介</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">你的github仓库地址</span></span><br><span class="line">    <span class="comment"># coding: 你的coding仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>备份 （使用hexo b发布备份到远程仓库）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">backup</span> <span class="string">my</span> <span class="string">blog</span> <span class="string">of</span> <span class="string">https://honjun.github.io/</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="comment"># 你的github仓库地址,备份分支名  （建议新建backup分支）</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/honjun/honjun.github.io.git,backup</span></span><br><span class="line">    <span class="comment"># coding: https://git.coding.net/hojun/hojun.git,backup</span></span><br></pre></td></tr></table></figure><h3 id="主题目录下的-config配置"><a href="#主题目录下的-config配置" class="headerlink" title="主题目录下的_config配置"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># site name</span></span><br><span class="line"><span class="comment"># 站点名 【改】</span></span><br><span class="line"><span class="attr">prefixName:</span> <span class="string">さくら荘その</span></span><br><span class="line"><span class="attr">siteName:</span> <span class="string">hojun</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># favicon and site master avatar</span></span><br><span class="line"><span class="comment"># 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/custom/avatar.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点url 【改】</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://sakura.hojun.cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点介绍（或者说是个人签名）【改】</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Live</span> <span class="string">your</span> <span class="string">life</span> <span class="string">with</span> <span class="string">passion!</span> <span class="string">With</span> <span class="string">some</span> <span class="string">drive!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg</span></span><br><span class="line"><span class="attr">cdn:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启pjax 【选】</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点首页的公告信息 【改】</span></span><br><span class="line"><span class="attr">notice:</span> <span class="string">hexo-Sakura主题已经开源，目前正在开发中...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 懒加载的加载中图片 【选】</span></span><br><span class="line"><span class="attr">lazyloadImg:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点菜单配置 【选】</span></span><br><span class="line"><span class="attr">menus:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/,</span> <span class="attr">fa:</span> <span class="string">fa-fort-awesome</span> <span class="string">faa-shake</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/archives,</span> <span class="attr">fa:</span> <span class="string">fa-archive</span> <span class="string">faa-shake,</span> <span class="attr">submenus:</span> <span class="string">&#123;</span> </span><br><span class="line">    <span class="string">技术:</span> <span class="string">&#123;path:</span> <span class="string">/categories/技术/,</span> <span class="attr">fa:</span> <span class="string">fa-code</span> <span class="string">&#125;,</span> </span><br><span class="line">    <span class="string">生活:</span> <span class="string">&#123;path:</span> <span class="string">/categories/生活/,</span> <span class="attr">fa:</span> <span class="string">fa-file-text-o</span> <span class="string">&#125;,</span> </span><br><span class="line">    <span class="string">资源:</span> <span class="string">&#123;path:</span> <span class="string">/categories/资源/,</span> <span class="attr">fa:</span> <span class="string">fa-cloud-download</span> <span class="string">&#125;,</span> </span><br><span class="line">    <span class="string">随想:</span> <span class="string">&#123;path:</span> <span class="string">/categories/随想/,</span> <span class="attr">fa:</span> <span class="string">fa-commenting-o</span> <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">转载:</span> <span class="string">&#123;path:</span> <span class="string">/categories/转载/,</span> <span class="attr">fa:</span> <span class="string">fa-book</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">清单:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">javascript:;,</span> <span class="attr">fa:</span> <span class="string">fa-list-ul</span> <span class="string">faa-vertical,</span> <span class="attr">submenus:</span> <span class="string">&#123;</span> </span><br><span class="line">    <span class="string">书单:</span> <span class="string">&#123;path:</span> <span class="string">/tags/悦读/,</span> <span class="attr">fa:</span> <span class="string">fa-th-list</span> <span class="string">faa-bounce</span> <span class="string">&#125;,</span> </span><br><span class="line">    <span class="string">番组:</span> <span class="string">&#123;path:</span> <span class="string">/bangumi/,</span> <span class="attr">fa:</span> <span class="string">fa-film</span> <span class="string">faa-vertical</span> <span class="string">&#125;,</span> </span><br><span class="line">    <span class="string">歌单:</span> <span class="string">&#123;path:</span> <span class="string">/music/,</span> <span class="attr">fa:</span> <span class="string">fa-headphones</span> <span class="string">&#125;,</span></span><br><span class="line">    <span class="string">图集:</span> <span class="string">&#123;path:</span> <span class="string">/tags/图集/,</span> <span class="attr">fa:</span> <span class="string">fa-photo</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/comment/,</span> <span class="attr">fa:</span> <span class="string">fa-pencil-square-o</span> <span class="string">faa-tada</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">友人帐:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/links/,</span> <span class="attr">fa:</span> <span class="string">fa-link</span> <span class="string">faa-shake</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">赞赏:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/donate/,</span> <span class="attr">fa:</span> <span class="string">fa-heart</span> <span class="string">faa-pulse</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/,</span> <span class="attr">fa:</span> <span class="string">fa-leaf</span> <span class="string">faa-wrench</span> <span class="string">,</span> <span class="attr">submenus:</span> <span class="string">&#123;</span> </span><br><span class="line">    <span class="string">我？:</span> <span class="string">&#123;path:</span> <span class="string">/about/,</span> <span class="attr">fa:</span> <span class="string">fa-meetup&#125;,</span> </span><br><span class="line">    <span class="string">主题:</span> <span class="string">&#123;path:</span> <span class="string">/theme-sakura/,</span> <span class="attr">fa:</span> <span class="string">iconfont</span> <span class="string">icon-sakura</span> <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">Lab:</span> <span class="string">&#123;path:</span> <span class="string">/lab/,</span> <span class="attr">fa:</span> <span class="string">fa-cogs</span> <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">&#125;</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">客户端:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/client/,</span> <span class="attr">fa:</span> <span class="string">fa-android</span> <span class="string">faa-vertical</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">/atom.xml,</span> <span class="attr">fa:</span> <span class="string">fa-rss</span> <span class="string">faa-pulse</span> <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page sort type: -1: newer first，1: older first. 【非】</span></span><br><span class="line"><span class="attr">homePageSortType:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page article shown number) 【非】</span></span><br><span class="line"><span class="attr">homeArticleShown:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景图片 【选】</span></span><br><span class="line"><span class="attr">bgn:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startdash面板 url, title, desc img 【改】</span></span><br><span class="line"><span class="attr">startdash:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;url:</span> <span class="string">/theme-sakura/,</span> <span class="attr">title:</span> <span class="string">Sakura,</span> <span class="attr">desc:</span> <span class="string">本站</span> <span class="string">hexo</span> <span class="string">主题,</span> <span class="attr">img:</span> <span class="string">/img/startdash/sakura.md.png&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;url:</span> <span class="string">http://space.bilibili.com/271849279,</span> <span class="attr">title:</span> <span class="string">Bilibili,</span> <span class="attr">desc:</span> <span class="string">博主的b站视频,</span> <span class="attr">img:</span> <span class="string">/img/startdash/bilibili.jpg&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#123;url:</span> <span class="string">/,</span> <span class="attr">title:</span> <span class="string">hojun的万事屋,</span> <span class="attr">desc:</span> <span class="string">技术服务,</span> <span class="attr">img:</span> <span class="string">/img/startdash/wangshiwu.jpg&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># your site build time or founded date</span></span><br><span class="line"><span class="comment"># 你的站点建立日期 【改】</span></span><br><span class="line"><span class="attr">siteBuildingTime:</span> <span class="number">07</span><span class="string">/17/2018</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交按钮(social)  url, img PC端配置 【改】</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">&#123;url:</span> <span class="string">http://github.com/honjun,</span> <span class="attr">img:</span> <span class="string">/img/social/github.png&#125;</span></span><br><span class="line">  <span class="attr">sina:</span> <span class="string">&#123;url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1,</span> <span class="attr">img:</span> <span class="string">/img/social/sina.png&#125;</span></span><br><span class="line">  <span class="attr">wangyiyun:</span> <span class="string">&#123;url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1,</span> <span class="attr">img:</span> <span class="string">/img/social/wangyiyun.png&#125;</span></span><br><span class="line">  <span class="attr">zhihu:</span> <span class="string">&#123;url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1,</span> <span class="attr">img:</span> <span class="string">/img/social/zhihu.png&#125;</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">&#123;url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1,</span> <span class="attr">img:</span> <span class="string">/img/social/email.svg&#125;</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="string">&#123;url:</span> <span class="string">/#,</span> <span class="attr">qrcode:</span> <span class="string">/img/custom/wechat.jpg,</span> <span class="attr">img:</span> <span class="string">/img/social/wechat.png&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交按钮(msocial)  url, img 移动端配置 【改】</span></span><br><span class="line"><span class="attr">msocial:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">&#123;url:</span> <span class="string">http://github.com/honjun,</span> <span class="attr">fa:</span> <span class="string">fa-github,</span> <span class="attr">color:</span> <span class="number">333</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">weibo:</span> <span class="string">&#123;url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1,</span> <span class="attr">fa:</span> <span class="string">fa-weibo,</span> <span class="attr">color:</span> <span class="string">dd4b39&#125;</span></span><br><span class="line">  <span class="attr">qq:</span> <span class="string">&#123;url:</span> <span class="string">https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes,</span> <span class="attr">fa:</span> <span class="string">fa-qq,</span> <span class="attr">color:</span> <span class="string">25c6fe&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】</span></span><br><span class="line"><span class="attr">donate:</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/img/custom/donate/AliPayQR.jpg</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="string">/img/custom/donate/WeChanQR.jpg</span></span><br><span class="line">  <span class="attr">wechatSQ:</span> <span class="string">/img/custom/donate/WeChanSQ.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】</span></span><br><span class="line"><span class="attr">movies:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/hojun@1.2</span></span><br><span class="line">  <span class="comment"># 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Unbroken.mp4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】</span></span><br><span class="line"><span class="attr">aplayer:</span> </span><br><span class="line">  <span class="attr">id:</span> <span class="number">2660651585</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mini:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">random</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span></span><br><span class="line">  <span class="attr">mutex:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine评论配置【改】</span></span><br><span class="line"><span class="attr">valine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">v_appId:</span> <span class="string">GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz</span></span><br><span class="line"><span class="attr">v_appKey:</span> <span class="string">mgOpfzbkHYqU92CV4IDlAUHQ</span></span><br></pre></td></tr></table></figure><h2 id="分类页和标签页配置"><a href="#分类页和标签页配置" class="headerlink" title="分类页和标签页配置"></a>分类页和标签页配置</h2><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg" alt=""></p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg" alt=""></p><p>配置项在\themes\Sakura\languages\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#category</span></span><br><span class="line"><span class="comment"># 按分类名创建</span></span><br><span class="line"><span class="string">技术:</span></span><br><span class="line">    <span class="comment">#中文标题</span></span><br><span class="line">    <span class="attr">zh:</span> <span class="string">野生技术协会</span> </span><br><span class="line">    <span class="comment"># 英文标题</span></span><br><span class="line">    <span class="attr">en:</span> <span class="string">Geek</span> <span class="string">–</span> <span class="string">Only</span> <span class="string">for</span> <span class="string">Love</span></span><br><span class="line">    <span class="comment"># 封面图片</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg</span></span><br><span class="line"><span class="string">生活:</span></span><br><span class="line">    <span class="attr">zh:</span> <span class="string">生活</span></span><br><span class="line">    <span class="attr">en:</span> <span class="string">live</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tag</span></span><br><span class="line"><span class="comment"># 标签名即是标题</span></span><br><span class="line"><span class="string">悦读:</span></span><br><span class="line">    <span class="comment"># 封面图片</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg</span></span><br></pre></td></tr></table></figure><h2 id="单页面封面配置"><a href="#单页面封面配置" class="headerlink" title="单页面封面配置"></a>单页面封面配置</h2><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg" alt=""><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: comment</span><br><span class="line">date: 2018-12-20 23:13:48</span><br><span class="line">keywords: 留言板</span><br><span class="line">description: </span><br><span class="line">comments: true</span><br><span class="line"><span class="section"># 在这里配置单页面头部图片，自定义替换哦~</span></span><br><span class="line">photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><h3 id="番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg" alt=""></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">bangumi</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">bangumi</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="number">-02</span><span class="number">-10</span> <span class="number">21</span><span class="string">:32:48</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">bangumis:</span></span><br><span class="line">  <span class="comment"># 番组图片</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class="line">  <span class="comment"># 番组名</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class="line">  <span class="comment"># 追番状态 （追番ing/已追完）</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">已追完</span></span><br><span class="line">  <span class="comment"># 追番进度</span></span><br><span class="line">    <span class="attr">progress:</span> <span class="number">100</span></span><br><span class="line">  <span class="comment"># 番剧日文名称</span></span><br><span class="line">    <span class="attr">jp:</span> <span class="string">さよならの朝に約束の花をかざろう</span></span><br><span class="line">  <span class="comment"># 放送时间</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">放送时间:</span> <span class="number">2018</span><span class="number">-02</span><span class="number">-24</span> <span class="string">SUN.</span></span><br><span class="line">  <span class="comment"># 番剧介绍</span></span><br><span class="line">    <span class="attr">desc:</span>  <span class="string">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">已追完</span></span><br><span class="line">    <span class="attr">progress:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">jp:</span> <span class="string">さよならの朝に約束の花をかざろう</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">放送时间:</span> <span class="number">2018</span><span class="number">-02</span><span class="number">-24</span> <span class="string">SUN.</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg" alt=""></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">links</span></span><br><span class="line"><span class="comment"># 创建日期，可以改下</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-12</span><span class="number">-19</span> <span class="number">23</span><span class="string">:11:06</span> </span><br><span class="line"><span class="comment"># 图片上的标题，自定义修改</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">友人帐</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="comment"># true/false 开启/关闭评论</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span> </span><br><span class="line"><span class="comment"># 页面头部图片，自定义修改</span></span><br><span class="line"><span class="attr">photos:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg</span> </span><br><span class="line"><span class="comment"># 友链配置</span></span><br><span class="line"><span class="attr">links:</span> </span><br><span class="line">  <span class="comment"># 类型分组</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">个人项目</span></span><br><span class="line">    <span class="comment"># 类型简介</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">充分说明这家伙是条咸鱼</span> <span class="string">&lt;</span> <span class="string">(￣︶￣)&gt;</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="comment"># 友链链接</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">    <span class="comment"># 友链头像</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">    <span class="comment"># 友链站点名</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">    <span class="comment"># 友链介绍  下面雷同</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">  <span class="comment"># 类型分组...</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">小伙伴们</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">欢迎交换友链</span> <span class="string">ꉂ(ˊᗜˋ)</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="写文章配置"><a href="#写文章配置" class="headerlink" title="写文章配置"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bili video_id [page] %&#125;</span><br></pre></td></tr></table></figure><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-bili</a>。</p><p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% fb_img src [caption] %&#125;</span><br></pre></td></tr></table></figure><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md" target="_blank" rel="noopener">hexo-tag-fancybox_img</a></p><h2 id="还有啥，一时想不起来……"><a href="#还有啥，一时想不起来……" class="headerlink" title="还有啥，一时想不起来……"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web , 悦读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</title>
      <link href="/2018/12/11/Github+jsDelivr+PicGo%20%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>/2018/12/11/Github+jsDelivr+PicGo%20%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E3%80%81%E9%AB%98%E6%95%88%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-jsDelivr-PicGo-打造稳定快速、高效免费图床"><a href="#Github-jsDelivr-PicGo-打造稳定快速、高效免费图床" class="headerlink" title="Github+jsDelivr+PicGo 打造稳定快速、高效免费图床"></a><a href="https://www.itrhx.com/2019/08/01/A27-image-hosting/" target="_blank" rel="noopener">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</a></h1><hr><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png" alt="ImgHosting"></a></p><hr><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a>– 前言</h1><p>图床是个啥东西就不用过多介绍了，先来对比一下各路图床：</p><blockquote><ul><li>微博图床：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉</li><li>SM.MS：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li>其他小众图床：随时有挂掉的风险</li><li>Imgur等国外图床：国内访问速度太慢，随时有被墙的风险</li><li>大厂储存服务：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，容量限制，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li></ul></blockquote><p>因此，GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！</p><hr><h1 id="–-新建GitHub仓库"><a href="#–-新建GitHub仓库" class="headerlink" title="– 新建GitHub仓库"></a>– 新建GitHub仓库</h1><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个README.md描述文件</p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png" alt="01"></a></p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png" alt="02"></a></p><hr><h1 id="–-生成一个Token"><a href="#–-生成一个Token" class="headerlink" title="– 生成一个Token"></a>– 生成一个Token</h1><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png" alt="03"></a></p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png" alt="04"></a></p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png" alt="05"></a></p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png" alt="06"></a></p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png" alt="07"></a></p><h1 id="–-配置PicGo"><a href="#–-配置PicGo" class="headerlink" title="– 配置PicGo"></a>– 配置PicGo</h1><p>前往<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">下载PicGo</a>，安装好后开始配置图床</p><p><a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" alt="08"></a></p><ul><li>设定仓库名：按照【用户名/图床仓库名】的格式填写</li><li>设定分支名：【master】</li><li>设定Token：粘贴之前生成的【Token】</li><li>指定存储路径：填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】，上传完毕后，我们就可以通过【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</a> 】加速访问我们的图片了，比如上图的图片链接为：<a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png</a></li></ul><p>关于 jsDelivr 具体是如何引用资源的可以参考我的另一篇博客：<a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/" target="_blank" rel="noopener">《免费CDN：jsDelivr+Github》</a></p><hr><h1 id="–-进行高效创作"><a href="#–-进行高效创作" class="headerlink" title="– 进行高效创作"></a>– 进行高效创作</h1><p>配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux定时备份MySQL数据库</title>
      <link href="/2018/12/11/Linux%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/12/11/Linux%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux定时备份MySQL数据库"><a href="#Linux定时备份MySQL数据库" class="headerlink" title="Linux定时备份MySQL数据库"></a>Linux定时备份MySQL数据库</h1><p>一开始没想到我会弄这个，以前觉得数据库一般很安全不需要定时备份。但是前几天的经历还是让我意识到了定时备份数据库的重要性，一个作业的数据库莫名其妙没了，后面通过快照回滚找回来了。后来就想到定时备份数据库了，经过一番折腾终于完成了这个功能。接下来就详细记一下 Linux定时备份MySQL数据库 的教程。</p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ol><li>CentOS 7.6.1810</li><li>MySQL 5.7.26</li></ol><h2 id="Step-1：创建目录"><a href="#Step-1：创建目录" class="headerlink" title="Step 1：创建目录"></a>Step 1：创建目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### 创建定时脚本目录</span><br><span class="line">mkdir -p &#x2F;home&#x2F;backup&#x2F;mysql&#x2F;shell</span><br><span class="line">### 创建sql文件放置目录</span><br><span class="line">mkdir -p &#x2F;home&#x2F;backup&#x2F;mysql&#x2F;sql</span><br></pre></td></tr></table></figure><h2 id="Step-2：编写备份脚本"><a href="#Step-2：编写备份脚本" class="headerlink" title="Step 2：编写备份脚本"></a>Step 2：编写备份脚本</h2><p>在我们上一步新建的 /home/backup/mysql/shell 下 新建一个 backup.sh,内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">### 数据库用户</span><br><span class="line">db_user&#x3D;&quot;root&quot;</span><br><span class="line">### 数据库用户密码</span><br><span class="line">db_passwd&#x3D;&quot;*******&quot;</span><br><span class="line">### 要备份的数据库名称</span><br><span class="line">db_name&#x3D;&quot;example&quot;</span><br><span class="line">### 备份出来的sql名称</span><br><span class="line">name&#x3D;&quot;example-&quot;$(date &quot;+%Y-%m-%d-%H-%M-%S&quot;)</span><br><span class="line"> </span><br><span class="line">###前面路径是mysql绝对路径，后面&#x2F;home&#x2F;backup&#x2F;mysql&#x2F;sql&#x2F;是要备份到的目录</span><br><span class="line">&#x2F;www&#x2F;server&#x2F;mysql&#x2F;bin&#x2F;mysqldump -u$db_user -p$db_passwd $db_name&gt;&#x2F;home&#x2F;backup&#x2F;mysql&#x2F;sql&#x2F;$name.sql</span><br></pre></td></tr></table></figure><h2 id="Step-3：给脚本添加可执行权限"><a href="#Step-3：给脚本添加可执行权限" class="headerlink" title="Step 3：给脚本添加可执行权限"></a>Step 3：给脚本添加可执行权限</h2><p>这一步很重要，不给backup.sh添加可执行权限，定时任务是无法完成备份的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x backup.sh</span><br></pre></td></tr></table></figure><h2 id="Step-4：-将脚本添加到定时任务"><a href="#Step-4：-将脚本添加到定时任务" class="headerlink" title="Step 4： 将脚本添加到定时任务"></a>Step 4： 将脚本添加到定时任务</h2><p>首先使用如下命令编辑定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>编辑的内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">###每一分钟执行一次后面的脚本(设置的周期短易于观察）</span><br><span class="line">*&#x2F;1 * * * * &#x2F;home&#x2F;backup&#x2F;mysql&#x2F;shell&#x2F;backup.sh</span><br></pre></td></tr></table></figure><h2 id="Step-5-：查看执行情况"><a href="#Step-5-：查看执行情况" class="headerlink" title="Step 5 ：查看执行情况"></a>Step 5 ：查看执行情况</h2><p>去我们制定的备份目录<strong>/home/backup/mysql/sql</strong>查看是否输出了sql文件</p><p><img src="https://yremp.live/wp-content/uploads/2019/11/image-13.png" alt="img"></p><p>可以看到每一分钟都输出了sql文件，让我们看看里面的内容</p><p><img src="https://yremp.live/wp-content/uploads/2019/11/image-14.png" alt="img"></p><p>确实看到了user表的数据，至此也就大功告成</p><h2 id="附：crontab-定时任务时间格式设定"><a href="#附：crontab-定时任务时间格式设定" class="headerlink" title="附：crontab 定时任务时间格式设定"></a>附：crontab 定时任务时间格式设定</h2><h3 id="crontab-文件的格式"><a href="#crontab-文件的格式" class="headerlink" title="crontab 文件的格式"></a>crontab 文件的格式</h3><p><strong>{minute} {hour} {day-of-month} {month} {day-of-week} {full-path-to-shell-script}</strong> </p><ol><li>minute: 区间为 0 – 59 </li><li>hour: 区间为0 – 23 </li><li>day-of-month: 区间为0 – 31 </li><li>month: 区间为1 – 12. 1 是1月. 12是12月. </li><li>Day-of-week: 区间为0 – 7. 周日可以是0或7.</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><table><thead><tr><th>*/1 * * * *</th><th>每分钟运行一次命令</th></tr></thead><tbody><tr><td>0 * * * *</td><td>每小时执行</td></tr><tr><td>0 0 * * *</td><td>每天执行</td></tr><tr><td>0 0 * * 0</td><td>每周执行</td></tr><tr><td>0 0 1 * *</td><td>每月执行</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql , linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keep on moving ！</title>
      <link href="/2018/11/27/Keep-on-moving-%EF%BC%81/"/>
      <url>/2018/11/27/Keep-on-moving-%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/P1TgIck.jpg" alt=""></p><a id="more"></a><p>比赛终于完了！<br>又可以安心打代码看书了<br>emmmmmmm</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO类型</title>
      <link href="/2018/11/22/IO%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/11/22/IO%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="IO库"><a href="#IO库" class="headerlink" title="IO库"></a>IO库</h1><p>** IO库设施: **</p><ul><li><code>istream</code>类型:提供输入操作</li><li><code>ostream</code>类型:提供输出操作</li><li><code>cin</code>:一个istream对象，从标准输入读取数据</li><li><code>cout</code>:一个ostream对象，从标准输出写入数据</li><li><code>cerr</code>:一个ostream对象，通常用于输出程序错误信息，写入到标准错误</li><li><code>&gt;&gt;</code>运算符:用来从一个istream对象读取输入数据</li><li><code>&lt;&lt;</code>运算符:用来向一个ostream对象写入数据</li><li><code>getline</code>函数:从一个给定的istream读取一行数据，存入一个给定的string对象中</li></ul><a id="more"></a><h2 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h2><table><thead><tr><th align="center">头文件</th><th align="center">IO库类型</th></tr></thead><tbody><tr><td align="center">iostream</td><td align="center">istream,wistream从流读取数据<br>ostream,wostream向流写入数据<br>iostream,wiostream读写流</td></tr><tr><td align="center">fstream</td><td align="center">ifstream,wistream从文件读取数据<br>ofstream,wofstream向文件写入数据<br>fstream,wfstream读写文件</td></tr><tr><td align="center">sstream</td><td align="center">istringstream,wistringstream从string读取数据<br>ostringstream,wostringstream向string写入数据<br>stringstream,wstringstream读写string</td></tr></tbody></table><ul><li><font color="green">IO对象没有拷贝或赋值</font></li><li><font color="green">定义函数时不能将形参设置为流类型</font></li><li><font color="green">进行IO操作的函数通常使用引用方式传递和返回流</font></li></ul><p>因为读写一个IO对象会改变其状态，因此传递和返回的引用不能是const类型的</p><p>一个流一旦发生错误，其后续的IO操作都会失败</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">istream&amp; <span class="title">read_print</span><span class="params">(istream &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"><span class="keyword">while</span>(s&gt;&gt;score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line">    s.<span class="built_in">clear</span>();<span class="comment">//流复位，清楚所有错误标志位 </span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">read_print(<span class="built_in">cin</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"shansan"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出缓冲管理"><a href="#输出缓冲管理" class="headerlink" title="输出缓冲管理"></a>输出缓冲管理</h3><pre><code>cout&lt;&lt;&quot;shansan&quot;</code></pre><p>文本串可能立即打印出来，但也有可能被操作系统保存在操作系统的缓冲区中，随后再打印。<br>缓冲机制的存在可以让操作系统将程序的多个输出操作组合成单一的系统级写操作<br>由于设备写操作可能很耗时间，允许操作系统将多个输出操作组合为单一的设备写操作可以带来很大的便利</p><p>** 使用操纵符刷新缓冲区 **</p><ul><li>endl:完成换行机制并且刷新缓冲区</li><li>ends:仅刷新缓冲区</li><li>flush:仅刷新缓冲区</li></ul><p>程序崩溃，输出缓冲区不会刷新</p><h2 id="文件IO"><a href="#文件IO" class="headerlink" title="文件IO"></a>文件IO</h2><p><a href="https://shansan.top/2018/10/22/%E5%9D%91%E4%BA%BA%E7%9A%84C++-2/#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6-amp-amp-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">https://shansan.top/2018/10/22/%E5%9D%91%E4%BA%BA%E7%9A%84C++-2/#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6-amp-amp-%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6</a><br>头文件定义了三个文件类型来支持文件IO</p><ul><li>ifstream:从文件读取数据</li><li>ofstream:向文件写入数据</li><li>fstream:读和写操作都能进行</li></ul><p>每一个文件流对象都定义了一个名为open的成员函数，它完成了一些系统相关的操作，来定位给定的文件，并视情况打开为读或写模式<br>一旦一个文件流已经打开，它就保持与对应文件的关联。对一个已经打开的文件流调用open会失败，并会导致failbit被置位，随后试图使用文件流的操作都会失败</p><p>** ifstream、ofstream、fstream对象上的操作，以下操作都适用</p><table><thead><tr><th align="center">操作</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">fstream file</td><td align="center">创建一个未绑定的文件流</td></tr><tr><td align="center">fstream file(file_name)</td><td align="center">创建一个fstream对象，并打开名字为file_name的文件。file_name可以是一个指向C风格的字符串，也可以是一个string类型</td></tr><tr><td align="center">fstream file(file_name,mode)</td><td align="center">mode为指定的打开模式</td></tr><tr><td align="center">fstream.close()</td><td align="center">关闭与fstream绑定的文件</td></tr><tr><td align="center">fstream.is_open()</td><td align="center">返回一个bool值，指出与fstream关联的文件是否成功被打开且尚未被关闭</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream file;</span><br><span class="line">file.<span class="built_in">open</span>(<span class="string">"shansan.txt"</span>);</span><br><span class="line">    <span class="comment">//等价于fstream file("shanshan.txt");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//像文件写入数据</span></span><br><span class="line">file&lt;&lt;<span class="string">"shansan"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">file&lt;&lt;<span class="string">"shansan.top"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">file&lt;&lt;<span class="string">"yeshan333.github.io"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> <span class="built_in">buffer</span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">read_file</span><span class="params">(<span class="string">"shansan.txt"</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="keyword">while</span>(getline(read_file,<span class="built_in">buffer</span>))<span class="comment">//每次从read_file读取一行给buffer </span></span><br><span class="line">    v.push_back(<span class="built_in">buffer</span>);<span class="comment">//将buffer存到vector对象v中 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> temp:v)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">write</span>(); </span><br><span class="line">read_print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Rtdn8Ax.gif" alt=""></p><h2 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h2><p>每一个流都有一个关联的文件模式，用来指出如何使用文件。<br>每一个文件流都定义了一个默认的文件模式</p><ul><li>与ifstream关联的文件默认以in模式打开</li><li>与ofstream关联的文件默认以out模式打开</li><li>与fstream关联的文件默认以in和out模式打开</li></ul><table><thead><tr><th align="center">文件模式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">以读方式打开文件</td></tr><tr><td align="center">out</td><td align="center">以写方式打开文件</td></tr><tr><td align="center">app</td><td align="center">每次写操作前均定位到文件末尾</td></tr><tr><td align="center">ate</td><td align="center">打开文件后立即定位到文件末尾</td></tr><tr><td align="center">trunc</td><td align="center">截断文件</td></tr><tr><td align="center">binary</td><td align="center">以二进制方式进行IO</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2018/11/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2018/11/19/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找算法百度百科"><a href="#二分查找算法百度百科" class="headerlink" title="二分查找算法百度百科"></a>二分查找算法<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618?fr=aladdin" target="_blank" rel="noopener">百度百科</a></h1><p>算法效率<code>O(log&lt;sub&gt;2&lt;/sub&gt;n)</code>（对数时间）<br>输入为一个有序的元素序列，如果要查找的元素包含在列表中，二分查找返回其位置，否则返回null</p><blockquote><p>二分查找的基本思想是将n个元素分成大致相等的两部分，取a[n/2]与x做比较，如果x=a[n/2],则找到x,算法中止；如果x&lt;a[n/2],则只要在&gt;数组a的左半部分继续搜索x,如果x&gt;a[n/2],则只要在数组a的右半部搜索x.</p></blockquote><p>** 仅当列表是有序的时候，二分查找才是有效的 **</p><h2 id="python实现"><a href="#python实现" class="headerlink" title="python实现"></a>python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># binary_search</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list_1, item)</span>:</span></span><br><span class="line"></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list_1)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="string">'''使用 // 整除运算符可以不用int进行类型转换'''</span></span><br><span class="line">        <span class="comment">#每次都检查中间的元素</span></span><br><span class="line">        mid = (low + high)/<span class="number">2</span></span><br><span class="line">        guess = list_1[int(mid)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess == item:</span><br><span class="line">            <span class="keyword">return</span> int(mid)<span class="comment">#返回所在位置的索引</span></span><br><span class="line">        <span class="keyword">if</span> guess &lt; item:   <span class="comment">#猜的数字小了，修改low</span></span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:   <span class="comment">#猜的数字大了，修改high</span></span><br><span class="line">            high = mid<span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    list_2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    print(binary_search(list_2, <span class="number">8</span>))</span><br><span class="line">    print(binary_search(list_2, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/5V9geRk.png" alt=""></p><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> a[<span class="number">9</span>],<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span><span class="comment">//n为元素个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">int</span> high,low=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> guess;</span><br><span class="line"></span><br><span class="line">    high = n<span class="number">-1</span>;<span class="comment">//数组下标从0开始 </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (high+low)/<span class="number">2</span>;</span><br><span class="line">        guess = a[mid];</span><br><span class="line">        <span class="keyword">if</span>(guess == x)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(guess &gt; x)</span><br><span class="line">            high = mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(guess &lt; x)</span><br><span class="line">    low = mid+<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">9</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="keyword">typeid</span>(<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>)).name()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    temp = binary_search(a,<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>),<span class="number">5</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4IuXQTE.png" alt=""></p><h1 id="类型名获取"><a href="#类型名获取" class="headerlink" title="类型名获取"></a>类型名获取</h1><p><font size="" color="red">使用头文件typeinfo下的typeid(parameter).name()获取类型名</font></p><p><img src="https://i.imgur.com/U3uKacO.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精度(precision)控制</title>
      <link href="/2018/11/06/%E7%B2%BE%E5%BA%A6-precision-%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/11/06/%E7%B2%BE%E5%BA%A6-precision-%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="C-输出精度（precision）控制-格式化输出"><a href="#C-输出精度（precision）控制-格式化输出" class="headerlink" title="C++输出精度（precision）控制,格式化输出"></a>C++输出精度（precision）控制,格式化输出</h1><h2 id="使用cout对象的成员"><a href="#使用cout对象的成员" class="headerlink" title="使用cout对象的成员"></a>使用cout对象的成员</h2><ul><li>setprecision()</li><li>setf()</li><li>width()</li><li>fill()</li><li>flags(ios::fixed)</li></ul><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a=<span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">double</span> c=<span class="number">66.666666</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">3</span>);        <span class="comment">//控制输出流显示的有效数字个数 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>.<span class="built_in">width</span>(<span class="number">8</span>);           <span class="comment">//控制输出宽度 </span></span><br><span class="line"><span class="built_in">cout</span>.setf(ios::right);   <span class="comment">//设置对齐方式 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>.setf(ios::right);</span><br><span class="line"><span class="built_in">cout</span>.<span class="built_in">fill</span>(<span class="string">'#'</span>);          <span class="comment">//设置填充字符 </span></span><br><span class="line"><span class="built_in">cout</span>.<span class="built_in">width</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>.flags(ios::fixed); <span class="comment">//flags(ios::fixed)和precision()配合使用控制精度 </span></span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/PHoahko.png" alt=""></p><h2 id="使用头文件iomanip中的setprecision-和setiosflags-ios-fixed-进行精度控制"><a href="#使用头文件iomanip中的setprecision-和setiosflags-ios-fixed-进行精度控制" class="headerlink" title="使用头文件iomanip中的setprecision()和setiosflags(ios::fixed)进行精度控制"></a>使用头文件iomanip中的setprecision()和setiosflags(ios::fixed)进行精度控制</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> e = <span class="number">2.7182818</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">3</span>)&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">3</span>)&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/5IDLZTl.png" alt=""></p><p>参考自：<br><a href="https://blog.csdn.net/yanglingwell/article/details/49507463" target="_blank" rel="noopener">https://blog.csdn.net/yanglingwell/article/details/49507463</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫框架</title>
      <link href="/2018/10/31/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/10/31/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="网络爬虫框架scrapy"><a href="#网络爬虫框架scrapy" class="headerlink" title="网络爬虫框架scrapy"></a>网络爬虫框架<a href="https://scrapy.org/" target="_blank" rel="noopener">scrapy</a></h1><p>（配置型爬虫）</p><p>什么是爬虫框架？</p><ul><li>爬虫框架是实现爬虫功能的一个软件结构和功能组件集合</li><li>爬虫框架是个半成品，帮助用户实现专业网络爬虫</li></ul><h1 id="scrapy框架结构-“5-2”结构"><a href="#scrapy框架结构-“5-2”结构" class="headerlink" title="scrapy框架结构(“5+2”结构)"></a>scrapy框架结构(“5+2”结构)</h1><p><img src="https://i.imgur.com/Wlai3fH.png" alt=""></p><ol><li>spider:</li></ol><ul><li>解析downloader返回的响应（Response）</li><li>产生爬取项（scraped item）</li><li>产生额外的爬去请求（Request）<br>需要用户编写配置代码</li></ul><ol start="2"><li>engine(引擎):</li></ol><ul><li>控制所有模块之间的数据流</li><li>根据条件触发事件<br>不需要用户修改</li></ul><ol start="3"><li>scheduler(调度器):</li></ol><ul><li>对所有爬取请求进行调度处理<br>不需要用户修改</li></ul><ol start="4"><li>downloader(下载器):</li></ol><ul><li>根据请求下载网页<br>不需要用户修改</li></ul><ol start="5"><li>item pipelines():</li></ol><ul><li>以流水线处理spider产生的爬取项</li><li>由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型</li><li>可能操作包括：清理、检验和查重爬取项中的HTML数据，将数据存储到数据库中<br>需要用户编写配置代码</li></ul><ol start="6"><li>downloader middleware(中间件):</li></ol><ul><li>目的：实施engine、scheduler和downloader之间进行用户可配置的控制</li><li>功能：修改、丢弃、新增请求或响应<br>用户可以编写配置代码</li></ul><ol start="7"><li>spider middleware(中间件):</li></ol><ul><li>目的：对请求和爬去项的再处理</li><li>功能：修改、丢弃、新增请求或爬取项<br>用户可以编写配置代码</li></ul><h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p><img src="https://i.imgur.com/MDlRnll.png" alt=""></p><ul><li>1.Engine从Spider处获得爬取请求(Request)</li><li>2.Engine将爬取请求转发给Scheduler,用于调度</li><li>3.Engine从Scheduler处获得下一个爬取的请求</li><li>4.Engine将爬取请求通过中间件发送给Downloader</li><li>5.爬取网页后，Downloader形成响应(Response)，通过中间件(Middleware)发给Engine</li><li>6.Engine将收到的响应通过中间件发送给Spider处理</li><li>7.Spider处理响应后产生爬取项（scraped item）和新的爬取请求(Requests)给Engine</li><li>8.Engine将爬取项发送给Item Pipeline(框架出口)</li><li>9.Engine将爬取请求发送给Scheduler</li></ul><p><img src="https://i.imgur.com/MX9Xf0k.png" alt=""></p><ul><li>Engine控制各模块数据流，不间断从Scheduler处获得爬取请求，直到请求为空</li><li>框架入口：Spider的初始爬取请求</li><li>框架出口：Item Pipeline</li></ul><h1 id="scrapy命令行"><a href="#scrapy命令行" class="headerlink" title="scrapy命令行"></a>scrapy命令行</h1><p>格式</p><pre><code>scrapy &lt;command&gt; [options] [args]</code></pre><p><img src="https://i.imgur.com/x3YVAxJ.png" alt=""></p><p>** 常用命令 **</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th><th align="left">格式</th></tr></thead><tbody><tr><td align="left">startproject</td><td align="left">创建一个新工程</td><td align="left">scrapy startproject <nane> [dir]</td></tr><tr><td align="left">genspider</td><td align="left">创建一个爬虫</td><td align="left">scrapy genspider [options] <name> [domain]</td></tr><tr><td align="left">settings</td><td align="left">获得爬虫配置信息</td><td align="left">scrapy settings [options]</td></tr><tr><td align="left">crawl</td><td align="left">运行一个爬虫</td><td align="left">scrapy crawl <spider></td></tr><tr><td align="left">list</td><td align="left">列出工程中所有的爬虫</td><td align="left">scrapy list</td></tr><tr><td align="left">shell</td><td align="left">启动URL调试命令行</td><td align="left">scrapy shell [url]</td></tr></tbody></table><h1 id="demohttps-python123-io-ws-demo-html"><a href="#demohttps-python123-io-ws-demo-html" class="headerlink" title="demohttps://python123.io/ws/demo.html"></a>demo<a href="https://python123.io/ws/demo.html" target="_blank" rel="noopener">https://python123.io/ws/demo.html</a></h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><pre><code>scrapy startproject python123demo</code></pre><p><img src="https://i.imgur.com/P71Hcws.png" alt=""><br><img src="https://i.imgur.com/WnOOhZS.png" alt=""></p><h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><pre><code>scrapy genspider demo python123.io//生成了一个名为demo的spider//在spider目录下增加代码文件demo.py（该文件也可以手工生成）    </code></pre><p><img src="https://i.imgur.com/d0pJFsx.gif" alt=""></p><p>** demo.py文件 **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    allowed_domains = [<span class="string">'python123.io'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/z8KTfb6.png" alt=""></p><h2 id="配置产生的spider爬虫"><a href="#配置产生的spider爬虫" class="headerlink" title="配置产生的spider爬虫"></a>配置产生的spider爬虫</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="comment">#allowed_domains = ['python123.io']</span></span><br><span class="line">    start_urls = [<span class="string">'http://python123.io/ws/demo.html'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment">#存储文件名demo.html</span></span><br><span class="line">        file_name = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">            self.log(<span class="string">'Saved file %s'</span> % file_name)<span class="comment">#日志</span></span><br></pre></td></tr></table></figure><p>*** 另一个版本 **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="comment">#allowed_domains = ['python123.io']</span></span><br><span class="line">    <span class="comment">#start_urls = ['http://python123.io/ws/demo.html']</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [</span><br><span class="line">                   <span class="string">'http://python123.io/ws/demo.html'</span></span><br><span class="line">               ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment">#存储文件名demo.html</span></span><br><span class="line">        file_name = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(file_name,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">            self.log(<span class="string">'Saved file %s'</span> % file_name)<span class="comment">#日志</span></span><br></pre></td></tr></table></figure><h2 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h2><pre><code>scrapy crawl demo</code></pre><h1 id="Scrapy爬虫数据类型"><a href="#Scrapy爬虫数据类型" class="headerlink" title="Scrapy爬虫数据类型"></a>Scrapy爬虫数据类型</h1><ul><li>Request类</li><li>Response类</li><li>Item类</li></ul><h2 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h2><pre><code>class scrapy.http.Request()</code></pre><ul><li>Request对象表示一个HTTP请求</li><li>由Spider生成，由Downloader执行</li></ul><table><thead><tr><th align="left">属性</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">.url</td><td align="left">Requests对应的请求URL地址</td></tr><tr><td align="left">.method</td><td align="left">对应的请求方法，’GEt’、’POST’等</td></tr><tr><td align="left">.headers</td><td align="left">字典类型风格的请求头</td></tr><tr><td align="left">.body</td><td align="left">请求内容主体，字符串类型</td></tr><tr><td align="left">.meta</td><td align="left">用户添加的扩展信息，在Scrapy内部模块间传递信息使用</td></tr><tr><td align="left">.copy</td><td align="left">复制该请求</td></tr></tbody></table><h2 id="Response类"><a href="#Response类" class="headerlink" title="Response类"></a>Response类</h2><pre><code>class scrapy.http.Response()</code></pre><ul><li>Response对象表示一个HTTp响应</li><li>由Downloader生成，由Spider处理</li></ul><table><thead><tr><th align="left">属性或方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.url</td><td align="left">Response对应的URL地址</td></tr><tr><td align="left">.status</td><td align="left">HTTP状态码，默认是200</td></tr><tr><td align="left">.headers</td><td align="left">Response对应的头部信息</td></tr><tr><td align="left">.body</td><td align="left">Response对应的内容信息，字符串类型</td></tr><tr><td align="left">.flags</td><td align="left">一组标记</td></tr><tr><td align="left">.request</td><td align="left">产生Response类型对应的Request对象</td></tr><tr><td align="left">.copy()</td><td align="left">复制该响应</td></tr></tbody></table><h2 id="Item类"><a href="#Item类" class="headerlink" title="Item类"></a>Item类</h2><pre><code>class scrapy.item.Item()</code></pre><ul><li>Item对象表示一个从HTML页面中提取的信息内容</li><li>由Spider生成，由Item Pipeline处理</li><li>Item类似字典类型，可以按照字典类型操作</li></ul><h1 id="Scrapy爬虫的使用步骤"><a href="#Scrapy爬虫的使用步骤" class="headerlink" title="Scrapy爬虫的使用步骤"></a>Scrapy爬虫的使用步骤</h1><ol><li>创建一个工程和Spider模板</li><li>编写Spider</li><li>编写Item Pipeline</li><li>优化配置策略</li></ol><h1 id="scrapy爬虫信息提取方法"><a href="#scrapy爬虫信息提取方法" class="headerlink" title="scrapy爬虫信息提取方法"></a>scrapy爬虫信息提取方法</h1><ul><li>Beautifui Soup</li><li>lxml</li><li>re</li><li>XPath Selector</li><li>CSS Selector</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML试水</title>
      <link href="/2018/10/30/HTML%E8%AF%95%E6%B0%B4/"/>
      <url>/2018/10/30/HTML%E8%AF%95%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<h1> 一级标题 </h1><h2> 二级标题 </h2><a id="more"></a><p>倚天屠龙记</p><p>张无忌</p><p>这是另一段</p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p><a href = "https://shansan.top">这是我的个人博客</a><br><a href = "https://shansan.top" target="_blank">这是我的个人博客，新标签页打开</a></p><!-- more --><p><a href="mailto:1329441308@qq.com" target="_top">邮箱联系我</a></p><h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><p>** img是自关标记，不需要结束标记 **<br><img src="https://www.baidu.com/img/bd_logo1.png" width="500" height="500"></p><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p><b>这里是粗体</b></p><p><i>这里是斜体</i></p><p><strong>what</strong></p><p><em>这里还是斜体</em></p><p><ins>插入字体，下划线</ins></p><p><del>删除线</del></p><figure class="highlight plain"><figcaption><span>~~~</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">下标&amp;&amp;上标</span><br><span class="line">H&lt;sub&gt;2&lt;&#x2F;sub&gt;O&lt;sub&gt;2&lt;&#x2F;sub&gt;</span><br><span class="line"></span><br><span class="line">嗯&lt;sup&gt;我飘了&lt;&#x2F;sup&gt;</span><br><span class="line"></span><br><span class="line">&lt;code&gt;#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;wocao!&quot;);</span><br><span class="line">&#125;&lt;&#x2F;code&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正常字</span><br><span class="line">&lt;small&gt;小号字&lt;&#x2F;small&gt;</span><br><span class="line"></span><br><span class="line">&lt;q&gt;短引用，双引号包围&lt;&#x2F;q&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote&gt;长引用</span><br><span class="line">土地是以它的肥沃和收获而被估价的；才能也是土地，不过它生产的不是粮食，而是真理。</span><br><span class="line">如果只能滋生瞑想和幻想的话，即使再大的才能也只是砂地或盐池，那上面连小草也长不出来的。</span><br><span class="line"> —— 别林斯基</span><br><span class="line">&lt;&#x2F;blockquote&gt;</span><br><span class="line"></span><br><span class="line">22222222222</span><br><span class="line">22222222222222</span><br><span class="line">2222</span><br><span class="line"></span><br><span class="line">## 表格</span><br><span class="line"></span><br><span class="line">    &lt;table&gt;...&lt;&#x2F;table&gt;:定义表格</span><br><span class="line">    &lt;th&gt;...&lt;&#x2F;th&gt;:定义表格的标题栏（文字加粗体）</span><br><span class="line">    &lt;tr&gt;...&lt;&#x2F;tr&gt;:定义表格的行</span><br><span class="line">    &lt;td&gt;...&lt;&#x2F;td&gt;:定义表格的列</span><br><span class="line"></span><br><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;row 1, cell 1&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;row 1, cell 2&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;row 2, cell 1&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;row 2, cell 2&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">### 跨列表格</span><br><span class="line"></span><br><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;th colspan&#x3D;&quot;2&quot;&gt;电话&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;shansan&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;1329441308&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;td&gt;164354491&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;跨行表格&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;td&gt;shansan&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;th rowspan&#x3D;&quot;2&quot;&gt;电话&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;td&gt;1329441308&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;164354491&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">## syntax</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line"># HTML试水</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h1&gt; 一级标题 &lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt; 二级标题 &lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;p&gt;倚天屠龙记&lt;&#x2F;p&gt;&lt;p&gt;张无忌&lt;&#x2F;p&gt;&lt;p&gt;这是另一段&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">## 锚点</span><br><span class="line"></span><br><span class="line">&lt;a href &#x3D; &quot;https:&#x2F;&#x2F;shansan.top&quot;&gt;这是我的个人博客&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href &#x3D; &quot;https:&#x2F;&#x2F;shansan.top&quot; target&#x3D;&quot;_blank&quot;&gt;这是我的个人博客，新标签页打开&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;mailto:1329441308@qq.com&quot; target&#x3D;&quot;_top&quot;&gt;邮箱联系我&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line"># 图像</span><br><span class="line"></span><br><span class="line">** img是自关标记，不需要结束标记 **</span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;bd_logo1.png&quot; width&#x3D;&quot;500&quot; height&#x3D;&quot;500&quot;&gt;</span><br><span class="line"></span><br><span class="line">## 文本</span><br><span class="line">&lt;b&gt;这里是粗体&lt;&#x2F;b&gt;</span><br><span class="line"></span><br><span class="line">&lt;i&gt;这里是斜体&lt;&#x2F;i&gt;</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;what&lt;&#x2F;strong&gt;</span><br><span class="line"></span><br><span class="line">&lt;em&gt;这里还是斜体&lt;&#x2F;em&gt;</span><br><span class="line"></span><br><span class="line">&lt;ins&gt;插入字体，下划线&lt;&#x2F;ins&gt;</span><br><span class="line"></span><br><span class="line">&lt;del&gt;删除线&lt;&#x2F;del&gt;</span><br><span class="line"></span><br><span class="line">~~~ 还是删除线</span><br></pre></td></tr></table></figure><p>下标&amp;&amp;上标<br>H<sub>2</sub>O<sub>2</sub></p><p>嗯<sup>我飘了</sup></p><p><code>#include<stdio.h><br>int main()<br>{<br>    printf("wocao!");<br>}</code></p><p>正常字<br><small>小号字</small></p><p><q>短引用，双引号包围</q></p><blockquote>长引用土地是以它的肥沃和收获而被估价的；才能也是土地，不过它生产的不是粮食，而是真理。如果只能滋生瞑想和幻想的话，即使再大的才能也只是砂地或盐池，那上面连小草也长不出来的。 —— 别林斯基</blockquote><p>22222222222<br>22222222222222<br>2222</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table border="1"><tr><td>row 1, cell 1</td><td>row 1, cell 2</td></tr><tr><td>row 2, cell 1</td><td>row 2, cell 2</td></tr></table><h3 id="跨列表格"><a href="#跨列表格" class="headerlink" title="跨列表格"></a>跨列表格</h3><table border="1"><tr>  <th>姓名</th>  <th colspan="2">电话</th></tr><tr>  <td>shansan</td>  <td>1329441308</td>  <td>164354491</td></tr><table><h3>跨行表格</h3><table border="1"><tr>  <th>姓名</th>  <td>shansan</td></tr><tr>  <th rowspan="2">电话</th>  <td>1329441308</td></tr><tr>  <td>164354491</td></tr></table>```---]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丘一丘正则表达式</title>
      <link href="/2018/10/18/%E4%B8%98%E4%B8%80%E4%B8%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/10/18/%E4%B8%98%E4%B8%80%E4%B8%98%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式-regular-expression-regex-RE"><a href="#正则表达式-regular-expression-regex-RE" class="headerlink" title="正则表达式(regular expression,regex,RE)"></a>正则表达式(regular expression,regex,RE)</h1><ul><li>正则表达式是一种用来简洁表达一组字符串的表达式</li><li>正则表达式是一种通用的字符串表达框架</li><li>正则表达式是一种针对字符串表达“简洁”和“特征”思想的工具</li><li>正则表达式可以用来判断某字符串的特征归属</li></ul><a id="more"></a><h2 id="正则表达式常用操作符"><a href="#正则表达式常用操作符" class="headerlink" title="正则表达式常用操作符"></a>正则表达式常用操作符</h2><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">表示任意单个字符</td><td align="left">py. 可以匹配pyc,pyy,py!等等</td></tr><tr><td align="left">[ ]</td><td align="left">字符集，对单个字符给出取值范围</td><td align="left">[abc]可以匹配a或b或c；[0-9a-zA-z\_]可以匹配一个数字、一个字母或者一个下划线</td></tr><tr><td align="left">[^ ]</td><td align="left">非字符集，对单个字符给出排除范围</td><td align="left">[^abc]可以匹配非a或非b或非c的单个字符</td></tr><tr><td align="left">*</td><td align="left">前一个字符0次或多次扩展</td><td align="left">abc* 可以匹配ab、abc、abcc、abccc等等</td></tr><tr><td align="left">+</td><td align="left">前一个字符的1次或多次扩展</td><td align="left">abc+可以匹配abc、abcc、abccc等等</td></tr><tr><td align="left">?</td><td align="left">前一个字符0次或1次扩展</td><td align="left">abc?可以匹配ab、abc</td></tr><tr><td align="left">&#124;</td><td align="left">左右表达式任意一个</td><td align="left">abc&#124;def表示abc、def</td></tr><tr><td align="left">{m}</td><td align="left">扩展前一个字符m次</td><td align="left">ab{2}c匹配abbc</td></tr><tr><td align="left">{m,n}</td><td align="left">扩展前一个字符m至n次数（含n）</td><td align="left">ab{1，2}c可以匹配abc、abbc</td></tr><tr><td align="left">^</td><td align="left">匹配字符串开头</td><td align="left">^abc表示abc且在一个字符串的开头,^\d表示必须以数字开头</td></tr><tr><td align="left">$</td><td align="left">匹配字符串结尾</td><td align="left">abc表示abc且在一个字符串的结尾、\d$白哦是必须以数字结尾</td></tr><tr><td align="left">( )</td><td align="left">分组标记,内部只能使用&#124;操作符</td><td align="left">(abc&#124;def)表示abc、def</td></tr><tr><td align="left">\d</td><td align="left">可以匹配一个数字，相当于[0-9]</td><td align="left">\d{3}表示匹配3个数字，如010</td></tr><tr><td align="left">\w</td><td align="left">可以匹配一个字母或者数字或者下划线，相当于[a-zA-Z0-9_]</td><td align="left">\w\w\d可以匹配’py3’</td></tr><tr><td align="left">\s</td><td align="left">可以匹配一个空格（也包括Tab等空白字符）</td><td align="left">\s+表示至少有一个空格，如’ ‘、’  ‘</td></tr></tbody></table><h2 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h2><p>在正则表达式中，如果直接给出字符，就是精确匹配</p><ul><li>‘pyt’                 匹配’pyt’</li><li>‘00\d’               可以匹配’007’</li><li>‘\w\d’              可以匹配’!5’</li><li>‘ye.’                 可以匹配’yes’</li><li>‘(P&#124;p)python’    可以匹配’Python’、’python’</li></ul><h2 id="高阶精确匹配-经典实例"><a href="#高阶精确匹配-经典实例" class="headerlink" title="高阶精确匹配,经典实例"></a>高阶精确匹配,经典实例</h2><ul><li>^[A-Za-z]+$   匹配由26个英文字母组成的字符串,如’abrg’、’abgsfsfga’</li><li>[a-zA-Z\_][0-9a-zA-Z\_]* 可以匹配由字母或者下划线开头、后接任意一个由字母、数字或者下划线组成的字符串，也就是python的合法变量</li><li>^-?\d+$      匹配整数形式的字符串</li><li>^[0-9]<em>[1-9][0-9]</em>$    匹配正整数形式的字符串</li><li>[1-9]\d{5}   中国境内邮政编码,6位</li><li>[\u4e00-\u9fa5]    匹配中文字符</li><li>\d{3}-\d{8}&#124;\d{4}-\d{7}   国内电话号码,010-68913536</li></ul><h1 id="python正则表达式模块，（Re模块）"><a href="#python正则表达式模块，（Re模块）" class="headerlink" title="python正则表达式模块，（Re模块）"></a>python正则表达式模块，（Re模块）</h1><ul><li>re是python的标准库，主要用于字符串匹配</li><li>re库采用raw string类型(原生字符串类型)表示正则表达式，例如<code>r&#39;[1-9]\d{5}&#39;</code>,raw string是不包含对转义符再次转义的字符串</li><li>re库也可以采用string类型表示正则表达，但是较为繁琐，例如<code>&#39;[1-9]\\d{5}&#39;</code></li></ul><p><img src="https://i.imgur.com/lVBuhYo.png" alt=""></p><h2 id="re库功能函数"><a href="#re库功能函数" class="headerlink" title="re库功能函数"></a>re库功能函数</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><pre><code>1. re.search(pattern,string,flags=0)</code></pre><p>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</p><ul><li><code>pattern</code>:正则表达式的字符串或原生字符串表示</li><li><code>string</code>:待匹配字符串</li><li><code>flags</code>： 正则表达式使用时的控制标记</li></ul><p><img src="https://i.imgur.com/X9WaiN1.png" alt=""></p><table><thead><tr><th align="center">常用标记</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.I&ensp;re.IGNORECASE</td><td align="center">忽略正则表达式的大小写，[A-Z]能够匹配小写字符</td></tr><tr><td align="center">re.M&ensp;re.MULTILINE</td><td align="center">正则表达式中的^操作符能够将给定字符串的每行当做匹配开始</td></tr><tr><td align="center">re.s&ensp;re.DOTALL</td><td align="center">正则表达式中的.操作符能够匹配所有字符串，默认匹配除换行外的所有字符串</td></tr></tbody></table><pre><code>2. re.match(pattern,string,flags=0)</code></pre><p>从一个字符串的开始位置起匹配正则表达式，返回match对象</p><ul><li><code>pattern</code>:正则表达式的字符串或者原生字符串表示</li><li><code>string</code>:待匹配字符串</li><li><code>flags</code>:正则表达式使用时的控制标记</li></ul><p><img src="http://pflr7ix8q.bkt.clouddn.com/%E5%BD%95%E5%88%B6_2018_10_18_01_18_31_80.gif" alt=""></p><p><img src="https://i.imgur.com/1inU7F0.png" alt=""></p><pre><code>3. re.findall(pattern,string,flags=0)</code></pre><p>搜索字符串，以列表类型返回全部能匹配的字符串<br><img src="https://i.imgur.com/GcMBPR8.png" alt=""></p><pre><code>4. re.split(pattern,string,maxsplit=0,flags=0)</code></pre><p>将一个字符串按照正则匹配结果进行分割，返回列表类型</p><ul><li><code>maxsplt</code>:最大分割数，剩余部分作为最后一个元素输出</li></ul><p><img src="https://i.imgur.com/qjizjnw.png" alt=""></p><pre><code>5. re.finditer(pattern,string,flags=0)</code></pre><p>搜索字符串，返回一个匹配结果的迭代类型，每个迭代类型是match对象</p><p><img src="https://i.imgur.com/hMVJvPg.png" alt=""></p><pre><code>6. re.sub(pattern,repl,string,cout=0,flags=0)</code></pre><p>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</p><ul><li><code>repl</code>:替换匹配字符串的字符串</li><li><code>cout</code>:匹配的最大替换次数</li></ul><p><img src="https://i.imgur.com/cklxzNj.png" alt=""></p><h2 id="re库的面向对象用法"><a href="#re库的面向对象用法" class="headerlink" title="re库的面向对象用法"></a>re库的面向对象用法</h2><p>在python中使用正则表达式的时候，re模块内部会做两件事：</p><ol><li><p>编译正则表达式，如果正则表达式本身不合法，会报错</p></li><li><p>用编译后的正则表达式去匹配字符串</p><p> regex = re.compile(pattern,flags=0)<br> 将正则表达式的字符串形式编译成正则表达式对象</p></li></ol><ul><li><code>pattern</code>:正则表达式的字符串或原生字符串表示</li><li><code>flags</code>:正则表达式使用时的控制标记</li></ul><p><img src="https://i.imgur.com/sX4AKNn.png" alt=""><br>compile后生成了regular expression对象，由于该1对象包含了正则表达式，所以调用对应的方法不用给出正则字符串</p><h2 id="re库的Match对象"><a href="#re库的Match对象" class="headerlink" title="re库的Match对象"></a>re库的Match对象</h2><ul><li>Match对象是一次匹配的结果，包含很多信息</li></ul><p><img src="https://i.imgur.com/lYM5asv.png" alt=""></p><h3 id="Match对象的属性"><a href="#Match对象的属性" class="headerlink" title="Match对象的属性"></a>Match对象的属性</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.string</td><td align="center">待匹配的文本</td></tr><tr><td align="center">.re</td><td align="center">匹配使用的pattern对象(正则表达式)</td></tr><tr><td align="center">.pos</td><td align="center">正则表达式搜索文本的开始位置</td></tr><tr><td align="center">.endpos</td><td align="center">正则表达式搜索文本的结束位置</td></tr></tbody></table><p><img src="https://i.imgur.com/He93M8y.png" alt=""></p><h3 id="Match对象的方法"><a href="#Match对象的方法" class="headerlink" title="Match对象的方法"></a>Match对象的方法</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.group(0)</td><td align="center">获得匹配后的字符串</td></tr><tr><td align="center">.start()</td><td align="center">匹配字符串在原始字符串的开始位置</td></tr><tr><td align="center">.end()</td><td align="center">匹配字符串在原始字符串的结束位置</td></tr><tr><td align="center">.span()</td><td align="center">返回(.start(),.end())一个元组</td></tr></tbody></table><p><img src="https://i.imgur.com/RHLtKVc.png" alt=""></p><p><img src="https://i.imgur.com/6j5rlHZ.png" alt=""></p><h2 id="re库的贪婪匹配和最小匹配"><a href="#re库的贪婪匹配和最小匹配" class="headerlink" title="re库的贪婪匹配和最小匹配"></a>re库的贪婪匹配和最小匹配</h2><p><font color="red">re库默认使用贪婪匹配，即匹配最长的子串</font></p><p><img src="https://i.imgur.com/jWn9dqY.png" alt=""></p><p><font color="red">最小匹配</font></p><p><img src="https://i.imgur.com/Zrdq7QE.png" alt=""></p><p>** 最小匹配操作符 **</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*?</td><td align="center">前一个字符0次或者无限次扩展，最小匹配</td></tr><tr><td align="center">+?</td><td align="center">前一个字符1次或者无限次扩展，最小匹配</td></tr><tr><td align="center">??</td><td align="center">前一个字符0次或1次扩展，最小匹配</td></tr><tr><td align="center">{m,n}?</td><td align="center">扩展前一个字符m至n次(包含n)，最小匹配</td></tr></tbody></table><p>只要输出长度可能不同的，都可以通过在操作符后面加<code>?</code>变成最小匹配</p><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定向爬虫-中国大学MOOC-python网络爬虫实例</title>
      <link href="/2018/10/15/%E5%AE%9A%E5%90%91%E7%88%AC%E8%99%AB-%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC-python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B/"/>
      <url>/2018/10/15/%E5%AE%9A%E5%90%91%E7%88%AC%E8%99%AB-%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC-python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>定向爬虫:仅对输入URL进行爬取，不扩展爬取<br><a href="http://www.zuihaodaxue.cn/zuihaodaxuepaiming2018.html" target="_blank" rel="noopener">中国大学排名2018</a></p><p><img src="https://i.imgur.com/5sll5d0.png" alt=""></p><a id="more"></a><h1 id="format格式化输出"><a href="#format格式化输出" class="headerlink" title="format格式化输出"></a>format格式化输出</h1><p><img src="https://i.imgur.com/06d74Hk.png" alt=""></p><p>看下所需信息位置<br><img src="https://i.imgur.com/J15TrKJ.png" alt=""></p><h1 id="程序大体框架"><a href="#程序大体框架" class="headerlink" title="程序大体框架"></a>程序大体框架</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist,html)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist,num)</span>:</span></span><br><span class="line">print(<span class="string">"Suc"</span>+str(num))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">uinfo = []</span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">html = getHTMLText(url)</span><br><span class="line">fillUnivList(uinfo,html)</span><br><span class="line">printUnivList(uinfo,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="getHTMLText"><a href="#getHTMLText" class="headerlink" title="getHTMLText()"></a>getHTMLText()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHTMLText</span><span class="params">(url)</span>:</span>       <span class="comment">#获取网页内容</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.raise_for_status()   <span class="comment">#用于捕获异常</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br></pre></td></tr></table></figure><h2 id="fillUnivList"><a href="#fillUnivList" class="headerlink" title="fillUnivList()"></a>fillUnivList()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span>         <span class="comment"># 把网页内容放到数据结构中</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="string">'''一个tr标签存放一所大学的信息'''</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">"tbody"</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):  <span class="comment">#仅仅遍历标签,过滤掉非标签类型的其它信息</span></span><br><span class="line">            tds = tr(<span class="string">'td'</span>)  <span class="comment">#将所有的td标签存放到列表tds中，等价于tr.find_all('td')返回一个列表类型</span></span><br><span class="line">            <span class="string">'''由于进行了遍历，使用print打印tds会得到多个列表'''</span></span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])<span class="comment">#向ulist中增加所需要的信息</span></span><br></pre></td></tr></table></figure><h2 id="printUnivList"><a href="#printUnivList" class="headerlink" title="printUnivList()"></a>printUnivList()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivlist</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="string">"排名"</span>,<span class="string">"学校"</span>,<span class="string">"总分"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4   <span class="comment"># 用到instance</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHTMLText</span><span class="params">(url)</span>:</span>       <span class="comment">#获取网页内容</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.raise_for_status()   <span class="comment">#用于捕获异常</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span>         <span class="comment"># 把网页内容放到数据结构中</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="string">'''一个tr标签存放一所大学的信息'''</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">"tbody"</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):  <span class="comment">#仅仅遍历标签,过滤掉非标签类型的其它信息</span></span><br><span class="line">            tds = tr(<span class="string">'td'</span>)  <span class="comment">#将所有的td标签存放到列表tds中，等价于tr.find_all('td')返回一个列表类型</span></span><br><span class="line">            <span class="string">'''由于进行了遍历，使用print打印tds会得到多个列表'''</span></span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])<span class="comment">#向ulist中增加所需要的信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivlist</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(<span class="string">"排名"</span>,<span class="string">"学校"</span>,<span class="string">"总分"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(<span class="string">"&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">"http://www.zuihaodaxue.cn/zuihaodaxuepaiming2018.html"</span></span><br><span class="line">    html = GetHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo,html)</span><br><span class="line">    printUnivlist(uinfo,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/SJSG4OB.png" alt=""></p><h2 id="代码优化，使用chr-12288-解决中文对齐问题"><a href="#代码优化，使用chr-12288-解决中文对齐问题" class="headerlink" title="代码优化，使用chr(12288)解决中文对齐问题"></a>代码优化，使用chr(12288)解决中文对齐问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4   <span class="comment"># 用到instance</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHTMLText</span><span class="params">(url)</span>:</span>       <span class="comment">#获取网页内容</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url)</span><br><span class="line">r.raise_for_status()   <span class="comment">#用于捕获异常</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span>         <span class="comment"># 把网页内容放到数据结构中</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">"html.parser"</span>)</span><br><span class="line">    <span class="string">'''一个tr标签存放一所大学的信息'''</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">"tbody"</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):  <span class="comment">#仅仅遍历标签,过滤掉非标签类型的其它信息</span></span><br><span class="line">            tds = tr(<span class="string">'td'</span>)  <span class="comment">#将所有的td标签存放到列表tds中，等价于tr.find_all('td')返回一个列表类型</span></span><br><span class="line">            <span class="string">'''由于进行了遍历，使用print打印tds会得到多个列表'''</span></span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">3</span>].string])<span class="comment">#向ulist中增加所需要的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''def printUnivlist(ulist, num):</span></span><br><span class="line"><span class="string">    print("&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;".format("排名","学校","总分"))</span></span><br><span class="line"><span class="string">    for i in range(num):</span></span><br><span class="line"><span class="string">        u = ulist[i]</span></span><br><span class="line"><span class="string">        print("&#123;:^10&#125;\t&#123;:^6&#125;\t&#123;:^10&#125;".format(u[0],u[1],u[2]))</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''优化输出格式，中文对齐问题,使用chr(12288)表示一个中文空格，utf-8编码'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivlist</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span>   <span class="comment">#输出模板，&#123;3&#125;使用format函数第三个变量进行填充，即使用中文空格进行填充</span></span><br><span class="line">    print(tplt.format(<span class="string">"排名"</span>,<span class="string">"学校"</span>,<span class="string">"总分"</span>,chr(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">"http://www.zuihaodaxue.cn/zuihaodaxuepaiming2018.html"</span></span><br><span class="line">    html = GetHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo,html)</span><br><span class="line">    printUnivlist(uinfo,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.imgur.com/8X92UkB.png" alt=""></h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eyes candy</title>
      <link href="/2018/10/15/Eyes-candy/"/>
      <url>/2018/10/15/Eyes-candy/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/6hQACUc.jpg" alt=""></p><a id="more"></a><p><img src="https://i.imgur.com/0cIchiA.jpg" alt=""></p><p><img src="https://i.imgur.com/Vs2gTr7.jpg" alt=""></p><p><img src="https://i.imgur.com/D8ueTlT.jpg" alt=""></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Just relax</title>
      <link href="/2018/10/13/Just-relax/"/>
      <url>/2018/10/13/Just-relax/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=498286736&auto=1&height=66"></iframe><a id="more"></a>![](https://i.imgur.com/SHZN1xr.jpg)<p><img src="https://i.imgur.com/axpCGXn.jpg" alt=""></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Astronomy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具小整合</title>
      <link href="/2018/10/03/%E5%B7%A5%E5%85%B7%E5%B0%8F%E6%95%B4%E5%90%88/"/>
      <url>/2018/10/03/%E5%B7%A5%E5%85%B7%E5%B0%8F%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/HTg1isz.jpg" alt=""></p><a id="more"></a><p>百度文库、知网文章下载<br><a href="https://pan.baidu.com/s/1-BY2B4hBn_3wHgYlXkFLCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1-BY2B4hBn_3wHgYlXkFLCg</a></p><p>百度云下载提速软件<br><a href="https://pan.baidu.com/s/1EYy5AN9JVv7m42f6NNmvlA" target="_blank" rel="noopener" title="https://pan.baidu.com/s/1EYy5AN9JVv7m42f6NNmvlA">https://pan.baidu.com/s/1EYy5AN9JVv7m42f6NNmvlA</a></p><p>微软PE工具箱<br><a href="https://pan.baidu.com/s/1J1Nud9qTU6jSP6cTpk8Zlg" target="_blank" rel="noopener">https://pan.baidu.com/s/1J1Nud9qTU6jSP6cTpk8Zlg</a></p><p>window10数字权利激活工具</p><p>github:</p><ol><li><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition/releases" target="_blank" rel="noopener">https://github.com/TGSAN/CMWTAT_Digital_Edition/releases</a></li><li><a href="https://github.com/vyvojar/slshim/releases" target="_blank" rel="noopener">https://github.com/vyvojar/slshim/releases</a></li></ol><p><a href="https://www.spturate.xyz/2018/10/03/1/" target="_blank" rel="noopener">激活方法参考</a><br><a href="https://pan.baidu.com/s/1_VqJiuBeCHLyRp5Xcc562w" target="_blank" rel="noopener">https://pan.baidu.com/s/1_VqJiuBeCHLyRp5Xcc562w</a><br><a href="https://pan.baidu.com/s/1iNGBlhhef20PtMGdUNsaWA" target="_blank" rel="noopener">kms激活工具</a><br><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">win10下载</a></p><p>Gif制作工具<br><a href="https://pan.baidu.com/s/1Eu_O-7EPSB81cwmR-R1zvw" target="_blank" rel="noopener">https://pan.baidu.com/s/1Eu_O-7EPSB81cwmR-R1zvw</a><br>提取码:q51n</p><p>录屏软件<br><a href="https://pan.baidu.com/s/1VsN5XClhZiRCqUyxbTJ_tg" target="_blank" rel="noopener">https://pan.baidu.com/s/1VsN5XClhZiRCqUyxbTJ_tg</a><br>提取码:vlrb</p><p><a href="https://pan.baidu.com/s/1qRiQdT-NvKgLVtEzJHPbLA" target="_blank" rel="noopener">CamStudio汉化版</a><br>提取码:kckg</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单爬虫</title>
      <link href="/2018/09/29/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
      <url>/2018/09/29/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Requests库入门http-www-python-requests-org-en-master"><a href="#Requests库入门http-www-python-requests-org-en-master" class="headerlink" title="Requests库入门http://www.python-requests.org/en/master/"></a>Requests库入门<a href="http://www.python-requests.org/en/master/" target="_blank" rel="noopener">http://www.python-requests.org/en/master/</a></h1><p><a href="http://www.python-requests.org/en/master/" target="_blank" rel="noopener">requests</a></p><h2 id="Requests库的7个主要方法"><a href="#Requests库的7个主要方法" class="headerlink" title="Requests库的7个主要方法"></a>Requests库的7个主要方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">requests.request()</td><td align="center">构造一个请求，支撑以下各方法的基本方法</td></tr><tr><td align="center">requests.get()</td><td align="center">获取HTML网面的方法</td></tr><tr><td align="center">requests.head()</td><td align="center">获取HTML网页头部信息的方法</td></tr><tr><td align="center">requests.post()</td><td align="center">向HTML网页提交POST请求的方法</td></tr><tr><td align="center">requests.put()</td><td align="center">向HTML页面提交PUT请求的方法</td></tr><tr><td align="center">requests.patch()</td><td align="center">向HTML网页提交局部修改请求</td></tr><tr><td align="center">requests.delete()</td><td align="center">向HTML网页提交删除请求</td></tr></tbody></table><a id="more"></a><h2 id="Requests库的get-方法"><a href="#Requests库的get-方法" class="headerlink" title="Requests库的get()方法"></a>Requests库的get()方法</h2><p><code>requests.get(url,params=None,**kwargs)</code></p><ol><li>url：拟获取页面的url链接</li><li>params：url中的额外参数，字典或字节流格式，可选</li><li>**kwargs：12个控制访问的参数</li></ol><p> <code>r = requests.get(url)</code></p><ul><li>r为一个包含服务器资源的Response对象(即为requests.get()返回内容)</li><li>get()方法和url构造了一个向服务器请求资源的Request对象</li></ul><h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><p>Response对象包含服务器反回的所有信息，也包含请求的Request信息</p><h5 id="Response对象的属性"><a href="#Response对象的属性" class="headerlink" title="Response对象的属性"></a>Response对象的属性</h5><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">r.stats_code</td><td align="center">HTTP请求的返回状态，200表示连接成功</td></tr><tr><td align="center">r.txt</td><td align="center">HTTP响应的字符串形式</td></tr><tr><td align="center">r.encoding</td><td align="center">从HTTP header中猜测的响应方式的内容编码</td></tr><tr><td align="center">r.apparent_enconding</td><td align="center">从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td align="center">r.content</td><td align="center">HTTP响应内容编码的二进制形式</td></tr></tbody></table><ol><li>r.encoding:如果charset不存在，则默认编码为ISO-8859-1，r.text根据r.encoding显示网页内容</li><li>r.apparent_encoding：根据网页内容分析出的编码方式</li></ol><p><font size="3" color="green">理解Response异常</font><br><code>r.raise_for_status()</code>如果不是200，产生异常requests.HTTPError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.raise_for_status()在方法内部判断r.statu_code是否等于200，不需要增加额外的if语句，该语句便于try-except进行异常处理</span><br></pre></td></tr></table></figure><h3 id="Requests库的异常"><a href="#Requests库的异常" class="headerlink" title="Requests库的异常"></a>Requests库的异常</h3><table><thead><tr><th align="center">异常</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">requests.ConnectonError</td><td align="center">网路连接错误异常</td></tr><tr><td align="center">requests.HTTPError</td><td align="center">HTTP错误异常</td></tr><tr><td align="center">requests.URLRequire</td><td align="center">URL缺失异常</td></tr><tr><td align="center">requests.TooManyRedirects</td><td align="center">超过最大重定向次数，产生重定向异常</td></tr><tr><td align="center">requests.ConnectTimeout</td><td align="center">连接远程服务器异常</td></tr><tr><td align="center">requests.Timeout</td><td align="center">请求URL超时，产生超时异常</td></tr></tbody></table><h2 id="python爬取网页代码通用框架"><a href="#python爬取网页代码通用框架" class="headerlink" title="python爬取网页代码通用框架"></a>python爬取网页代码通用框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()<span class="comment">#如果状态不是200，产生HTTPError异常</span></span><br><span class="line">        <span class="comment">#print(r.status_code)</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h2 id="Requests库的request-方法"><a href="#Requests库的request-方法" class="headerlink" title="Requests库的request()方法"></a>Requests库的request()方法</h2><pre><code>requests.request(method, url, **kwargs)</code></pre><ul><li>method: 请求方式，对应get/put/delete等7种</li><li>url:拟获取页面的url链接</li><li>**kwargs: 控制访问的参数</li></ul><h3 id="kwargs-控制访问参数，（可选）"><a href="#kwargs-控制访问参数，（可选）" class="headerlink" title="kwargs:控制访问参数，（可选）"></a>kwargs:控制访问参数，（可选）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">params：字典或字节序列，作为参数增加到URL中</span><br><span class="line">data：字典、字节序列或文章对象，作为Request的内容</span><br><span class="line">json：Json格式的数据</span><br><span class="line">headers：HTTP定制头</span><br><span class="line">cookies：字典或CookieJar，Request中的cookie</span><br><span class="line">auth：元组，支持HTTP认证功能</span><br><span class="line">file：字典类型，传输文件</span><br><span class="line">timeout：设置超时时间，单位为秒</span><br><span class="line">proxies：字典类型，设定访问代理服务器，可以增加登录认证</span><br><span class="line">allow_redirects：True&#x2F;False，默认为True，重定向开关</span><br><span class="line">strem：True&#x2F;False，默认为True，获取页面立即下载开关</span><br><span class="line">verify：True&#x2F;False，默认为True,认证SSl证书开关</span><br><span class="line">cert：本地SSL证书</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建历程（4）</title>
      <link href="/2018/09/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%884%EF%BC%89/"/>
      <url>/2018/09/27/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="博客评论系统的选择"><a href="#博客评论系统的选择" class="headerlink" title="博客评论系统的选择"></a>博客评论系统的选择</h1><h4 id="其他评论系统参考"><a href="#其他评论系统参考" class="headerlink" title="其他评论系统参考"></a><a href="https://blog.csdn.net/weixin_41196185/article/details/79178780" target="_blank" rel="noopener">其他评论系统参考</a></h4><p><font color="red">经过一波折腾，最终选择了Valine</font><br><font size="4" color="green">我喜欢它的匿名评论，23333！！！</font></p><h3 id="参考教程-作者的博客-Valine文档"><a href="#参考教程-作者的博客-Valine文档" class="headerlink" title="参考教程 作者的博客   Valine文档"></a>参考教程 <a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/" target="_blank" rel="noopener">作者的博客</a>   <a href="https://valine.js.org/" target="_blank" rel="noopener">Valine文档</a></h3><ul><li><a href="https://github.com/litten/hexo-theme-yilia/pull/646" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia/pull/646</a></li><li><a href="https://www.xxwhite.com/2017/Valine.html" target="_blank" rel="noopener">https://www.xxwhite.com/2017/Valine.html</a></li><li><a href="https://panjunwen.com/diy-a-comment-system/" target="_blank" rel="noopener">https://panjunwen.com/diy-a-comment-system/</a></li></ul><a id="more"></a><h2 id="安装过程简记"><a href="#安装过程简记" class="headerlink" title="安装过程简记"></a>安装过程简记</h2><ul><li>注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a></li><li>创建应用</li><li>获取appid和appkey</li><li>设置安全域名</li></ul><p><img src="https://i.imgur.com/z6ScJ8h.png" alt=""></p><p><img src="https://i.imgur.com/98lsq22.png" alt=""></p><p><img src="https://i.imgur.com/Ppruek5.png" alt=""></p><p><img src="https://i.imgur.com/sRNNe85.png" alt=""></p><h4 id="部署云引擎-参考"><a href="#部署云引擎-参考" class="headerlink" title="部署云引擎 参考"></a>部署云引擎 <a href="https://panjunwen.com/valine-admin-document/" target="_blank" rel="noopener">参考</a></h4><p>设置好环境变量</p><h3 id="yilia主题修改"><a href="#yilia主题修改" class="headerlink" title="yilia主题修改"></a>yilia主题修改</h3><h4 id="1、修改themes-yilia-config-yml"><a href="#1、修改themes-yilia-config-yml" class="headerlink" title="1、修改themes\yilia\_config.yml"></a>1、修改<code>themes\yilia\_config.yml</code></h4><p><a href="https://github.com/litten/hexo-theme-yilia/pull/646" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia/pull/646</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#6、Valine https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appid:    <span class="comment">#LeanCloud的appId</span></span><br><span class="line">  appkey:   <span class="comment">#Leancloud的appKey</span></span><br><span class="line">  verify: <span class="literal">false</span> <span class="comment">#验证码</span></span><br><span class="line">  notifi: <span class="literal">false</span> <span class="comment">#评论回复提醒</span></span><br><span class="line">  avatar: <span class="string">' '</span><span class="comment">#评论列表头像样式</span></span><br><span class="line">  placeholder: Just go go <span class="comment">#评论占位框</span></span><br><span class="line">  pageSize: 15    <span class="comment">#评论分页</span></span><br></pre></td></tr></table></figure><h4 id="2、修改themes-yilia-layout-partial-article-ejs"><a href="#2、修改themes-yilia-layout-partial-article-ejs" class="headerlink" title="2、修改themes\yilia\layout\_partial\article.ejs"></a>2、修改<code>themes\yilia\layout\_partial\article.ejs</code></h4><p>我是在尾部位添加的<br><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-27/40764127.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class="line">    &lt;section id=<span class="string">"comments"</span> style=<span class="string">"margin:10px;padding:10px;background:#fff;"</span>&gt;</span><br><span class="line">      &lt;%- partial(<span class="string">'post/valine'</span>, &#123;</span><br><span class="line">        key: post.slug,</span><br><span class="line">        title: post.title,</span><br><span class="line">        url: config.url+url_for(post.path)</span><br><span class="line">        &#125;) %&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="在themes-yilia-layout-partial-post下新建个·valine-ejs·文件"><a href="#在themes-yilia-layout-partial-post下新建个·valine-ejs·文件" class="headerlink" title="在themes\yilia\layout\_partial\post下新建个·valine.ejs·文件"></a>在<code>themes\yilia\layout\_partial\post</code>下新建个·valine.ejs·文件</h4><p>添加如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"vcomment"</span> class=<span class="string">"comment"</span>&gt;&lt;/div&gt; </span><br><span class="line">&lt;script src=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"//unpkg.com/valine/dist/Valine.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   var notify = <span class="string">'&lt;%= theme.valine.notify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">   var verify = <span class="string">'&lt;%= theme.valine.verify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    window.onload = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        new Valine(&#123;</span><br><span class="line">            el: <span class="string">'#vcomment'</span>,</span><br><span class="line">            notify: notify,</span><br><span class="line">            verify: verify,</span><br><span class="line">            app_id: <span class="string">"&lt;%= theme.valine.appid %&gt;"</span>,</span><br><span class="line">            app_key: <span class="string">"&lt;%= theme.valine.appkey %&gt;"</span>,</span><br><span class="line">            placeholder: <span class="string">"&lt;%= theme.valine.placeholder %&gt;"</span>,</span><br><span class="line">            avatar:<span class="string">"&lt;%= theme.valine.avatar %&gt;"</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="测试下效果"><a href="#测试下效果" class="headerlink" title="测试下效果"></a>测试下效果</h4><pre><code>hexo ghexo s</code></pre><p><a href="http://localhost:4000" target="_blank" rel="noopener">预览</a></p><p>没问题就部署到github吧<br>    hexo d -g</p><h1 id="定时器添加"><a href="#定时器添加" class="headerlink" title="定时器添加"></a>定时器添加</h1><p><a href="https://github.com/zhaojun1998/Valine-Admin/issues/1" target="_blank" rel="noopener">https://github.com/zhaojun1998/Valine-Admin/issues/1</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建历程（3）</title>
      <link href="/2018/09/26/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%883%EF%BC%89/"/>
      <url>/2018/09/26/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo生成工程文件介绍"><a href="#hexo生成工程文件介绍" class="headerlink" title="hexo生成工程文件介绍"></a>hexo生成工程文件介绍</h1><blockquote><p><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo插件</a></p></blockquote><blockquote><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">主题yilia</a></p></blockquote><h2 id="默认目录结构"><a href="#默认目录结构" class="headerlink" title="默认目录结构"></a>默认目录结构</h2><p><a href="https://www.jianshu.com/p/17d55d420d94" target="_blank" rel="noopener">具体参考</a></p><a id="more"></a><pre><code>|--.deploy|--public|--scaffolds|--source|--themes|--_config.yml|--package.json</code></pre><ul><li>.deploy ：部署到GitHub上的内容目录</li><li>public：输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录</li><li>source：文件源码目录</li><li>themes：主题文件目录</li><li>—config.yml：全局配置文件</li><li>package.json：应用程序数据</li></ul><h1 id="给主题yilia配置干货"><a href="#给主题yilia配置干货" class="headerlink" title="给主题yilia配置干货"></a>给主题yilia配置干货</h1><h2 id="一、腾讯公益404"><a href="#一、腾讯公益404" class="headerlink" title="一、腾讯公益404"></a>一、腾讯公益404</h2><p><strong><em><a href="http://www.qq.com/404/" target="_blank" rel="noopener">公益404</a></em></strong></p><p><code>hexo new page 404 #新建一个页面</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在生成的index.md文件下添加以下代码</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;]\</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;404&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g<span class="comment">#直接部署到GitHub</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/liu1340308350/article/details/81744824" target="_blank" rel="noopener">参考</a></p><h2 id="二、制作个网站ico"><a href="#二、制作个网站ico" class="headerlink" title="二、制作个网站ico"></a>二、制作个网站ico</h2><p><a href="http://www.favicon-icon-generator.com/" target="_blank" rel="noopener">戳这里</a></p><p>也可以不弄，直接用</p><p>把你的网站ico放在<code>public\img</code>即可<br>修改<code>theme\_config.yml</code><br><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-26/70038755.jpg" alt=""></p><h2 id="三、使用网站访问量统计-使用友盟"><a href="#三、使用网站访问量统计-使用友盟" class="headerlink" title="三、使用网站访问量统计(使用友盟)"></a>三、使用网站访问量统计(使用友盟)</h2><p><strong>效果如下</strong><br><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-26/75982791.jpg" alt=""></p><h4 id="注册账号友盟官网"><a href="#注册账号友盟官网" class="headerlink" title="注册账号友盟官网"></a>注册账号<a href="https://www.umeng.com/" target="_blank" rel="noopener">友盟官网</a></h4><p><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-26/69139019.jpg" alt=""><br><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-26/14156171.jpg" alt=""></p><h4 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a><em>获取代码</em></h4><p><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-26/66278706.jpg" alt=""></p><p>在<code>hemes\yilia\layout\_partial\footer.ejs</code>挑个位置放</p><p><img src="http://pflr7ix8q.bkt.clouddn.com/18-9-26/61353041.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><strong><a href="http://localhost:4000/" target="_blank" rel="noopener">看下效果</a></strong></p><p><strong><em><code>hexo d #部署到 github</code></em></strong></p><h5 id="若不想用CNZZ参考"><a href="#若不想用CNZZ参考" class="headerlink" title="若不想用CNZZ参考"></a>若不想用CNZZ<a href="https://blog.csdn.net/zxlvxj/article/details/77720934" target="_blank" rel="noopener">参考</a></h5>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建历程（2）</title>
      <link href="/2018/09/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2018/09/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、使用hexo-deploy部署博客到Github"><a href="#一、使用hexo-deploy部署博客到Github" class="headerlink" title="一、使用hexo deploy部署博客到Github"></a>一、使用hexo deploy部署博客到Github</h1><blockquote><p><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">使用参考</a></p></blockquote><p>** 先安装个扩展<code>$ npm install hexo-deployer-git --save</code> **</p><h2 id="1-修改博客根目录下的-config-yml文件"><a href="#1-修改博客根目录下的-config-yml文件" class="headerlink" title="1.修改博客根目录下的_config_yml文件"></a>1.修改博客根目录下的<code>_config_yml</code>文件</h2><p><img src="https://img.vim-cn.com/b9/242b742e41b045e48e38055e2202cdfdbbc5f3.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:yeshan333/yeshan333.github.io.git <span class="comment"># 这个可到Github仓库拿</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="https://img.vim-cn.com/44/35d14788fe4cab09d8b20da1753335ad758c23.png" alt=""></p><a id="more"></a><h2 id="2-部署到GitHub-repo"><a href="#2-部署到GitHub-repo" class="headerlink" title="2.部署到GitHub repo"></a>2.部署到GitHub repo</h2><h3 id="生成ssh-keys"><a href="#生成ssh-keys" class="headerlink" title="生成ssh keys"></a>生成ssh keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span> <span class="comment">#生成新的key文件，邮箱地址填注册Github时用的</span></span><br></pre></td></tr></table></figure><p><img src="https://img.vim-cn.com/37/ecb8a0a1f900c804d06651139773f0979a6270.png" alt="https://img.vim-cn.com/37/ecb8a0a1f900c804d06651139773f0979a6270.png"></p><h3 id="将生成的ssh-keys添加到Github的deploy-keys中"><a href="#将生成的ssh-keys添加到Github的deploy-keys中" class="headerlink" title="将生成的ssh keys添加到Github的deploy keys中"></a>将生成的ssh keys添加到Github的deploy keys中</h3><ul><li><ol><li>复制key</li></ol></li></ul><p>** 这里用到.ssh目录下，id_rsa.pub文件中的那串key**</p><p><img src="https://img.vim-cn.com/5b/a4d58b99d58d1c22ffec0e5fc6301c45b20b58.png" alt="https://img.vim-cn.com/5b/a4d58b99d58d1c22ffec0e5fc6301c45b20b58.png"></p><ul><li><ol start="2"><li><a href="https://github.com/" target="_blank" rel="noopener">到GitHub</a>的yourname.hithub.io仓库添加那串key到deploy keys中</li></ol></li></ul><p><img src="https://img.vim-cn.com/1d/9e76911a5130f878845a7178b03d8977eac937.png" alt=""></p><ul><li><ol start="3"><li>测试一下是否添加成功了:</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://img.vim-cn.com/00/7d3b8f51ed72ecd2ce3f73c387944729f18ff1.png" alt=""></p><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><ol><li>先配好git用户信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的名字"</span>     <span class="comment"># github用户名</span></span><br><span class="line">git config --global user.email <span class="string">"邮箱@邮箱.com"</span>    <span class="comment"># github邮箱</span></span><br></pre></td></tr></table></figure><ol start="2"><li>部署博客到仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo d <span class="comment"># 部署到远程仓库</span></span><br></pre></td></tr></table></figure><p>访问<a href="https://yourname.github.io查看结果" target="_blank" rel="noopener">https://yourname.github.io查看结果</a></p><p>** 到此，整个博客搭建完成了 **</p><p>以下是写的是博客主题的更换，主题可以自己写，也可以使用别人写的，可去这里<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>找喜欢的主题，如果使用的是别人的主题，需要阅读主题使用文档进行相关配置。</p><h1 id="二、Hexo主题设置"><a href="#二、Hexo主题设置" class="headerlink" title="二、Hexo主题设置"></a>二、Hexo主题设置</h1><ul><li><ol><li>更换主题</li></ol></li></ul><p>cd进themes目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>对根目录下的<code>config_yml</code>文件进行修改</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes&#x2F;yilia</span><br><span class="line">git pull #更新主题</span><br></pre></td></tr></table></figure><p><img src="https://img.vim-cn.com/bf/e7a244bb8eacd6753b71192d4cc7396837493d.png" alt=""></p><ul><li><ol start="3"><li>预览新主题</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清楚缓存，删除public目录</span></span><br><span class="line">hexo g     <span class="comment"># 生成新的博客静态文件</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>去<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>预览，没毛病就<code>hexo d</code>部署到远程仓库。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建历程（1）</title>
      <link href="/2018/09/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%881%EF%BC%89/"/>
      <url>/2018/09/25/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><code>我为什么要搭建自己的博客:人嘛!总会有迷茫的时候。无聊了就搭建一个博客玩玩。借此思考下人生</code><a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat" target="_blank" rel="noopener">戳这里先洗下脑</a></p><blockquote><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">[BetterExplained]为什么你应该（从现在开始就）写博客</a></p></blockquote><h1 id="使用Hexo-GitHub-Pages搭建属于自己的博客"><a href="#使用Hexo-GitHub-Pages搭建属于自己的博客" class="headerlink" title="使用Hexo+GitHub Pages搭建属于自己的博客"></a>使用Hexo+GitHub Pages搭建属于自己的博客</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>安装Node.js</li><li>安装git</li><li>一个GitHub账号</li><li>hexo全家桶</li></ul><a id="more"></a><h3 id="一、Node-js安装参考"><a href="#一、Node-js安装参考" class="headerlink" title="一、Node.js安装参考"></a>一、Node.js安装参考</h3><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js官网</a></p><p><strong><font color="red">nodejs版本越高越好，不然后面安装hexo时会出现问题，Hexo官网给的建议是6.9版本以上</font></strong></p><p><a href="https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-x64.msi" target="_blank" rel="noopener">官网windows 64bit 下载(v10.16.0)</a></p><h3 id="二、git的安装参考"><a href="#二、git的安装参考" class="headerlink" title="二、git的安装参考"></a>二、git的安装参考</h3><p>安装需根据自己的实际情况，在cmd使用<code>git --version</code>指令可以查看安装的版本</p><p><a href="https://github.com/git-for-windows/git/releases/download/v2.19.0.windows.1/Git-2.19.0-64-bit.exe" target="_blank" rel="noopener">windows 64 bit 下载（v2.19.0）</a></p><h3 id="三、使用Github-Pages"><a href="#三、使用Github-Pages" class="headerlink" title="三、使用Github Pages"></a>三、使用Github Pages</h3><ul><li><a href="https://github.com/" target="_blank" rel="noopener">注册Github账号</a></li><li>创建一个repository，用于存放博客站点文件</li><li>开启Github Page</li></ul><h4 id="1、创建一个repository"><a href="#1、创建一个repository" class="headerlink" title="1、创建一个repository"></a>1、创建一个repository</h4><p><img src="https://img.vim-cn.com/0b/d84ec69ee51d0ea78240bde231d2e6f827db22.png" alt=""></p><p><img src="https://img.vim-cn.com/57/523b9522e73a662cb39060489ef61f3a559b47.png" alt=""></p><p><del>仓库命名方式须注意下，这样命名会开启githubpage服务</del>，代码仓库命名方式随意，如果以<code>用户名+github.io</code>的形式命名，会自动开启Github Pages服务，否则需要自己在仓库的设置那里手动开启GIthub Pages服务。</p><p>Github Pages 是 github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，<del>不仅没有空间限制(为免费用户提供了500M空间)，还可以绑定自己的域名</del>，1GB空间限制（个人博客够用了），每月带宽限制100GB，自由绑定自己的域名。</p><h4 id="2、开启GitHub-Pages"><a href="#2、开启GitHub-Pages" class="headerlink" title="2、开启GitHub Pages"></a>2、开启GitHub Pages</h4><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages官方介绍</a>，Github的中文官方文档已推出<a href="https://help.github.com/cn/articles/what-is-github-pages" target="_blank" rel="noopener">https://help.github.com/cn/articles/what-is-github-pages</a>(2019年7月11日更新)</p><p><img src="https://img.vim-cn.com/88/218b90bc2b18ccf6cc7f5a51b77409fcf273a8.png" alt=""></p><p><img src="https://img.vim-cn.com/40/fe0f7b5ff242c5aa99afa0f0c82b3ddde0dc31.png" alt=""></p><p><code>点击choose a theme</code>选完主题后即可到<code>https://yourname.github.io/</code>访问自己的个人主页了，yourname记得替换成你的用户名。</p><p><strong>接下来需要使用Hexo在本地创建好博客，再将博客文件上传到刚刚创建的仓库。</strong></p><h3 id="四、Hexo配置"><a href="#四、Hexo配置" class="headerlink" title="四、Hexo配置"></a>四、Hexo配置</h3><blockquote><p>Hexo是一个静态站点生成器，如果想深入了解Hexo可以去Hexo的官网看看。<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p></blockquote><h4 id="在本地搭建博客"><a href="#在本地搭建博客" class="headerlink" title="在本地搭建博客"></a>在本地搭建博客</h4><h5 id="1-安装hexo插件套装"><a href="#1-安装hexo插件套装" class="headerlink" title="1.安装hexo插件套装"></a>1.安装hexo插件套装</h5><p>以下两条命令直接打开windows cmd执行即可，用git bash执行也行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo命令行工具</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><del>安装hexo包到全局node_modules中，修改package.json文件，将模块名和版本号添加到dependencies部分<br>npm install hexo –save</del></p><h5 id="2-初始化hexo"><a href="#2-初始化hexo" class="headerlink" title="2.初始化hexo"></a>2.初始化hexo</h5><ul><li>这里需要新建个目录用于存放本地的博客文件</li><li>往后的命令均需要在此目录下执行，可用<code>cd</code>命令进入目录中执行往后的命令</li></ul><p><img src="https://img.vim-cn.com/2a/5a136fa1d0a4c187856395924455de40c626eb.gif" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init  <span class="comment"># 初始化目录，生成相关文件</span></span><br></pre></td></tr></table></figure><ul><li>目录中生成的文件如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── node_modules       # 存放博客依赖的npm packages</span><br><span class="line">├── scaffolds          # 存放生成博客文章、博客页面、草稿的模板目录</span><br><span class="line">├   ├── draft.md</span><br><span class="line">├   ├── page.md</span><br><span class="line">├   └── post.md</span><br><span class="line">├── source</span><br><span class="line">├   └── posts           # 用于存放博客文章</span><br><span class="line">├── _config.yml         # 博客全局配置文件</span><br><span class="line">├── .gitignore</span><br><span class="line">├── package.json        # 记录当前目录下实际安装的各个npm package的具体来源和版本号</span><br><span class="line">└── package-lock.json   # 存放锁定安装时的包的版本号，此文件一般会上传到git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo s <span class="comment"># 部署到本地服务器http://localhost:4000/</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:4000/" target="_blank" rel="noopener">预览效果http://localhost:4000/</a></p><p>到这里本地的博客搭建完了，接下来就是将博客上传到刚刚创建的Github仓库，上传后就可以使用外网访问了</p><p><a href="/2018/09/25/博客搭建历程（2）/">博客搭建历程（2）</a></p><h1 id="博客搭建参考教程推荐"><a href="#博客搭建参考教程推荐" class="headerlink" title="博客搭建参考教程推荐"></a>博客搭建参考教程推荐</h1><ul><li><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">csdn</a>  </li><li><a href="https://m.w3cschool.cn/hexo_blog/hexo_blog-tvpu244e.html" target="_blank" rel="noopener">w3cschool</a></li><li><a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">博客园</a></li><li><a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">思否</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello my first blog in here ！</title>
      <link href="/2018/09/19/hello-my-first-blog-in-here-%EF%BC%81/"/>
      <url>/2018/09/19/hello-my-first-blog-in-here-%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="New-Start"><a href="#New-Start" class="headerlink" title="New Start"></a>New Start</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
